
Default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  080104b0  080104b0  000114b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080108e8  080108e8  000118e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080108f0  080108f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080108f4  080108f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  080108f8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000045c  240001e8  08010ae0  000121e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000644  08010ae0  00012644  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002300d  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003fa6  00000000  00000000  00035223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa0  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014b8  00000000  00000000  0003ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b1e  00000000  00000000  0003c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025b74  00000000  00000000  00073c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165e50  00000000  00000000  000997ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff60a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008018  00000000  00000000  001ff650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  00207668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010494 	.word	0x08010494

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	08010494 	.word	0x08010494

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2224      	movs	r2, #36	@ 0x24
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00e f8c5 	bl	800e858 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d0:	4a32      	ldr	r2, [pc, #200]	@ (800079c <MX_ADC1_Init+0xec>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000730:	2201      	movs	r2, #1
 8000732:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000734:	4818      	ldr	r0, [pc, #96]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000736:	f001 fed1 	bl	80024dc <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000740:	f000 ff5a 	bl	80015f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074c:	4619      	mov	r1, r3
 800074e:	4812      	ldr	r0, [pc, #72]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000750:	f003 fc8c 	bl	800406c <HAL_ADCEx_MultiModeConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800075a:	f000 ff4d 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_ADC1_Init+0xf0>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_ADC1_Init+0xf4>)
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000782:	f002 fbe7 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800078c:	f000 ff34 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000204 	.word	0x24000204
 800079c:	40022000 	.word	0x40022000
 80007a0:	08600004 	.word	0x08600004
 80007a4:	47ff0000 	.word	0x47ff0000

080007a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2224      	movs	r2, #36	@ 0x24
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f00e f84f 	bl	800e858 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007bc:	4a33      	ldr	r2, [pc, #204]	@ (800088c <MX_ADC2_Init+0xe4>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007c2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC2_Init+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000802:	2203      	movs	r2, #3
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC2_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC2_Init+0xe0>)
 800081c:	2201      	movs	r2, #1
 800081e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000820:	4819      	ldr	r0, [pc, #100]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000822:	f001 fe5b 	bl	80024dc <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800082c:	f000 fee4 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_ADC2_Init+0xe8>)
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000834:	2306      	movs	r3, #6
 8000836:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000838:	2304      	movs	r3, #4
 800083a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000840:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000842:	2304      	movs	r3, #4
 8000844:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000856:	f002 fb7d 	bl	8002f54 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000860:	f000 feca 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_ADC2_Init+0xec>)
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000868:	230c      	movs	r3, #12
 800086a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_ADC2_Init+0xe0>)
 8000872:	f002 fb6f 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 800087c:	f000 febc 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000274 	.word	0x24000274
 800088c:	40022100 	.word	0x40022100
 8000890:	3ef08000 	.word	0x3ef08000
 8000894:	4fb80000 	.word	0x4fb80000

08000898 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a67      	ldr	r2, [pc, #412]	@ (8000a54 <HAL_ADC_MspInit+0x1bc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d157      	bne.n	800096a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ba:	4b67      	ldr	r3, [pc, #412]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4a65      	ldr	r2, [pc, #404]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 80008c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008c4:	4b64      	ldr	r3, [pc, #400]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d10e      	bne.n	80008ea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008cc:	4b63      	ldr	r3, [pc, #396]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d2:	4a62      	ldr	r2, [pc, #392]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008dc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b5c      	ldr	r3, [pc, #368]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f0:	4a5a      	ldr	r2, [pc, #360]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fa:	4b58      	ldr	r3, [pc, #352]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	4b54      	ldr	r3, [pc, #336]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090e:	4a53      	ldr	r2, [pc, #332]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23c0      	movs	r3, #192	@ 0xc0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4849      	ldr	r0, [pc, #292]	@ (8000a60 <HAL_ADC_MspInit+0x1c8>)
 800093a:	f006 fbc1 	bl	80070c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800093e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4844      	ldr	r0, [pc, #272]	@ (8000a64 <HAL_ADC_MspInit+0x1cc>)
 8000954:	f006 fbb4 	bl	80070c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2012      	movs	r0, #18
 800095e:	f003 fd42 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000962:	2012      	movs	r0, #18
 8000964:	f003 fd59 	bl	800441a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000968:	e06f      	b.n	8000a4a <HAL_ADC_MspInit+0x1b2>
  else if(adcHandle->Instance==ADC2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a68 <HAL_ADC_MspInit+0x1d0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d16a      	bne.n	8000a4a <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a37      	ldr	r2, [pc, #220]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 800097c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800097e:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <HAL_ADC_MspInit+0x1c0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10e      	bne.n	80009a4 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 8000988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800098c:	4a33      	ldr	r2, [pc, #204]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 8000998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800099c:	f003 0320 	and.w	r3, r3, #32
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	4a2c      	ldr	r2, [pc, #176]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <HAL_ADC_MspInit+0x1c4>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 80009c2:	23a8      	movs	r3, #168	@ 0xa8
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4822      	ldr	r0, [pc, #136]	@ (8000a60 <HAL_ADC_MspInit+0x1c8>)
 80009d6:	f006 fb73 	bl	80070c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream0;
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009dc:	4a24      	ldr	r2, [pc, #144]	@ (8000a70 <HAL_ADC_MspInit+0x1d8>)
 80009de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 80009fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a00:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a10:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a20:	f003 fd16 	bl	8004450 <HAL_DMA_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8000a2a:	f000 fde5 	bl	80015f8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a32:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <HAL_ADC_MspInit+0x1d4>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2012      	movs	r0, #18
 8000a40:	f003 fcd1 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a44:	2012      	movs	r0, #18
 8000a46:	f003 fce8 	bl	800441a <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	@ 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000
 8000a58:	2400035c 	.word	0x2400035c
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58020000 	.word	0x58020000
 8000a64:	58021400 	.word	0x58021400
 8000a68:	40022100 	.word	0x40022100
 8000a6c:	240002e4 	.word	0x240002e4
 8000a70:	40020010 	.word	0x40020010

08000a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_DMA_Init+0x4c>)
 8000a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <MX_DMA_Init+0x4c>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_DMA_Init+0x4c>)
 8000a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	200b      	movs	r0, #11
 8000a9e:	f003 fca2 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f003 fcb9 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2066      	movs	r0, #102	@ 0x66
 8000aae:	f003 fc9a 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000ab2:	2066      	movs	r0, #102	@ 0x66
 8000ab4:	f003 fcb1 	bl	800441a <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a79      	ldr	r2, [pc, #484]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b77      	ldr	r3, [pc, #476]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af8:	4b73      	ldr	r3, [pc, #460]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a72      	ldr	r2, [pc, #456]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b68      	ldr	r3, [pc, #416]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b64      	ldr	r3, [pc, #400]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a63      	ldr	r2, [pc, #396]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b60      	ldr	r3, [pc, #384]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a5b      	ldr	r2, [pc, #364]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b59      	ldr	r3, [pc, #356]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b55      	ldr	r3, [pc, #340]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a54      	ldr	r2, [pc, #336]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b51      	ldr	r3, [pc, #324]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bac:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a45      	ldr	r2, [pc, #276]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <MX_GPIO_Init+0x204>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Relay_2_Pin|Relay_3_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2103      	movs	r1, #3
 8000bce:	483f      	ldr	r0, [pc, #252]	@ (8000ccc <MX_GPIO_Init+0x208>)
 8000bd0:	f006 fc1e 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bda:	483d      	ldr	r0, [pc, #244]	@ (8000cd0 <MX_GPIO_Init+0x20c>)
 8000bdc:	f006 fc18 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|Relay_0_Pin|Relay_1_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f240 4103 	movw	r1, #1027	@ 0x403
 8000be6:	483b      	ldr	r0, [pc, #236]	@ (8000cd4 <MX_GPIO_Init+0x210>)
 8000be8:	f006 fc12 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4839      	ldr	r0, [pc, #228]	@ (8000cd8 <MX_GPIO_Init+0x214>)
 8000bf2:	f006 fc0d 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4834      	ldr	r0, [pc, #208]	@ (8000cdc <MX_GPIO_Init+0x218>)
 8000c0c:	f006 fa58 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Relay_2_Pin|Relay_3_Pin;
 8000c10:	2303      	movs	r3, #3
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <MX_GPIO_Init+0x208>)
 8000c28:	f006 fa4a 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c2c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4822      	ldr	r0, [pc, #136]	@ (8000cd0 <MX_GPIO_Init+0x20c>)
 8000c46:	f006 fa3b 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|Relay_0_Pin|Relay_1_Pin;
 8000c4a:	f240 4303 	movw	r3, #1027	@ 0x403
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	481c      	ldr	r0, [pc, #112]	@ (8000cd4 <MX_GPIO_Init+0x210>)
 8000c64:	f006 fa2c 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <MX_GPIO_Init+0x21c>)
 8000c7e:	f006 fa1f 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c94:	230a      	movs	r3, #10
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <MX_GPIO_Init+0x220>)
 8000ca0:	f006 fa0e 	bl	80070c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_GPIO_Init+0x214>)
 8000cbc:	f006 fa00 	bl	80070c0 <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	@ 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58021400 	.word	0x58021400
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58020c00 	.word	0x58020c00
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58021800 	.word	0x58021800
 8000ce4:	58020000 	.word	0x58020000

08000ce8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0D7FF;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C1_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d24:	f006 fba8 	bl	8007478 <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 fc63 	bl	80015f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d36:	f006 ff6d 	bl	8007c14 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 fc5a 	bl	80015f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d48:	f006 ffaf 	bl	8007caa <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 fc51 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000360 	.word	0x24000360
 8000d60:	40005400 	.word	0x40005400
 8000d64:	10c0d7ff 	.word	0x10c0d7ff

08000d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b8      	sub	sp, #224	@ 0xe0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22b8      	movs	r2, #184	@ 0xb8
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00d fd65 	bl	800e858 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <HAL_I2C_MspInit+0xc8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d146      	bne.n	8000e26 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d98:	f04f 0208 	mov.w	r2, #8
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 ff68 	bl	8008c84 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dba:	f000 fc1d 	bl	80015f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <HAL_I2C_MspInit+0xd0>)
 8000e04:	f006 f95c 	bl	80070c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_I2C_MspInit+0xcc>)
 8000e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	37e0      	adds	r7, #224	@ 0xe0
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40005400 	.word	0x40005400
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020400 	.word	0x58020400

08000e3c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000e46:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <HD44780_Init+0xdc>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000e4c:	4b33      	ldr	r3, [pc, #204]	@ (8000f1c <HD44780_Init+0xe0>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000e52:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <HD44780_Init+0xe4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000e58:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <HD44780_Init+0xdc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d907      	bls.n	8000e70 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000e60:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <HD44780_Init+0xe4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <HD44780_Init+0xe4>)
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e006      	b.n	8000e7e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <HD44780_Init+0xe4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <HD44780_Init+0xe4>)
 8000e7c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000e7e:	f000 f9cd 	bl	800121c <DelayInit>
  HAL_Delay(50);
 8000e82:	2032      	movs	r0, #50	@ 0x32
 8000e84:	f000 fff4 	bl	8001e70 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <HD44780_Init+0xe0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f98b 	bl	80011a8 <ExpanderWrite>
  HAL_Delay(1000);
 8000e92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e96:	f000 ffeb 	bl	8001e70 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000e9a:	2030      	movs	r0, #48	@ 0x30
 8000e9c:	f000 f972 	bl	8001184 <Write4Bits>
  DelayUS(4500);
 8000ea0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ea4:	f000 f9e4 	bl	8001270 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ea8:	2030      	movs	r0, #48	@ 0x30
 8000eaa:	f000 f96b 	bl	8001184 <Write4Bits>
  DelayUS(4500);
 8000eae:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000eb2:	f000 f9dd 	bl	8001270 <DelayUS>
//  DelayUS(4500);
//
//  Write4Bits(0x02 << 4);
//  DelayUS(100);

  Write4Bits(0x03 << 4);
 8000eb6:	2030      	movs	r0, #48	@ 0x30
 8000eb8:	f000 f964 	bl	8001184 <Write4Bits>
  DelayUS(150);
 8000ebc:	2096      	movs	r0, #150	@ 0x96
 8000ebe:	f000 f9d7 	bl	8001270 <DelayUS>

  Write4Bits(0x02 << 4);
 8000ec2:	2020      	movs	r0, #32
 8000ec4:	f000 f95e 	bl	8001184 <Write4Bits>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HD44780_Init+0xe4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f919 	bl	800110a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HD44780_Init+0xe8>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000ede:	f000 f887 	bl	8000ff0 <HD44780_Display>
  HD44780_Clear();
 8000ee2:	f000 f827 	bl	8000f34 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <HD44780_Init+0xec>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HD44780_Init+0xec>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f907 	bl	800110a <SendCommand>
//  DelayUS(4500);
//
  HD44780_CreateSpecialChar(0, special1);
 8000efc:	490b      	ldr	r1, [pc, #44]	@ (8000f2c <HD44780_Init+0xf0>)
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f8b8 	bl	8001074 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000f04:	490a      	ldr	r1, [pc, #40]	@ (8000f30 <HD44780_Init+0xf4>)
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 f8b4 	bl	8001074 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000f0c:	f000 f81d 	bl	8000f4a <HD44780_Home>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	240003b7 	.word	0x240003b7
 8000f1c:	240003b8 	.word	0x240003b8
 8000f20:	240003b4 	.word	0x240003b4
 8000f24:	240003b5 	.word	0x240003b5
 8000f28:	240003b6 	.word	0x240003b6
 8000f2c:	24000000 	.word	0x24000000
 8000f30:	24000008 	.word	0x24000008

08000f34 <HD44780_Clear>:

void HD44780_Clear()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f000 f8e6 	bl	800110a <SendCommand>
  DelayUS(2000);
 8000f3e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f42:	f000 f995 	bl	8001270 <DelayUS>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HD44780_Home>:

void HD44780_Home()
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 f8db 	bl	800110a <SendCommand>
  DelayUS(2000);
 8000f54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f58:	f000 f98a 	bl	8001270 <DelayUS>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HD44780_SetCursor+0x5c>)
 8000f72:	f107 0408 	add.w	r4, r7, #8
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000f7c:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <HD44780_SetCursor+0x60>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d303      	bcc.n	8000f8e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HD44780_SetCursor+0x60>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	3318      	adds	r3, #24
 8000f94:	443b      	add	r3, r7
 8000f96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f8ac 	bl	800110a <SendCommand>
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	080104b0 	.word	0x080104b0
 8000fc0:	240003b7 	.word	0x240003b7

08000fc4 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HD44780_NoDisplay+0x28>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HD44780_NoDisplay+0x28>)
 8000fd4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HD44780_NoDisplay+0x28>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f892 	bl	800110a <SendCommand>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240003b5 	.word	0x240003b5

08000ff0 <HD44780_Display>:

void HD44780_Display()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HD44780_Display+0x28>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HD44780_Display+0x28>)
 8001000:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HD44780_Display+0x28>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f87c 	bl	800110a <SendCommand>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	240003b5 	.word	0x240003b5

0800101c <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HD44780_Cursor+0x28>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HD44780_Cursor+0x28>)
 800102c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HD44780_Cursor+0x28>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f866 	bl	800110a <SendCommand>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	240003b5 	.word	0x240003b5

08001048 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HD44780_Blink+0x28>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HD44780_Blink+0x28>)
 8001058:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800105a:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HD44780_Blink+0x28>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f850 	bl	800110a <SendCommand>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	240003b5 	.word	0x240003b5

08001074 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	b25b      	sxtb	r3, r3
 800108e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001092:	b25b      	sxtb	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f837 	bl	800110a <SendCommand>
  for (int i=0; i<8; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e009      	b.n	80010b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f83b 	bl	8001126 <SendChar>
  for (int i=0; i<8; i++)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	ddf2      	ble.n	80010a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f827 	bl	8001126 <SendChar>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80010e8:	e006      	b.n	80010f8 <HD44780_PrintStr+0x18>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f817 	bl	8001126 <SendChar>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f4      	bne.n	80010ea <HD44780_PrintStr+0xa>
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f812 	bl	8001142 <Send>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f804 	bl	8001142 <Send>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	460a      	mov	r2, r1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	4313      	orrs	r3, r2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f80b 	bl	8001184 <Write4Bits>
  Write4Bits((lownib)|mode);
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	4313      	orrs	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f804 	bl	8001184 <Write4Bits>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f809 	bl	80011a8 <ExpanderWrite>
  PulseEnable(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f821 	bl	80011e0 <PulseEnable>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <ExpanderWrite+0x30>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80011be:	f107 020f 	add.w	r2, r7, #15
 80011c2:	230a      	movs	r3, #10
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	214e      	movs	r1, #78	@ 0x4e
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <ExpanderWrite+0x34>)
 80011cc:	f006 f9f0 	bl	80075b0 <HAL_I2C_Master_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	240003b8 	.word	0x240003b8
 80011dc:	24000360 	.word	0x24000360

080011e0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffd8 	bl	80011a8 <ExpanderWrite>
//  DelayUS(20);
  DelayUS(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 f839 	bl	8001270 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffce 	bl	80011a8 <ExpanderWrite>
//  DelayUS(20);
  DelayUS(50);
 800120c:	2032      	movs	r0, #50	@ 0x32
 800120e:	f000 f82f 	bl	8001270 <DelayUS>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <DelayInit>:

static void DelayInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <DelayInit+0x4c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <DelayInit+0x4c>)
 8001226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800122a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <DelayInit+0x4c>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <DelayInit+0x4c>)
 8001232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001236:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <DelayInit+0x50>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <DelayInit+0x50>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <DelayInit+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <DelayInit+0x50>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <DelayInit+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001256:	bf00      	nop
  __ASM volatile ("NOP");
 8001258:	bf00      	nop
  __ASM volatile ("NOP");
 800125a:	bf00      	nop
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000edf0 	.word	0xe000edf0
 800126c:	e0001000 	.word	0xe0001000

08001270 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <DelayUS+0x44>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <DelayUS+0x48>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9a      	lsrs	r2, r3, #18
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <DelayUS+0x4c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <DelayUS+0x4c>)
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f6      	bhi.n	8001292 <DelayUS+0x22>
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000010 	.word	0x24000010
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	e0001000 	.word	0xe0001000

080012c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2201      	movs	r2, #1
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <__io_putchar+0x20>)
 80012d2:	f00a fde1 	bl	800be98 <HAL_UART_Transmit>
	return ch;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	24000460 	.word	0x24000460

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f000 fd2f 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f881 	bl	80013f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012f2:	f000 f8ed 	bl	80014d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f6:	f7ff fbe5 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012fa:	f7ff fbbb 	bl	8000a74 <MX_DMA_Init>
  MX_ADC1_Init();
 80012fe:	f7ff f9d7 	bl	80006b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001302:	f000 fb3b 	bl	800197c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001306:	f000 fc39 	bl	8001b7c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800130a:	f7ff fced 	bl	8000ce8 <MX_I2C1_Init>
  MX_TIM6_Init();
 800130e:	f000 fb8b 	bl	8001a28 <MX_TIM6_Init>
  MX_ADC2_Init();
 8001312:	f7ff fa49 	bl	80007a8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	// HAL_UART_Receive_IT(&huart3, rx_buff, 7);
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001316:	2104      	movs	r1, #4
 8001318:	482f      	ldr	r0, [pc, #188]	@ (80013d8 <main+0xf4>)
 800131a:	f00a fa1d 	bl	800b758 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 800131e:	482f      	ldr	r0, [pc, #188]	@ (80013dc <main+0xf8>)
 8001320:	f00a f8ee 	bl	800b500 <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY,
 8001324:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001328:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800132c:	482c      	ldr	r0, [pc, #176]	@ (80013e0 <main+0xfc>)
 800132e:	f002 fe07 	bl	8003f40 <HAL_ADCEx_Calibration_Start>
			ADC_SINGLE_ENDED);
	// HAL_ADC_Start_IT(&hadc2);

	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t*) voltage, 2) != HAL_OK) {
 8001332:	2202      	movs	r2, #2
 8001334:	492b      	ldr	r1, [pc, #172]	@ (80013e4 <main+0x100>)
 8001336:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <main+0xfc>)
 8001338:	f001 fad8 	bl	80028ec <HAL_ADC_Start_DMA>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <main+0x64>
		printf("ADC initialization error!\r\n");
 8001342:	4829      	ldr	r0, [pc, #164]	@ (80013e8 <main+0x104>)
 8001344:	f00d f9a8 	bl	800e698 <puts>
//    lcd_send_string ("HELLO WORLD");
//    lcd_put_cur(1, 0);
//    lcd_send_string("from CTECH");

	/* Initialize */
	HD44780_Init(2);
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff fd77 	bl	8000e3c <HD44780_Init>

	/* Clear buffer */
	HD44780_Clear();
 800134e:	f7ff fdf1 	bl	8000f34 <HD44780_Clear>

	/* Hide characters */
	HD44780_NoDisplay();
 8001352:	f7ff fe37 	bl	8000fc4 <HD44780_NoDisplay>
	HD44780_Cursor();
 8001356:	f7ff fe61 	bl	800101c <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fdff 	bl	8000f60 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO STM32!!!");
 8001362:	4822      	ldr	r0, [pc, #136]	@ (80013ec <main+0x108>)
 8001364:	f7ff febc 	bl	80010e0 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff feac 	bl	80010c6 <HD44780_PrintSpecialChar>
	HAL_Delay(1000);
 800136e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001372:	f000 fd7d 	bl	8001e70 <HAL_Delay>

	/* Show characters */
	HD44780_Display();
 8001376:	f7ff fe3b 	bl	8000ff0 <HD44780_Display>

	/* Move position */
	HD44780_SetCursor(0, 1);
 800137a:	2101      	movs	r1, #1
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fdef 	bl	8000f60 <HD44780_SetCursor>
	HD44780_PrintStr("BYE STM32!!!");
 8001382:	481b      	ldr	r0, [pc, #108]	@ (80013f0 <main+0x10c>)
 8001384:	f7ff feac 	bl	80010e0 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fe9c 	bl	80010c6 <HD44780_PrintSpecialChar>
	HAL_Delay(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001392:	f000 fd6d 	bl	8001e70 <HAL_Delay>

	/* Blink cursor */
	HD44780_Blink();
 8001396:	f7ff fe57 	bl	8001048 <HD44780_Blink>
//    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
//    HAL_Delay(500);
//  }
//
	char snum[5];
	for (int x = 1; x <= 200; x++) {
 800139a:	2301      	movs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e015      	b.n	80013cc <main+0xe8>
		itoa(x, snum, 10);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	220a      	movs	r2, #10
 80013a4:	4619      	mov	r1, r3
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f00c fbe4 	bl	800db74 <itoa>
		HD44780_Clear();
 80013ac:	f7ff fdc2 	bl	8000f34 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fdd4 	bl	8000f60 <HD44780_SetCursor>
		HD44780_PrintStr(snum);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe90 	bl	80010e0 <HD44780_PrintStr>
		HAL_Delay(10);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f000 fd55 	bl	8001e70 <HAL_Delay>
	for (int x = 1; x <= 200; x++) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80013d0:	dde6      	ble.n	80013a0 <main+0xbc>
//	printf("Some different radices: %d %x %o %#x %#o\n", 100, 100, 100, 100, 100);
//	printf("floats: %4.2f %+.0e %E\n", 3.1416, 3.1416, 3.1416);
//	printf("Width trick: %*d\n", 5, 10);
//	printf("%s\n", "A string");

	while (1) {
 80013d2:	bf00      	nop
 80013d4:	e7fd      	b.n	80013d2 <main+0xee>
 80013d6:	bf00      	nop
 80013d8:	240003c8 	.word	0x240003c8
 80013dc:	24000414 	.word	0x24000414
 80013e0:	24000274 	.word	0x24000274
 80013e4:	240003bc 	.word	0x240003bc
 80013e8:	080104c0 	.word	0x080104c0
 80013ec:	080104dc 	.word	0x080104dc
 80013f0:	080104ec 	.word	0x080104ec

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09c      	sub	sp, #112	@ 0x70
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fe:	224c      	movs	r2, #76	@ 0x4c
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00d fa28 	bl	800e858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2220      	movs	r2, #32
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00d fa22 	bl	800e858 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001414:	2002      	movs	r0, #2
 8001416:	f006 fc95 	bl	8007d44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <SystemClock_Config+0xd8>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <SystemClock_Config+0xd8>)
 8001424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <SystemClock_Config+0xd8>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001436:	bf00      	nop
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <SystemClock_Config+0xd8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001444:	d1f8      	bne.n	8001438 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800144a:	2301      	movs	r3, #1
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145a:	2304      	movs	r3, #4
 800145c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800145e:	230c      	movs	r3, #12
 8001460:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001466:	2304      	movs	r3, #4
 8001468:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146a:	2302      	movs	r3, #2
 800146c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800146e:	230c      	movs	r3, #12
 8001470:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001472:	2300      	movs	r3, #0
 8001474:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147e:	4618      	mov	r0, r3
 8001480:	f006 fc9a 	bl	8007db8 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800148a:	f000 f8b5 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	233f      	movs	r3, #63	@ 0x3f
 8001490:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2303      	movs	r3, #3
 8001494:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800149e:	2340      	movs	r3, #64	@ 0x40
 80014a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014ac:	2340      	movs	r3, #64	@ 0x40
 80014ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2102      	movs	r1, #2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f007 f859 	bl	800856c <HAL_RCC_ClockConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014c0:	f000 f89a 	bl	80015f8 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3770      	adds	r7, #112	@ 0x70
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58024800 	.word	0x58024800

080014d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ae      	sub	sp, #184	@ 0xb8
 80014d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	22b8      	movs	r2, #184	@ 0xb8
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00d f9bb 	bl	800e858 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 13;
 80014f2:	230d      	movs	r3, #13
 80014f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80014f6:	2303      	movs	r3, #3
 80014f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001502:	23c0      	movs	r3, #192	@ 0xc0
 8001504:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 800150a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fbb3 	bl	8008c84 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001524:	f000 f868 	bl	80015f8 <Error_Handler>
  }
}
 8001528:	bf00      	nop
 800152a:	37b8      	adds	r7, #184	@ 0xb8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_TIM_PeriodElapsedCallback>:
	// memset(rx_buff,0 , sizeof(rx_buff));
	// strcpy(rx_buff, tx_buff);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	char sdir[5];
	char scount[10];

	int Direction = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
	int CaptureNumber = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]

	if (htim->Instance == TIM6) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d13e      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0x98>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800154a:	2101      	movs	r1, #1
 800154c:	4821      	ldr	r0, [pc, #132]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800154e:	f005 ff78 	bl	8007442 <HAL_GPIO_TogglePin>

		Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b10      	cmp	r3, #16
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
		CaptureNumber = (short) __HAL_TIM_GET_COUNTER(&htim4);
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	b21b      	sxth	r3, r3
 8001570:	623b      	str	r3, [r7, #32]
		__HAL_TIM_GET_COUNTER(&htim4) = 0;
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24

		HD44780_Clear();
 800157a:	f7ff fcdb 	bl	8000f34 <HD44780_Clear>

		itoa(Direction, sdir, 10);
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	220a      	movs	r2, #10
 8001584:	4619      	mov	r1, r3
 8001586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001588:	f00c faf4 	bl	800db74 <itoa>
		itoa(CaptureNumber, scount, 10);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	220a      	movs	r2, #10
 8001592:	4619      	mov	r1, r3
 8001594:	6a38      	ldr	r0, [r7, #32]
 8001596:	f00c faed 	bl	800db74 <itoa>

		HD44780_SetCursor(0, 0);
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fcdf 	bl	8000f60 <HD44780_SetCursor>

		if (Direction == 0)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x80>
			HD44780_PrintStr("Positive!");
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015aa:	f7ff fd99 	bl	80010e0 <HD44780_PrintStr>
 80015ae:	e002      	b.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x86>
		else
			HD44780_PrintStr("Negative!");
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015b2:	f7ff fd95 	bl	80010e0 <HD44780_PrintStr>

		HD44780_SetCursor(0, 1);
 80015b6:	2101      	movs	r1, #1
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fcd1 	bl	8000f60 <HD44780_SetCursor>
		HD44780_PrintStr(scount);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fd8c 	bl	80010e0 <HD44780_PrintStr>

		// HAL_ADC_Start_DMA(&hadc2, (uint32_t*) voltage, 2);
	}
}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	@ 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40001000 	.word	0x40001000
 80015d4:	58020400 	.word	0x58020400
 80015d8:	240003c8 	.word	0x240003c8
 80015dc:	080104fc 	.word	0x080104fc
 80015e0:	08010508 	.word	0x08010508

080015e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
		//HAL_ADC_Start_DMA(&hadc2, (uint32_t *)voltage, 2);
//		printf("Voltage[0]: %d\n", (int) voltage[0]);
//		printf("Voltage[1]: %d\n", (int) voltage[1]);
	}

}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_MspInit+0x30>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001610:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_MspInit+0x30>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_MspInit+0x30>)
 800161c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	58024400 	.word	0x58024400

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 fbcf 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA1_Stream0_IRQHandler+0x10>)
 800169e:	f004 f9fd 	bl	8005a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240002e4 	.word	0x240002e4

080016ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <ADC_IRQHandler+0x14>)
 80016b2:	f001 f9f7 	bl	8002aa4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <ADC_IRQHandler+0x18>)
 80016b8:	f001 f9f4 	bl	8002aa4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000204 	.word	0x24000204
 80016c4:	24000274 	.word	0x24000274

080016c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <USART3_IRQHandler+0x10>)
 80016ce:	f00a fc71 	bl	800bfb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000460 	.word	0x24000460

080016dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <TIM6_DAC_IRQHandler+0x10>)
 80016e2:	f00a f8c7 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	24000414 	.word	0x24000414

080016f0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_kill>:

int _kill(int pid, int sig)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001718:	f00d f8f0 	bl	800e8fc <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	2216      	movs	r2, #22
 8001720:	601a      	str	r2, [r3, #0]
  return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_exit>:

void _exit (int status)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001736:	f04f 31ff 	mov.w	r1, #4294967295
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffe7 	bl	800170e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <_exit+0x12>

08001744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
  }

  return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e009      	b.n	80017a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd91 	bl	80012c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf1      	blt.n	8001790 <_write+0x12>
  }
  return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017de:	605a      	str	r2, [r3, #4]
  return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f00d f854 	bl	800e8fc <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	24050000 	.word	0x24050000
 8001880:	00000400 	.word	0x00000400
 8001884:	240003c4 	.word	0x240003c4
 8001888:	24000648 	.word	0x24000648

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <SystemInit+0xd0>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a31      	ldr	r2, [pc, #196]	@ (800195c <SystemInit+0xd0>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <SystemInit+0xd4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d807      	bhi.n	80018bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <SystemInit+0xd4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 030f 	bic.w	r3, r3, #15
 80018b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001960 <SystemInit+0xd4>)
 80018b6:	f043 0307 	orr.w	r3, r3, #7
 80018ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <SystemInit+0xd8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <SystemInit+0xd8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018c8:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <SystemInit+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ce:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <SystemInit+0xd8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4924      	ldr	r1, [pc, #144]	@ (8001964 <SystemInit+0xd8>)
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <SystemInit+0xdc>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <SystemInit+0xd4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <SystemInit+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 030f 	bic.w	r3, r3, #15
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <SystemInit+0xd4>)
 80018f0:	f043 0307 	orr.w	r3, r3, #7
 80018f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <SystemInit+0xd8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <SystemInit+0xd8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <SystemInit+0xd8>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <SystemInit+0xd8>)
 800190a:	4a18      	ldr	r2, [pc, #96]	@ (800196c <SystemInit+0xe0>)
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <SystemInit+0xd8>)
 8001910:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <SystemInit+0xe4>)
 8001912:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <SystemInit+0xd8>)
 8001916:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <SystemInit+0xe8>)
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <SystemInit+0xd8>)
 800191c:	2200      	movs	r2, #0
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <SystemInit+0xd8>)
 8001922:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <SystemInit+0xe8>)
 8001924:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <SystemInit+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <SystemInit+0xd8>)
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <SystemInit+0xe8>)
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <SystemInit+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <SystemInit+0xd8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <SystemInit+0xd8>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001942:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <SystemInit+0xd8>)
 8001946:	2200      	movs	r2, #0
 8001948:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <SystemInit+0xec>)
 800194c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001950:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	52002000 	.word	0x52002000
 8001964:	58024400 	.word	0x58024400
 8001968:	eaf6ed7f 	.word	0xeaf6ed7f
 800196c:	02020200 	.word	0x02020200
 8001970:	01ff0000 	.word	0x01ff0000
 8001974:	01010280 	.word	0x01010280
 8001978:	52004000 	.word	0x52004000

0800197c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	@ 0x30
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	2224      	movs	r2, #36	@ 0x24
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f00c ff64 	bl	800e858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <MX_TIM4_Init+0xa8>)
 800199e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019c0:	2303      	movs	r3, #3
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019d8:	2301      	movs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 80019ec:	f009 fe0e 	bl	800b60c <HAL_TIM_Encoder_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019f6:	f7ff fdff 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	@ (8001a20 <MX_TIM4_Init+0xa4>)
 8001a08:	f00a f93c 	bl	800bc84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a12:	f7ff fdf1 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	@ 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	240003c8 	.word	0x240003c8
 8001a24:	40000800 	.word	0x40000800

08001a28 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a3a:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <MX_TIM6_Init+0x6c>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19200-1;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a40:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8001a44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a4e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a5c:	f009 fcf8 	bl	800b450 <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a66:	f7ff fdc7 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <MX_TIM6_Init+0x68>)
 8001a78:	f00a f904 	bl	800bc84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001a82:	f7ff fdb9 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	24000414 	.word	0x24000414
 8001a94:	40001000 	.word	0x40001000

08001a98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12e      	bne.n	8001b18 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ade:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001af6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b14:	f005 fad4 	bl	80070c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40000800 	.word	0x40000800
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58020c00 	.word	0x58020c00

08001b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d116      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b44:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_TIM_Base_MspInit+0x4c>)
 8001b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2036      	movs	r0, #54	@ 0x36
 8001b62:	f002 fc40 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b66:	2036      	movs	r0, #54	@ 0x36
 8001b68:	f002 fc57 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40001000 	.word	0x40001000
 8001b78:	58024400 	.word	0x58024400

08001b7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <MX_USART3_UART_Init+0x94>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bc4:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bc6:	f00a f917 	bl	800bdf8 <HAL_UART_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f7ff fd12 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bd8:	f00b feea 	bl	800d9b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f7ff fd09 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bea:	f00b ff1f 	bl	800da2c <HAL_UARTEx_SetRxFifoThreshold>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f7ff fd00 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_USART3_UART_Init+0x90>)
 8001bfa:	f00b fea0 	bl	800d93e <HAL_UARTEx_DisableFifoMode>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c04:	f7ff fcf8 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	24000460 	.word	0x24000460
 8001c10:	40004800 	.word	0x40004800

08001c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0b8      	sub	sp, #224	@ 0xe0
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	22b8      	movs	r2, #184	@ 0xb8
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00c fe0f 	bl	800e858 <memset>
  if(uartHandle->Instance==USART3)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cec <HAL_UART_MspInit+0xd8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d14e      	bne.n	8001ce2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c44:	f04f 0202 	mov.w	r2, #2
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 f812 	bl	8008c84 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c66:	f7ff fcc7 	bl	80015f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c70:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001caa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4809      	ldr	r0, [pc, #36]	@ (8001cf4 <HAL_UART_MspInit+0xe0>)
 8001cce:	f005 f9f7 	bl	80070c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2027      	movs	r0, #39	@ 0x27
 8001cd8:	f002 fb85 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cdc:	2027      	movs	r0, #39	@ 0x27
 8001cde:	f002 fb9c 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	37e0      	adds	r7, #224	@ 0xe0
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40004800 	.word	0x40004800
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58020c00 	.word	0x58020c00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cfc:	f7ff fdc6 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f00c fdef 	bl	800e908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff fadb 	bl	80012e4 <main>
  bx  lr
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d38:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001d3c:	080108f8 	.word	0x080108f8
  ldr r2, =_sbss
 8001d40:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001d44:	24000644 	.word	0x24000644

08001d48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC3_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d52:	2003      	movs	r0, #3
 8001d54:	f002 fb3c 	bl	80043d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d58:	f006 fdbe 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_Init+0x68>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	4913      	ldr	r1, [pc, #76]	@ (8001db8 <HAL_Init+0x6c>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_Init+0x68>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_Init+0x6c>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_Init+0x70>)
 8001d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d90:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <HAL_Init+0x74>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f814 	bl	8001dc4 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e002      	b.n	8001dac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001da6:	f7ff fc2d 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	58024400 	.word	0x58024400
 8001db8:	08010514 	.word	0x08010514
 8001dbc:	24000014 	.word	0x24000014
 8001dc0:	24000010 	.word	0x24000010

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dcc:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_InitTick+0x60>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e021      	b.n	8001e1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_InitTick+0x64>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_InitTick+0x60>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 fb21 	bl	8004436 <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f002 faeb 	bl	80043e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <HAL_InitTick+0x68>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2400001c 	.word	0x2400001c
 8001e28:	24000010 	.word	0x24000010
 8001e2c:	24000018 	.word	0x24000018

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2400001c 	.word	0x2400001c
 8001e54:	240004f4 	.word	0x240004f4

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	240004f4 	.word	0x240004f4

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2400001c 	.word	0x2400001c

08001eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	@ 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <LL_ADC_SetOffset+0x60>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10b      	bne.n	8001f5c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f5a:	e00b      	b.n	8001f74 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	58026000 	.word	0x58026000

08001f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3360      	adds	r3, #96	@ 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3360      	adds	r3, #96	@ 0x60
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]
  }
}
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	58026000 	.word	0x58026000

08002028 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a0c      	ldr	r2, [pc, #48]	@ (8002068 <LL_ADC_SetOffsetSaturation+0x40>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10e      	bne.n	800205a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3360      	adds	r3, #96	@ 0x60
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	58026000 	.word	0x58026000

0800206c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <LL_ADC_SetOffsetSign+0x40>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10e      	bne.n	800209e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3360      	adds	r3, #96	@ 0x60
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	431a      	orrs	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	58026000 	.word	0x58026000

080020b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3360      	adds	r3, #96	@ 0x60
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <LL_ADC_SetOffsetState+0x50>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80020e2:	e007      	b.n	80020f4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	58026000 	.word	0x58026000

08002104 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800212a:	b480      	push	{r7}
 800212c:	b087      	sub	sp, #28
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3330      	adds	r3, #48	@ 0x30
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	4413      	add	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	211f      	movs	r1, #31
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	401a      	ands	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 011f 	and.w	r1, r3, #31
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	431a      	orrs	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f023 0203 	bic.w	r2, r3, #3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d107      	bne.n	80021ea <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60da      	str	r2, [r3, #12]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	58026000 	.word	0x58026000

080021fc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002208:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002222:	b480      	push	{r7}
 8002224:	b087      	sub	sp, #28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3314      	adds	r3, #20
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0e5b      	lsrs	r3, r3, #25
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	0d1b      	lsrs	r3, r3, #20
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2107      	movs	r1, #7
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0d1b      	lsrs	r3, r3, #20
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	431a      	orrs	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d115      	bne.n	80022b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0318 	and.w	r3, r3, #24
 80022a2:	4914      	ldr	r1, [pc, #80]	@ (80022f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	400b      	ands	r3, r1
 80022aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80022b6:	e014      	b.n	80022e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0318 	and.w	r3, r3, #24
 80022ce:	4909      	ldr	r1, [pc, #36]	@ (80022f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80022d0:	40d9      	lsrs	r1, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	400b      	ands	r3, r1
 80022d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022da:	431a      	orrs	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	58026000 	.word	0x58026000
 80022f4:	000fffff 	.word	0x000fffff

080022f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <LL_ADC_DisableDeepPowerDown+0x20>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6093      	str	r3, [r2, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	5fffffc0 	.word	0x5fffffc0

08002354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002368:	d101      	bne.n	800236e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800238a:	4013      	ands	r3, r2
 800238c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	6fffffc0 	.word	0x6fffffc0

080023a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b8:	d101      	bne.n	80023be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <LL_ADC_Enable+0x24>)
 80023da:	4013      	ands	r3, r2
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	7fffffc0 	.word	0x7fffffc0

080023f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <LL_ADC_Disable+0x24>)
 8002402:	4013      	ands	r3, r2
 8002404:	f043 0202 	orr.w	r2, r3, #2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	7fffffc0 	.word	0x7fffffc0

0800241c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <LL_ADC_IsEnabled+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_IsEnabled+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d101      	bne.n	800245a <LL_ADC_IsDisableOngoing+0x18>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsDisableOngoing+0x1a>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <LL_ADC_REG_StartConversion+0x24>)
 8002476:	4013      	ands	r3, r2
 8002478:	f043 0204 	orr.w	r2, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	7fffffc0 	.word	0x7fffffc0

08002490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d101      	bne.n	80024ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1ee      	b.n	80028d4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe f9c7 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff19 	bl	8002354 <LL_ADC_IsDeepPowerDownEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff feff 	bl	8002330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff34 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff18 	bl	800237c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b8e      	ldr	r3, [pc, #568]	@ (8002788 <HAL_ADC_Init+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a8e      	ldr	r2, [pc, #568]	@ (800278c <HAL_ADC_Init+0x2b0>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800255e:	e002      	b.n	8002566 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3b01      	subs	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff17 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff77 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 80025a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 8188 	bne.w	80028c2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 8184 	bne.w	80028c2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff24 	bl	800241c <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d136      	bne.n	8002648 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6c      	ldr	r2, [pc, #432]	@ (8002790 <HAL_ADC_Init+0x2b4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_Init+0x112>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002794 <HAL_ADC_Init+0x2b8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_ADC_Init+0x130>
 80025ee:	4868      	ldr	r0, [pc, #416]	@ (8002790 <HAL_ADC_Init+0x2b4>)
 80025f0:	f7ff ff14 	bl	800241c <LL_ADC_IsEnabled>
 80025f4:	4604      	mov	r4, r0
 80025f6:	4867      	ldr	r0, [pc, #412]	@ (8002794 <HAL_ADC_Init+0x2b8>)
 80025f8:	f7ff ff10 	bl	800241c <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4323      	orrs	r3, r4
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e008      	b.n	800261e <HAL_ADC_Init+0x142>
 800260c:	4862      	ldr	r0, [pc, #392]	@ (8002798 <HAL_ADC_Init+0x2bc>)
 800260e:	f7ff ff05 	bl	800241c <LL_ADC_IsEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5a      	ldr	r2, [pc, #360]	@ (8002790 <HAL_ADC_Init+0x2b4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_ADC_Init+0x15a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_ADC_Init+0x2b8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_ADC_Init+0x15e>
 8002636:	4a59      	ldr	r2, [pc, #356]	@ (800279c <HAL_ADC_Init+0x2c0>)
 8002638:	e000      	b.n	800263c <HAL_ADC_Init+0x160>
 800263a:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <HAL_ADC_Init+0x2c4>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f7ff fc38 	bl	8001eb8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_ADC_Init+0x2bc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d129      	bne.n	80026a6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7e5b      	ldrb	r3, [r3, #25]
 8002656:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800265c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002662:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d013      	beq.n	8002694 <HAL_ADC_Init+0x1b8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d00d      	beq.n	8002690 <HAL_ADC_Init+0x1b4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b1c      	cmp	r3, #28
 800267a:	d007      	beq.n	800268c <HAL_ADC_Init+0x1b0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b18      	cmp	r3, #24
 8002682:	d101      	bne.n	8002688 <HAL_ADC_Init+0x1ac>
 8002684:	2318      	movs	r3, #24
 8002686:	e006      	b.n	8002696 <HAL_ADC_Init+0x1ba>
 8002688:	2300      	movs	r3, #0
 800268a:	e004      	b.n	8002696 <HAL_ADC_Init+0x1ba>
 800268c:	2310      	movs	r3, #16
 800268e:	e002      	b.n	8002696 <HAL_ADC_Init+0x1ba>
 8002690:	2308      	movs	r3, #8
 8002692:	e000      	b.n	8002696 <HAL_ADC_Init+0x1ba>
 8002694:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002696:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e00e      	b.n	80026c4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7e5b      	ldrb	r3, [r3, #25]
 80026aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	3b01      	subs	r3, #1
 80026d4:	045b      	lsls	r3, r3, #17
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_ADC_Init+0x2bc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d115      	bne.n	800272e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <HAL_ADC_Init+0x2c8>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	e009      	b.n	8002742 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <HAL_ADC_Init+0x2cc>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fea2 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 800274c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff feaf 	bl	80024b6 <LL_ADC_INJ_IsConversionOngoing>
 8002758:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 808e 	bne.w	800287e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 808a 	bne.w	800287e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <HAL_ADC_Init+0x2bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d11b      	bne.n	80027ac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
 8002778:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002780:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	e018      	b.n	80027ba <HAL_ADC_Init+0x2de>
 8002788:	24000010 	.word	0x24000010
 800278c:	053e2d63 	.word	0x053e2d63
 8002790:	40022000 	.word	0x40022000
 8002794:	40022100 	.word	0x40022100
 8002798:	58026000 	.word	0x58026000
 800279c:	40022300 	.word	0x40022300
 80027a0:	58026300 	.word	0x58026300
 80027a4:	fff04007 	.word	0xfff04007
 80027a8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7e1b      	ldrb	r3, [r3, #24]
 80027b0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4b46      	ldr	r3, [pc, #280]	@ (80028dc <HAL_ADC_Init+0x400>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d137      	bne.n	8002848 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3f      	ldr	r2, [pc, #252]	@ (80028e0 <HAL_ADC_Init+0x404>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d116      	bne.n	8002816 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_ADC_Init+0x408>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002806:	430a      	orrs	r2, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	611a      	str	r2, [r3, #16]
 8002814:	e020      	b.n	8002858 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b32      	ldr	r3, [pc, #200]	@ (80028e8 <HAL_ADC_Init+0x40c>)
 800281e:	4013      	ands	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002824:	3a01      	subs	r2, #1
 8002826:	0411      	lsls	r1, r2, #16
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002838:	430a      	orrs	r2, r1
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	e007      	b.n	8002858 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <HAL_ADC_Init+0x404>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d002      	beq.n	800287e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f001 fa19 	bl	8003cb0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10c      	bne.n	80028a0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	f023 010f 	bic.w	r1, r3, #15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
 800289e:	e007      	b.n	80028b0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020f 	bic.w	r2, r2, #15
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b4:	f023 0303 	bic.w	r3, r3, #3
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60
 80028c0:	e007      	b.n	80028d2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3724      	adds	r7, #36	@ 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	ffffbffc 	.word	0xffffbffc
 80028e0:	58026000 	.word	0x58026000
 80028e4:	fc00f81f 	.word	0xfc00f81f
 80028e8:	fc00f81e 	.word	0xfc00f81e

080028ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a60      	ldr	r2, [pc, #384]	@ (8002a80 <HAL_ADC_Start_DMA+0x194>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_ADC_Start_DMA+0x20>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5f      	ldr	r2, [pc, #380]	@ (8002a84 <HAL_ADC_Start_DMA+0x198>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_ADC_Start_DMA+0x24>
 800290c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a88 <HAL_ADC_Start_DMA+0x19c>)
 800290e:	e000      	b.n	8002912 <HAL_ADC_Start_DMA+0x26>
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <HAL_ADC_Start_DMA+0x1a0>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fcf0 	bl	80022f8 <LL_ADC_GetMultimode>
 8002918:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fdb6 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80a2 	bne.w	8002a70 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_ADC_Start_DMA+0x4e>
 8002936:	2302      	movs	r3, #2
 8002938:	e09d      	b.n	8002a76 <HAL_ADC_Start_DMA+0x18a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d003      	beq.n	8002956 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b09      	cmp	r3, #9
 8002952:	f040 8086 	bne.w	8002a62 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f001 f82c 	bl	80039b4 <ADC_Enable>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d178      	bne.n	8002a58 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <HAL_ADC_Start_DMA+0x1a4>)
 800296c:	4013      	ands	r3, r2
 800296e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a42      	ldr	r2, [pc, #264]	@ (8002a84 <HAL_ADC_Start_DMA+0x198>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d002      	beq.n	8002986 <HAL_ADC_Start_DMA+0x9a>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e000      	b.n	8002988 <HAL_ADC_Start_DMA+0x9c>
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_ADC_Start_DMA+0x194>)
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4293      	cmp	r3, r2
 800298e:	d002      	beq.n	8002996 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b2:	f023 0206 	bic.w	r2, r3, #6
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	665a      	str	r2, [r3, #100]	@ 0x64
 80029ba:	e002      	b.n	80029c2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	4a33      	ldr	r2, [pc, #204]	@ (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 80029c8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	4a32      	ldr	r2, [pc, #200]	@ (8002a98 <HAL_ADC_Start_DMA+0x1ac>)
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a31      	ldr	r2, [pc, #196]	@ (8002a9c <HAL_ADC_Start_DMA+0x1b0>)
 80029d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	221c      	movs	r2, #28
 80029e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <HAL_ADC_Start_DMA+0x1b4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10f      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7ff fbd8 	bl	80021c8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fbc3 	bl	80021a8 <LL_ADC_EnableDMAReq>
 8002a22:	e007      	b.n	8002a34 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f7ff fba7 	bl	8002182 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3340      	adds	r3, #64	@ 0x40
 8002a3e:	4619      	mov	r1, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f002 f85c 	bl	8004b00 <HAL_DMA_Start_IT>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fd09 	bl	8002468 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a56:	e00d      	b.n	8002a74 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8002a60:	e008      	b.n	8002a74 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002a6e:	e001      	b.n	8002a74 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
 8002a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40022100 	.word	0x40022100
 8002a88:	40022300 	.word	0x40022300
 8002a8c:	58026300 	.word	0x58026300
 8002a90:	fffff0fe 	.word	0xfffff0fe
 8002a94:	08003b87 	.word	0x08003b87
 8002a98:	08003c5f 	.word	0x08003c5f
 8002a9c:	08003c7b 	.word	0x08003c7b
 8002aa0:	58026000 	.word	0x58026000

08002aa4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a87      	ldr	r2, [pc, #540]	@ (8002ce4 <HAL_ADC_IRQHandler+0x240>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x30>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a86      	ldr	r2, [pc, #536]	@ (8002ce8 <HAL_ADC_IRQHandler+0x244>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x34>
 8002ad4:	4b85      	ldr	r3, [pc, #532]	@ (8002cec <HAL_ADC_IRQHandler+0x248>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADC_IRQHandler+0x36>
 8002ad8:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_ADC_IRQHandler+0x24c>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fc0c 	bl	80022f8 <LL_ADC_GetMultimode>
 8002ae0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d017      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x78>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f001 faa2 	bl	8004058 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x8c>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8083 	beq.w	8002c42 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07d      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff face 	bl	8002104 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d062      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce8 <HAL_ADC_IRQHandler+0x244>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d002      	beq.n	8002b7e <HAL_ADC_IRQHandler+0xda>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	e000      	b.n	8002b80 <HAL_ADC_IRQHandler+0xdc>
 8002b7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_ADC_IRQHandler+0x240>)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d008      	beq.n	8002b9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d002      	beq.n	8002b9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	d104      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	e00c      	b.n	8002bbe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce8 <HAL_ADC_IRQHandler+0x244>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d002      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x110>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_IRQHandler+0x112>
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_ADC_IRQHandler+0x240>)
 8002bb6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d135      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d12e      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fc58 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11a      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020c 	bic.w	r2, r2, #12
 8002bf4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d112      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c1a:	e00b      	b.n	8002c34 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe fcd5 	bl	80015e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	220c      	movs	r2, #12
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_ADC_IRQHandler+0x1b2>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a0 	beq.w	8002da2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 809a 	beq.w	8002da2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fab6 	bl	80021fc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c90:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fa34 	bl	8002104 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c9c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a11      	ldr	r2, [pc, #68]	@ (8002ce8 <HAL_ADC_IRQHandler+0x244>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d002      	beq.n	8002cae <HAL_ADC_IRQHandler+0x20a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_IRQHandler+0x20c>
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <HAL_ADC_IRQHandler+0x240>)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d008      	beq.n	8002cca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d002      	beq.n	8002cca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	d104      	bne.n	8002cd4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	e014      	b.n	8002cfe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a03      	ldr	r2, [pc, #12]	@ (8002ce8 <HAL_ADC_IRQHandler+0x244>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x250>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e008      	b.n	8002cf6 <HAL_ADC_IRQHandler+0x252>
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40022100 	.word	0x40022100
 8002cec:	40022300 	.word	0x40022300
 8002cf0:	58026300 	.word	0x58026300
 8002cf4:	4b84      	ldr	r3, [pc, #528]	@ (8002f08 <HAL_ADC_IRQHandler+0x464>)
 8002cf6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d047      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x27a>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d03f      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d13a      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d133      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12e      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fbbb 	bl	80024b6 <LL_ADC_INJ_IsConversionOngoing>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11a      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d54:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d112      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d7a:	e00b      	b.n	8002d94 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f001 f937 	bl	8004008 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2260      	movs	r2, #96	@ 0x60
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0x32c>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8b2 	bl	8002f2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2280      	movs	r2, #128	@ 0x80
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x35c>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f91d 	bl	8004030 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <HAL_ADC_IRQHandler+0x38c>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 f90f 	bl	8004044 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d043      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x41e>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03e      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e021      	b.n	8002e96 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_ADC_IRQHandler+0x464>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x3c8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <HAL_ADC_IRQHandler+0x468>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_IRQHandler+0x3cc>
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_ADC_IRQHandler+0x46c>)
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_IRQHandler+0x3ce>
 8002e70:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <HAL_ADC_IRQHandler+0x470>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fa4e 	bl	8002314 <LL_ADC_GetMultiDMATransfer>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e82:	e008      	b.n	8002e96 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10e      	bne.n	8002eba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f843 	bl	8002f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d018      	beq.n	8002efe <HAL_ADC_IRQHandler+0x45a>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eda:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f001 f88f 	bl	800401c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	@ 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40022100 	.word	0x40022100
 8002f10:	40022300 	.word	0x40022300
 8002f14:	58026300 	.word	0x58026300

08002f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b0b9      	sub	sp, #228	@ 0xe4
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f6e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4aab      	ldr	r2, [pc, #684]	@ (8003224 <HAL_ADC_ConfigChannel+0x2d0>)
 8002f76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x34>
 8002f82:	2302      	movs	r3, #2
 8002f84:	f000 bcfe 	b.w	8003984 <HAL_ADC_ConfigChannel+0xa30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fa7b 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 84e2 	bne.w	8003966 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db38      	blt.n	800301c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a9e      	ldr	r2, [pc, #632]	@ (8003228 <HAL_ADC_ConfigChannel+0x2d4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d033      	beq.n	800301c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7e>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2201      	movs	r2, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	e01d      	b.n	800300e <HAL_ADC_ConfigChannel+0xba>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e004      	b.n	8003004 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69d1      	ldr	r1, [r2, #28]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff f87e 	bl	800212a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fa2c 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8003038:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fa38 	bl	80024b6 <LL_ADC_INJ_IsConversionOngoing>
 8003046:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 8270 	bne.w	8003534 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 826b 	bne.w	8003534 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	461a      	mov	r2, r3
 800306c:	f7ff f8d9 	bl	8002222 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6c      	ldr	r2, [pc, #432]	@ (8003228 <HAL_ADC_ConfigChannel+0x2d4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10d      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	08db      	lsrs	r3, r3, #3
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003094:	e032      	b.n	80030fc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003096:	4b65      	ldr	r3, [pc, #404]	@ (800322c <HAL_ADC_ConfigChannel+0x2d8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800309e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030a2:	d10b      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x168>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	e01d      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1a4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x18e>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	e00a      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1a4>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d048      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6919      	ldr	r1, [r3, #16]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003114:	f7fe ff04 	bl	8001f20 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a42      	ldr	r2, [pc, #264]	@ (8003228 <HAL_ADC_ConfigChannel+0x2d4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d119      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	461a      	mov	r2, r3
 8003130:	f7fe ff9c 	bl	800206c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6919      	ldr	r1, [r3, #16]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1f8>
 8003146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314a:	e000      	b.n	800314e <HAL_ADC_ConfigChannel+0x1fa>
 800314c:	2300      	movs	r3, #0
 800314e:	461a      	mov	r2, r3
 8003150:	f7fe ff6a 	bl	8002028 <LL_ADC_SetOffsetSaturation>
 8003154:	e1ee      	b.n	8003534 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_ADC_ConfigChannel+0x21a>
 8003168:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800316c:	e000      	b.n	8003170 <HAL_ADC_ConfigChannel+0x21c>
 800316e:	2300      	movs	r3, #0
 8003170:	461a      	mov	r2, r3
 8003172:	f7fe ff37 	bl	8001fe4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	7e1b      	ldrb	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_ADC_ConfigChannel+0x238>
 8003186:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800318a:	e000      	b.n	800318e <HAL_ADC_ConfigChannel+0x23a>
 800318c:	2300      	movs	r3, #0
 800318e:	461a      	mov	r2, r3
 8003190:	f7fe ff0e 	bl	8001fb0 <LL_ADC_SetDataRightShift>
 8003194:	e1ce      	b.n	8003534 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <HAL_ADC_ConfigChannel+0x2d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	f040 8181 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe feeb 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x27a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fee0 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	e01e      	b.n	800320c <HAL_ADC_ConfigChannel+0x2b8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fed5 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80031ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80031f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e004      	b.n	800320a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x2dc>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	e01e      	b.n	8003262 <HAL_ADC_ConfigChannel+0x30e>
 8003224:	47ff0000 	.word	0x47ff0000
 8003228:	58026000 	.word	0x58026000
 800322c:	5c001000 	.word	0x5c001000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800324c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	e004      	b.n	8003262 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	429a      	cmp	r2, r3
 8003264:	d106      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff1e 	bl	80020b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fe82 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x34c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe77 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	e01e      	b.n	80032de <HAL_ADC_ConfigChannel+0x38a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fe6c 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80032be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80032c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80032d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x3a2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0e9b      	lsrs	r3, r3, #26
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	e018      	b.n	8003328 <HAL_ADC_ConfigChannel+0x3d4>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800330a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800330e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003312:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e004      	b.n	8003328 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800331e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe febb 	bl	80020b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fe1f 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x412>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fe14 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	e01e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x450>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fe09 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800338c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x468>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e014      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x492>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80033ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80033d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e004      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80033dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d106      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fe5c 	bl	80020b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2103      	movs	r1, #3
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fdc0 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003404:	4603      	mov	r3, r0
 8003406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x4d0>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2103      	movs	r1, #3
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe fdb5 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 021f 	and.w	r2, r3, #31
 8003422:	e017      	b.n	8003454 <HAL_ADC_ConfigChannel+0x500>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2103      	movs	r1, #3
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fdaa 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800343c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e003      	b.n	8003452 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800344a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_ADC_ConfigChannel+0x518>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0e9b      	lsrs	r3, r3, #26
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	e011      	b.n	8003490 <HAL_ADC_ConfigChannel+0x53c>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800347a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800347e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	429a      	cmp	r2, r3
 8003492:	d14f      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	2103      	movs	r1, #3
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fe07 	bl	80020b0 <LL_ADC_SetOffsetState>
 80034a2:	e047      	b.n	8003534 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	069b      	lsls	r3, r3, #26
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d107      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800350e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	069b      	lsls	r3, r3, #26
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003532:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe ff6f 	bl	800241c <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 8219 	bne.w	8003978 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f7fe fe90 	bl	8002278 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4aa1      	ldr	r2, [pc, #644]	@ (80037e4 <HAL_ADC_ConfigChannel+0x890>)
 800355e:	4293      	cmp	r3, r2
 8003560:	f040 812e 	bne.w	80037c0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_ADC_ConfigChannel+0x638>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2b09      	cmp	r3, #9
 8003582:	bf94      	ite	ls
 8003584:	2301      	movls	r3, #1
 8003586:	2300      	movhi	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e019      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x66c>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800359a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800359e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80035a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	bf94      	ite	ls
 80035ba:	2301      	movls	r3, #1
 80035bc:	2300      	movhi	r3, #0
 80035be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d079      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x68c>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	3301      	adds	r3, #1
 80035d8:	069b      	lsls	r3, r3, #26
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035de:	e015      	b.n	800360c <HAL_ADC_ConfigChannel+0x6b8>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80035fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_ADC_ConfigChannel+0x6d8>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	e017      	b.n	800365c <HAL_ADC_ConfigChannel+0x708>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800363e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e003      	b.n	8003650 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	ea42 0103 	orr.w	r1, r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x72e>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	e018      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x760>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b4:	430b      	orrs	r3, r1
 80036b6:	e07e      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x780>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	3301      	adds	r3, #1
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036d2:	e015      	b.n	8003700 <HAL_ADC_ConfigChannel+0x7ac>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e003      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	069b      	lsls	r3, r3, #26
 80036fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x7cc>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	e017      	b.n	8003750 <HAL_ADC_ConfigChannel+0x7fc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	61bb      	str	r3, [r7, #24]
  return result;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e003      	b.n	8003744 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_ADC_ConfigChannel+0x828>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	3301      	adds	r3, #1
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	3b1e      	subs	r3, #30
 8003774:	051b      	lsls	r3, r3, #20
 8003776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800377a:	e01b      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x860>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	60fb      	str	r3, [r7, #12]
  return result;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	e003      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f003 021f 	and.w	r2, r3, #31
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	3b1e      	subs	r3, #30
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b4:	430b      	orrs	r3, r1
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f7fe fd31 	bl	8002222 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f280 80d7 	bge.w	8003978 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a06      	ldr	r2, [pc, #24]	@ (80037e8 <HAL_ADC_ConfigChannel+0x894>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_ADC_ConfigChannel+0x88a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_ADC_ConfigChannel+0x898>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x8a0>
 80037de:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <HAL_ADC_ConfigChannel+0x89c>)
 80037e0:	e009      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x8a2>
 80037e2:	bf00      	nop
 80037e4:	47ff0000 	.word	0x47ff0000
 80037e8:	40022000 	.word	0x40022000
 80037ec:	40022100 	.word	0x40022100
 80037f0:	40022300 	.word	0x40022300
 80037f4:	4b65      	ldr	r3, [pc, #404]	@ (800398c <HAL_ADC_ConfigChannel+0xa38>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fb84 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 80037fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a62      	ldr	r2, [pc, #392]	@ (8003990 <HAL_ADC_ConfigChannel+0xa3c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x8c0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a61      	ldr	r2, [pc, #388]	@ (8003994 <HAL_ADC_ConfigChannel+0xa40>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10e      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x8de>
 8003814:	485e      	ldr	r0, [pc, #376]	@ (8003990 <HAL_ADC_ConfigChannel+0xa3c>)
 8003816:	f7fe fe01 	bl	800241c <LL_ADC_IsEnabled>
 800381a:	4604      	mov	r4, r0
 800381c:	485d      	ldr	r0, [pc, #372]	@ (8003994 <HAL_ADC_ConfigChannel+0xa40>)
 800381e:	f7fe fdfd 	bl	800241c <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	4323      	orrs	r3, r4
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e008      	b.n	8003844 <HAL_ADC_ConfigChannel+0x8f0>
 8003832:	4859      	ldr	r0, [pc, #356]	@ (8003998 <HAL_ADC_ConfigChannel+0xa44>)
 8003834:	f7fe fdf2 	bl	800241c <LL_ADC_IsEnabled>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8084 	beq.w	8003952 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a53      	ldr	r2, [pc, #332]	@ (800399c <HAL_ADC_ConfigChannel+0xa48>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d132      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x966>
 8003854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d12c      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4c      	ldr	r2, [pc, #304]	@ (8003998 <HAL_ADC_ConfigChannel+0xa44>)
 8003866:	4293      	cmp	r3, r2
 8003868:	f040 8086 	bne.w	8003978 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a47      	ldr	r2, [pc, #284]	@ (8003990 <HAL_ADC_ConfigChannel+0xa3c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x92c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <HAL_ADC_ConfigChannel+0xa40>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x930>
 8003880:	4a47      	ldr	r2, [pc, #284]	@ (80039a0 <HAL_ADC_ConfigChannel+0xa4c>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_ConfigChannel+0x932>
 8003884:	4a41      	ldr	r2, [pc, #260]	@ (800398c <HAL_ADC_ConfigChannel+0xa38>)
 8003886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800388a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe fb24 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003896:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <HAL_ADC_ConfigChannel+0xa50>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_ADC_ConfigChannel+0xa54>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	3301      	adds	r3, #1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038aa:	e002      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b8:	e05e      	b.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3b      	ldr	r2, [pc, #236]	@ (80039ac <HAL_ADC_ConfigChannel+0xa58>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d120      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x9b2>
 80038c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11a      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a30      	ldr	r2, [pc, #192]	@ (8003998 <HAL_ADC_ConfigChannel+0xa44>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d14e      	bne.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <HAL_ADC_ConfigChannel+0xa3c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x99a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_ADC_ConfigChannel+0xa40>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x99e>
 80038ee:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <HAL_ADC_ConfigChannel+0xa4c>)
 80038f0:	e000      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x9a0>
 80038f2:	4a26      	ldr	r2, [pc, #152]	@ (800398c <HAL_ADC_ConfigChannel+0xa38>)
 80038f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f7fe faed 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003904:	e038      	b.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a29      	ldr	r2, [pc, #164]	@ (80039b0 <HAL_ADC_ConfigChannel+0xa5c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d133      	bne.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
 8003910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12d      	bne.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_ADC_ConfigChannel+0xa44>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d128      	bne.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <HAL_ADC_ConfigChannel+0xa3c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_ADC_ConfigChannel+0x9e6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <HAL_ADC_ConfigChannel+0xa40>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x9ea>
 800393a:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <HAL_ADC_ConfigChannel+0xa4c>)
 800393c:	e000      	b.n	8003940 <HAL_ADC_ConfigChannel+0x9ec>
 800393e:	4a13      	ldr	r2, [pc, #76]	@ (800398c <HAL_ADC_ConfigChannel+0xa38>)
 8003940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fac7 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
 8003950:	e012      	b.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003964:	e008      	b.n	8003978 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003980:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003984:	4618      	mov	r0, r3
 8003986:	37e4      	adds	r7, #228	@ 0xe4
 8003988:	46bd      	mov	sp, r7
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	58026300 	.word	0x58026300
 8003990:	40022000 	.word	0x40022000
 8003994:	40022100 	.word	0x40022100
 8003998:	58026000 	.word	0x58026000
 800399c:	c7520000 	.word	0xc7520000
 80039a0:	40022300 	.word	0x40022300
 80039a4:	24000010 	.word	0x24000010
 80039a8:	053e2d63 	.word	0x053e2d63
 80039ac:	c3210000 	.word	0xc3210000
 80039b0:	cb840000 	.word	0xcb840000

080039b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fd2b 	bl	800241c <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d16e      	bne.n	8003aaa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b38      	ldr	r3, [pc, #224]	@ (8003ab4 <ADC_Enable+0x100>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e05a      	b.n	8003aac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fce6 	bl	80023cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a00:	f7fe fa2a 	bl	8001e58 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab8 <ADC_Enable+0x104>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <ADC_Enable+0x66>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a29      	ldr	r2, [pc, #164]	@ (8003abc <ADC_Enable+0x108>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <ADC_Enable+0x6a>
 8003a1a:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <ADC_Enable+0x10c>)
 8003a1c:	e000      	b.n	8003a20 <ADC_Enable+0x6c>
 8003a1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <ADC_Enable+0x110>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fc69 	bl	80022f8 <LL_ADC_GetMultimode>
 8003a26:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <ADC_Enable+0x108>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d002      	beq.n	8003a38 <ADC_Enable+0x84>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	e000      	b.n	8003a3a <ADC_Enable+0x86>
 8003a38:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <ADC_Enable+0x104>)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d02c      	beq.n	8003a9c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d130      	bne.n	8003aaa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a48:	e028      	b.n	8003a9c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fce4 	bl	800241c <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fcb4 	bl	80023cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a64:	f7fe f9f8 	bl	8001e58 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d914      	bls.n	8003a9c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d00d      	beq.n	8003a9c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	f043 0210 	orr.w	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e007      	b.n	8003aac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d1cf      	bne.n	8003a4a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	8000003f 	.word	0x8000003f
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	40022100 	.word	0x40022100
 8003ac0:	40022300 	.word	0x40022300
 8003ac4:	58026300 	.word	0x58026300

08003ac8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fcb4 	bl	8002442 <LL_ADC_IsDisableOngoing>
 8003ada:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fc9b 	bl	800241c <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d047      	beq.n	8003b7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d144      	bne.n	8003b7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030d 	and.w	r3, r3, #13
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fc75 	bl	80023f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b12:	f7fe f9a1 	bl	8001e58 <HAL_GetTick>
 8003b16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b18:	e029      	b.n	8003b6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e023      	b.n	8003b7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b36:	f7fe f98f 	bl	8001e58 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d914      	bls.n	8003b6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1dc      	bne.n	8003b36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d14b      	bne.n	8003c38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d021      	beq.n	8003bfe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe faa0 	bl	8002104 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d032      	beq.n	8003c30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d12b      	bne.n	8003c30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11f      	bne.n	8003c30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bfc:	e018      	b.n	8003c30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d111      	bne.n	8003c30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7fd fcd7 	bl	80015e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c36:	e00e      	b.n	8003c56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff f97b 	bl	8002f40 <HAL_ADC_ErrorCallback>
}
 8003c4a:	e004      	b.n	8003c56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff f953 	bl	8002f18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff f94d 	bl	8002f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6c      	ldr	r2, [pc, #432]	@ (8003e70 <ADC_ConfigureBoostMode+0x1c0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <ADC_ConfigureBoostMode+0x1c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8003e74 <ADC_ConfigureBoostMode+0x1c4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <ADC_ConfigureBoostMode+0x30>
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <ADC_ConfigureBoostMode+0x1c8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e008      	b.n	8003cf2 <ADC_ConfigureBoostMode+0x42>
 8003ce0:	4b66      	ldr	r3, [pc, #408]	@ (8003e7c <ADC_ConfigureBoostMode+0x1cc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01c      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cf6:	f004 ff69 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8003cfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d04:	d010      	beq.n	8003d28 <ADC_ConfigureBoostMode+0x78>
 8003d06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d0a:	d873      	bhi.n	8003df4 <ADC_ConfigureBoostMode+0x144>
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d002      	beq.n	8003d18 <ADC_ConfigureBoostMode+0x68>
 8003d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d16:	d16d      	bne.n	8003df4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	60fb      	str	r3, [r7, #12]
        break;
 8003d26:	e068      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	60fb      	str	r3, [r7, #12]
        break;
 8003d2e:	e064      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d30:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f006 f944 	bl	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d46:	d051      	beq.n	8003dec <ADC_ConfigureBoostMode+0x13c>
 8003d48:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d4c:	d854      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d4e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d52:	d047      	beq.n	8003de4 <ADC_ConfigureBoostMode+0x134>
 8003d54:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d58:	d84e      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d5a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d5e:	d03d      	beq.n	8003ddc <ADC_ConfigureBoostMode+0x12c>
 8003d60:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d64:	d848      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d6a:	d033      	beq.n	8003dd4 <ADC_ConfigureBoostMode+0x124>
 8003d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d70:	d842      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d72:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d76:	d029      	beq.n	8003dcc <ADC_ConfigureBoostMode+0x11c>
 8003d78:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d7c:	d83c      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d82:	d01a      	beq.n	8003dba <ADC_ConfigureBoostMode+0x10a>
 8003d84:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d88:	d836      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d8a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d8e:	d014      	beq.n	8003dba <ADC_ConfigureBoostMode+0x10a>
 8003d90:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d94:	d830      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d9a:	d00e      	beq.n	8003dba <ADC_ConfigureBoostMode+0x10a>
 8003d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da0:	d82a      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003da2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003da6:	d008      	beq.n	8003dba <ADC_ConfigureBoostMode+0x10a>
 8003da8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dac:	d824      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x148>
 8003dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003db2:	d002      	beq.n	8003dba <ADC_ConfigureBoostMode+0x10a>
 8003db4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003db8:	d11e      	bne.n	8003df8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	0c9b      	lsrs	r3, r3, #18
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
        break;
 8003dca:	e016      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
        break;
 8003dd2:	e012      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	60fb      	str	r3, [r7, #12]
        break;
 8003dda:	e00e      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e00a      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e006      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e002      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
        break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003df8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <ADC_ConfigureBoostMode+0x1d0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d808      	bhi.n	8003e1a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e18:	e025      	b.n	8003e66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <ADC_ConfigureBoostMode+0x1d4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d80a      	bhi.n	8003e38 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	e016      	b.n	8003e66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <ADC_ConfigureBoostMode+0x1d8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d80a      	bhi.n	8003e56 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	e007      	b.n	8003e66 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003e64:	609a      	str	r2, [r3, #8]
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40022000 	.word	0x40022000
 8003e74:	40022100 	.word	0x40022100
 8003e78:	40022300 	.word	0x40022300
 8003e7c:	58026300 	.word	0x58026300
 8003e80:	005f5e10 	.word	0x005f5e10
 8003e84:	00bebc20 	.word	0x00bebc20
 8003e88:	017d7840 	.word	0x017d7840

08003e8c <LL_ADC_IsEnabled>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <LL_ADC_IsEnabled+0x18>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <LL_ADC_IsEnabled+0x1a>
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <LL_ADC_StartCalibration>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <LL_ADC_StartCalibration+0x38>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	3ffeffc0 	.word	0x3ffeffc0

08003ef0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f04:	d101      	bne.n	8003f0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d101      	bne.n	8003f30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_ADCEx_Calibration_Start+0x1e>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e04c      	b.n	8003ff8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fdae 	bl	8003ac8 <ADC_Disable>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d135      	bne.n	8003fe2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f7a:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff90 	bl	8003eb4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f94:	e014      	b.n	8003fc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d30d      	bcc.n	8003fc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa8:	f023 0312 	bic.w	r3, r3, #18
 8003fac:	f043 0210 	orr.w	r2, r3, #16
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01b      	b.n	8003ff8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff93 	bl	8003ef0 <LL_ADC_IsCalibrationOnGoing>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e2      	bne.n	8003f96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	f023 0303 	bic.w	r3, r3, #3
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	661a      	str	r2, [r3, #96]	@ 0x60
 8003fe0:	e005      	b.n	8003fee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	ffffeefd 	.word	0xffffeefd
 8004004:	25c3f800 	.word	0x25c3f800

08004008 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b0a3      	sub	sp, #140	@ 0x8c
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004086:	2302      	movs	r3, #2
 8004088:	e0c1      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
 8004098:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a5e      	ldr	r2, [pc, #376]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d102      	bne.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040a4:	4b5d      	ldr	r3, [pc, #372]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e001      	b.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a0      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff22 	bl	8003f18 <LL_ADC_REG_IsConversionOngoing>
 80040d4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff1b 	bl	8003f18 <LL_ADC_REG_IsConversionOngoing>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 8081 	bne.w	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d17c      	bne.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a48      	ldr	r2, [pc, #288]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a46      	ldr	r2, [pc, #280]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004106:	4b46      	ldr	r3, [pc, #280]	@ (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004108:	e000      	b.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800410a:	4b46      	ldr	r3, [pc, #280]	@ (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800410c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d039      	beq.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	431a      	orrs	r2, r3
 8004124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004126:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3a      	ldr	r2, [pc, #232]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a39      	ldr	r2, [pc, #228]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10e      	bne.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800413c:	4836      	ldr	r0, [pc, #216]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800413e:	f7ff fea5 	bl	8003e8c <LL_ADC_IsEnabled>
 8004142:	4604      	mov	r4, r0
 8004144:	4835      	ldr	r0, [pc, #212]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004146:	f7ff fea1 	bl	8003e8c <LL_ADC_IsEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	4323      	orrs	r3, r4
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e008      	b.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800415a:	4833      	ldr	r0, [pc, #204]	@ (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800415c:	f7ff fe96 	bl	8003e8c <LL_ADC_IsEnabled>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d047      	beq.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004176:	4013      	ands	r3, r2
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6811      	ldr	r1, [r2, #0]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	6892      	ldr	r2, [r2, #8]
 8004180:	430a      	orrs	r2, r1
 8004182:	431a      	orrs	r2, r3
 8004184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004186:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004188:	e03a      	b.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800418a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004192:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004194:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10e      	bne.n	80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80041aa:	481b      	ldr	r0, [pc, #108]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80041ac:	f7ff fe6e 	bl	8003e8c <LL_ADC_IsEnabled>
 80041b0:	4604      	mov	r4, r0
 80041b2:	481a      	ldr	r0, [pc, #104]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041b4:	f7ff fe6a 	bl	8003e8c <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4323      	orrs	r3, r4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e008      	b.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80041c8:	4817      	ldr	r0, [pc, #92]	@ (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80041ca:	f7ff fe5f 	bl	8003e8c <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ea:	e009      	b.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80041fe:	e000      	b.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004200:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800420a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800420e:	4618      	mov	r0, r3
 8004210:	378c      	adds	r7, #140	@ 0x8c
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	bf00      	nop
 8004218:	40022000 	.word	0x40022000
 800421c:	40022100 	.word	0x40022100
 8004220:	40022300 	.word	0x40022300
 8004224:	58026300 	.word	0x58026300
 8004228:	58026000 	.word	0x58026000
 800422c:	fffff0e0 	.word	0xfffff0e0

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <__NVIC_SetPriorityGrouping+0x40>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425e:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <__NVIC_SetPriorityGrouping+0x40>)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	60d3      	str	r3, [r2, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	05fa0000 	.word	0x05fa0000

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	@ (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db0a      	blt.n	80042fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	@ (800431c <__NVIC_SetPriority+0x4c>)
 80042ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f8:	e00a      	b.n	8004310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4908      	ldr	r1, [pc, #32]	@ (8004320 <__NVIC_SetPriority+0x50>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	440b      	add	r3, r1
 800430e:	761a      	strb	r2, [r3, #24]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000e100 	.word	0xe000e100
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	@ 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
         );
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	@ 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800439c:	d301      	bcc.n	80043a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439e:	2301      	movs	r3, #1
 80043a0:	e00f      	b.n	80043c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a2:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <SysTick_Config+0x40>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043aa:	210f      	movs	r1, #15
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f7ff ff8e 	bl	80042d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <SysTick_Config+0x40>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ba:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <SysTick_Config+0x40>)
 80043bc:	2207      	movs	r2, #7
 80043be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff29 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f4:	f7ff ff40 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f7ff ff90 	bl	8004324 <NVIC_EncodePriority>
 8004404:	4602      	mov	r2, r0
 8004406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff5f 	bl	80042d0 <__NVIC_SetPriority>
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff33 	bl	8004294 <__NVIC_EnableIRQ>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ffa4 	bl	800438c <SysTick_Config>
 8004444:	4603      	mov	r3, r0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7fd fcfe 	bl	8001e58 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e312      	b.n	8004a8e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a66      	ldr	r2, [pc, #408]	@ (8004608 <HAL_DMA_Init+0x1b8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d04a      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a65      	ldr	r2, [pc, #404]	@ (800460c <HAL_DMA_Init+0x1bc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d045      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a63      	ldr	r2, [pc, #396]	@ (8004610 <HAL_DMA_Init+0x1c0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d040      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a62      	ldr	r2, [pc, #392]	@ (8004614 <HAL_DMA_Init+0x1c4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d03b      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a60      	ldr	r2, [pc, #384]	@ (8004618 <HAL_DMA_Init+0x1c8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d036      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a5f      	ldr	r2, [pc, #380]	@ (800461c <HAL_DMA_Init+0x1cc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d031      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004620 <HAL_DMA_Init+0x1d0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02c      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004624 <HAL_DMA_Init+0x1d4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d027      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004628 <HAL_DMA_Init+0x1d8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a59      	ldr	r2, [pc, #356]	@ (800462c <HAL_DMA_Init+0x1dc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01d      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a57      	ldr	r2, [pc, #348]	@ (8004630 <HAL_DMA_Init+0x1e0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a56      	ldr	r2, [pc, #344]	@ (8004634 <HAL_DMA_Init+0x1e4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a54      	ldr	r2, [pc, #336]	@ (8004638 <HAL_DMA_Init+0x1e8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a53      	ldr	r2, [pc, #332]	@ (800463c <HAL_DMA_Init+0x1ec>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a51      	ldr	r2, [pc, #324]	@ (8004640 <HAL_DMA_Init+0x1f0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_DMA_Init+0xb8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a50      	ldr	r2, [pc, #320]	@ (8004644 <HAL_DMA_Init+0x1f4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_DMA_Init+0xbc>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_DMA_Init+0xbe>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 813c 	beq.w	800478c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a37      	ldr	r2, [pc, #220]	@ (8004608 <HAL_DMA_Init+0x1b8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d04a      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a36      	ldr	r2, [pc, #216]	@ (800460c <HAL_DMA_Init+0x1bc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d045      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a34      	ldr	r2, [pc, #208]	@ (8004610 <HAL_DMA_Init+0x1c0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d040      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a33      	ldr	r2, [pc, #204]	@ (8004614 <HAL_DMA_Init+0x1c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d03b      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a31      	ldr	r2, [pc, #196]	@ (8004618 <HAL_DMA_Init+0x1c8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d036      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a30      	ldr	r2, [pc, #192]	@ (800461c <HAL_DMA_Init+0x1cc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d031      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2e      	ldr	r2, [pc, #184]	@ (8004620 <HAL_DMA_Init+0x1d0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02c      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2d      	ldr	r2, [pc, #180]	@ (8004624 <HAL_DMA_Init+0x1d4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d027      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a2b      	ldr	r2, [pc, #172]	@ (8004628 <HAL_DMA_Init+0x1d8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2a      	ldr	r2, [pc, #168]	@ (800462c <HAL_DMA_Init+0x1dc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01d      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <HAL_DMA_Init+0x1e0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a27      	ldr	r2, [pc, #156]	@ (8004634 <HAL_DMA_Init+0x1e4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a25      	ldr	r2, [pc, #148]	@ (8004638 <HAL_DMA_Init+0x1e8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a24      	ldr	r2, [pc, #144]	@ (800463c <HAL_DMA_Init+0x1ec>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a22      	ldr	r2, [pc, #136]	@ (8004640 <HAL_DMA_Init+0x1f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_Init+0x174>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a21      	ldr	r2, [pc, #132]	@ (8004644 <HAL_DMA_Init+0x1f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <HAL_DMA_Init+0x186>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e007      	b.n	80045e6 <HAL_DMA_Init+0x196>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045e6:	e02f      	b.n	8004648 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e8:	f7fd fc36 	bl	8001e58 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d928      	bls.n	8004648 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2203      	movs	r2, #3
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e242      	b.n	8004a8e <HAL_DMA_Init+0x63e>
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1c8      	bne.n	80045e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4b83      	ldr	r3, [pc, #524]	@ (8004870 <HAL_DMA_Init+0x420>)
 8004662:	4013      	ands	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800466e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004686:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	4313      	orrs	r3, r2
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b28      	cmp	r3, #40	@ 0x28
 80046b2:	d903      	bls.n	80046bc <HAL_DMA_Init+0x26c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ba:	d91f      	bls.n	80046fc <HAL_DMA_Init+0x2ac>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80046c2:	d903      	bls.n	80046cc <HAL_DMA_Init+0x27c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b42      	cmp	r3, #66	@ 0x42
 80046ca:	d917      	bls.n	80046fc <HAL_DMA_Init+0x2ac>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b46      	cmp	r3, #70	@ 0x46
 80046d2:	d903      	bls.n	80046dc <HAL_DMA_Init+0x28c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b48      	cmp	r3, #72	@ 0x48
 80046da:	d90f      	bls.n	80046fc <HAL_DMA_Init+0x2ac>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80046e2:	d903      	bls.n	80046ec <HAL_DMA_Init+0x29c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b52      	cmp	r3, #82	@ 0x52
 80046ea:	d907      	bls.n	80046fc <HAL_DMA_Init+0x2ac>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b73      	cmp	r3, #115	@ 0x73
 80046f2:	d905      	bls.n	8004700 <HAL_DMA_Init+0x2b0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b77      	cmp	r3, #119	@ 0x77
 80046fa:	d801      	bhi.n	8004700 <HAL_DMA_Init+0x2b0>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_DMA_Init+0x2b2>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 0307 	bic.w	r3, r3, #7
 8004724:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	2b04      	cmp	r3, #4
 8004736:	d117      	bne.n	8004768 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f002 fb2e 	bl	8006dac <DMA_CheckFifoParam>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e192      	b.n	8004a8e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f002 fa69 	bl	8006c48 <DMA_CalcBaseAndBitshift>
 8004776:	4603      	mov	r3, r0
 8004778:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	223f      	movs	r2, #63	@ 0x3f
 8004784:	409a      	lsls	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	e0c8      	b.n	800491e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a38      	ldr	r2, [pc, #224]	@ (8004874 <HAL_DMA_Init+0x424>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a37      	ldr	r2, [pc, #220]	@ (8004878 <HAL_DMA_Init+0x428>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	@ (800487c <HAL_DMA_Init+0x42c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a34      	ldr	r2, [pc, #208]	@ (8004880 <HAL_DMA_Init+0x430>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a32      	ldr	r2, [pc, #200]	@ (8004884 <HAL_DMA_Init+0x434>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a31      	ldr	r2, [pc, #196]	@ (8004888 <HAL_DMA_Init+0x438>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	@ (800488c <HAL_DMA_Init+0x43c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_Init+0x38c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004890 <HAL_DMA_Init+0x440>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_Init+0x390>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_DMA_Init+0x392>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8092 	beq.w	800490c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a21      	ldr	r2, [pc, #132]	@ (8004874 <HAL_DMA_Init+0x424>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d021      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a20      	ldr	r2, [pc, #128]	@ (8004878 <HAL_DMA_Init+0x428>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01c      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <HAL_DMA_Init+0x42c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d017      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <HAL_DMA_Init+0x430>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d012      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_DMA_Init+0x434>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00d      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <HAL_DMA_Init+0x438>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_DMA_Init+0x43c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <HAL_DMA_Init+0x3e6>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_DMA_Init+0x440>)
 8004834:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <HAL_DMA_Init+0x444>)
 8004852:	4013      	ands	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d01c      	beq.n	8004898 <HAL_DMA_Init+0x448>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d102      	bne.n	800486c <HAL_DMA_Init+0x41c>
 8004866:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800486a:	e016      	b.n	800489a <HAL_DMA_Init+0x44a>
 800486c:	2300      	movs	r3, #0
 800486e:	e014      	b.n	800489a <HAL_DMA_Init+0x44a>
 8004870:	fe10803f 	.word	0xfe10803f
 8004874:	58025408 	.word	0x58025408
 8004878:	5802541c 	.word	0x5802541c
 800487c:	58025430 	.word	0x58025430
 8004880:	58025444 	.word	0x58025444
 8004884:	58025458 	.word	0x58025458
 8004888:	5802546c 	.word	0x5802546c
 800488c:	58025480 	.word	0x58025480
 8004890:	58025494 	.word	0x58025494
 8004894:	fffe000f 	.word	0xfffe000f
 8004898:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	4b6e      	ldr	r3, [pc, #440]	@ (8004a98 <HAL_DMA_Init+0x648>)
 80048e0:	4413      	add	r3, r2
 80048e2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a9c <HAL_DMA_Init+0x64c>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	009a      	lsls	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 f9a9 	bl	8006c48 <DMA_CalcBaseAndBitshift>
 80048f6:	4603      	mov	r3, r0
 80048f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	e008      	b.n	800491e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	@ 0x40
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2203      	movs	r2, #3
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0b7      	b.n	8004a8e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a5f      	ldr	r2, [pc, #380]	@ (8004aa0 <HAL_DMA_Init+0x650>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d072      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a5d      	ldr	r2, [pc, #372]	@ (8004aa4 <HAL_DMA_Init+0x654>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d06d      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa8 <HAL_DMA_Init+0x658>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d068      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5a      	ldr	r2, [pc, #360]	@ (8004aac <HAL_DMA_Init+0x65c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d063      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a59      	ldr	r2, [pc, #356]	@ (8004ab0 <HAL_DMA_Init+0x660>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d05e      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a57      	ldr	r2, [pc, #348]	@ (8004ab4 <HAL_DMA_Init+0x664>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d059      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a56      	ldr	r2, [pc, #344]	@ (8004ab8 <HAL_DMA_Init+0x668>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d054      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a54      	ldr	r2, [pc, #336]	@ (8004abc <HAL_DMA_Init+0x66c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d04f      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a53      	ldr	r2, [pc, #332]	@ (8004ac0 <HAL_DMA_Init+0x670>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04a      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a51      	ldr	r2, [pc, #324]	@ (8004ac4 <HAL_DMA_Init+0x674>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a50      	ldr	r2, [pc, #320]	@ (8004ac8 <HAL_DMA_Init+0x678>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a4e      	ldr	r2, [pc, #312]	@ (8004acc <HAL_DMA_Init+0x67c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ad0 <HAL_DMA_Init+0x680>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d036      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad4 <HAL_DMA_Init+0x684>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad8 <HAL_DMA_Init+0x688>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a48      	ldr	r2, [pc, #288]	@ (8004adc <HAL_DMA_Init+0x68c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a47      	ldr	r2, [pc, #284]	@ (8004ae0 <HAL_DMA_Init+0x690>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a45      	ldr	r2, [pc, #276]	@ (8004ae4 <HAL_DMA_Init+0x694>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a44      	ldr	r2, [pc, #272]	@ (8004ae8 <HAL_DMA_Init+0x698>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a42      	ldr	r2, [pc, #264]	@ (8004aec <HAL_DMA_Init+0x69c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a41      	ldr	r2, [pc, #260]	@ (8004af0 <HAL_DMA_Init+0x6a0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3f      	ldr	r2, [pc, #252]	@ (8004af4 <HAL_DMA_Init+0x6a4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a3e      	ldr	r2, [pc, #248]	@ (8004af8 <HAL_DMA_Init+0x6a8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_DMA_Init+0x5be>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3c      	ldr	r2, [pc, #240]	@ (8004afc <HAL_DMA_Init+0x6ac>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA_Init+0x5c2>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_DMA_Init+0x5c4>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d032      	beq.n	8004a7e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f002 fa43 	bl	8006ea4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d102      	bne.n	8004a2c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <HAL_DMA_Init+0x61c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d80c      	bhi.n	8004a6c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f002 fac0 	bl	8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	e008      	b.n	8004a7e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	a7fdabf8 	.word	0xa7fdabf8
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	58025408 	.word	0x58025408
 8004ae4:	5802541c 	.word	0x5802541c
 8004ae8:	58025430 	.word	0x58025430
 8004aec:	58025444 	.word	0x58025444
 8004af0:	58025458 	.word	0x58025458
 8004af4:	5802546c 	.word	0x5802546c
 8004af8:	58025480 	.word	0x58025480
 8004afc:	58025494 	.word	0x58025494

08004b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e226      	b.n	8004f6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_DMA_Start_IT+0x2a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e21f      	b.n	8004f6a <HAL_DMA_Start_IT+0x46a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 820a 	bne.w	8004f54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a68      	ldr	r2, [pc, #416]	@ (8004cf4 <HAL_DMA_Start_IT+0x1f4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d04a      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a66      	ldr	r2, [pc, #408]	@ (8004cf8 <HAL_DMA_Start_IT+0x1f8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d045      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a65      	ldr	r2, [pc, #404]	@ (8004cfc <HAL_DMA_Start_IT+0x1fc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d040      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a63      	ldr	r2, [pc, #396]	@ (8004d00 <HAL_DMA_Start_IT+0x200>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d03b      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a62      	ldr	r2, [pc, #392]	@ (8004d04 <HAL_DMA_Start_IT+0x204>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d036      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a60      	ldr	r2, [pc, #384]	@ (8004d08 <HAL_DMA_Start_IT+0x208>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d031      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8004d0c <HAL_DMA_Start_IT+0x20c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d02c      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	@ (8004d10 <HAL_DMA_Start_IT+0x210>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d027      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d14 <HAL_DMA_Start_IT+0x214>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5a      	ldr	r2, [pc, #360]	@ (8004d18 <HAL_DMA_Start_IT+0x218>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01d      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a59      	ldr	r2, [pc, #356]	@ (8004d1c <HAL_DMA_Start_IT+0x21c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a57      	ldr	r2, [pc, #348]	@ (8004d20 <HAL_DMA_Start_IT+0x220>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a56      	ldr	r2, [pc, #344]	@ (8004d24 <HAL_DMA_Start_IT+0x224>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	@ (8004d28 <HAL_DMA_Start_IT+0x228>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a53      	ldr	r2, [pc, #332]	@ (8004d2c <HAL_DMA_Start_IT+0x22c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a51      	ldr	r2, [pc, #324]	@ (8004d30 <HAL_DMA_Start_IT+0x230>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <HAL_DMA_Start_IT+0x100>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e007      	b.n	8004c10 <HAL_DMA_Start_IT+0x110>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f001 fe6a 	bl	80068f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a34      	ldr	r2, [pc, #208]	@ (8004cf4 <HAL_DMA_Start_IT+0x1f4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a33      	ldr	r2, [pc, #204]	@ (8004cf8 <HAL_DMA_Start_IT+0x1f8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a31      	ldr	r2, [pc, #196]	@ (8004cfc <HAL_DMA_Start_IT+0x1fc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a30      	ldr	r2, [pc, #192]	@ (8004d00 <HAL_DMA_Start_IT+0x200>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2e      	ldr	r2, [pc, #184]	@ (8004d04 <HAL_DMA_Start_IT+0x204>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <HAL_DMA_Start_IT+0x208>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d0c <HAL_DMA_Start_IT+0x20c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2a      	ldr	r2, [pc, #168]	@ (8004d10 <HAL_DMA_Start_IT+0x210>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a28      	ldr	r2, [pc, #160]	@ (8004d14 <HAL_DMA_Start_IT+0x214>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <HAL_DMA_Start_IT+0x218>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a25      	ldr	r2, [pc, #148]	@ (8004d1c <HAL_DMA_Start_IT+0x21c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a24      	ldr	r2, [pc, #144]	@ (8004d20 <HAL_DMA_Start_IT+0x220>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a22      	ldr	r2, [pc, #136]	@ (8004d24 <HAL_DMA_Start_IT+0x224>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a21      	ldr	r2, [pc, #132]	@ (8004d28 <HAL_DMA_Start_IT+0x228>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <HAL_DMA_Start_IT+0x22c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_DMA_Start_IT+0x230>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_DMA_Start_IT+0x1c0>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_DMA_Start_IT+0x1c2>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d036      	beq.n	8004d34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 021e 	bic.w	r2, r3, #30
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0216 	orr.w	r2, r2, #22
 8004cd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03e      	beq.n	8004d60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0208 	orr.w	r2, r2, #8
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e035      	b.n	8004d60 <HAL_DMA_Start_IT+0x260>
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020e 	bic.w	r2, r3, #14
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 020a 	orr.w	r2, r2, #10
 8004d46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0204 	orr.w	r2, r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a83      	ldr	r2, [pc, #524]	@ (8004f74 <HAL_DMA_Start_IT+0x474>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d072      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a82      	ldr	r2, [pc, #520]	@ (8004f78 <HAL_DMA_Start_IT+0x478>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d06d      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a80      	ldr	r2, [pc, #512]	@ (8004f7c <HAL_DMA_Start_IT+0x47c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d068      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7f      	ldr	r2, [pc, #508]	@ (8004f80 <HAL_DMA_Start_IT+0x480>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d063      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f84 <HAL_DMA_Start_IT+0x484>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d05e      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7c      	ldr	r2, [pc, #496]	@ (8004f88 <HAL_DMA_Start_IT+0x488>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d059      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7a      	ldr	r2, [pc, #488]	@ (8004f8c <HAL_DMA_Start_IT+0x48c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d054      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a79      	ldr	r2, [pc, #484]	@ (8004f90 <HAL_DMA_Start_IT+0x490>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04f      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a77      	ldr	r2, [pc, #476]	@ (8004f94 <HAL_DMA_Start_IT+0x494>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d04a      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a76      	ldr	r2, [pc, #472]	@ (8004f98 <HAL_DMA_Start_IT+0x498>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d045      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a74      	ldr	r2, [pc, #464]	@ (8004f9c <HAL_DMA_Start_IT+0x49c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d040      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a73      	ldr	r2, [pc, #460]	@ (8004fa0 <HAL_DMA_Start_IT+0x4a0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d03b      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a71      	ldr	r2, [pc, #452]	@ (8004fa4 <HAL_DMA_Start_IT+0x4a4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d036      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a70      	ldr	r2, [pc, #448]	@ (8004fa8 <HAL_DMA_Start_IT+0x4a8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d031      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6e      	ldr	r2, [pc, #440]	@ (8004fac <HAL_DMA_Start_IT+0x4ac>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02c      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb0 <HAL_DMA_Start_IT+0x4b0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d027      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb4 <HAL_DMA_Start_IT+0x4b4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8004fb8 <HAL_DMA_Start_IT+0x4b8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a68      	ldr	r2, [pc, #416]	@ (8004fbc <HAL_DMA_Start_IT+0x4bc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a67      	ldr	r2, [pc, #412]	@ (8004fc0 <HAL_DMA_Start_IT+0x4c0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a65      	ldr	r2, [pc, #404]	@ (8004fc4 <HAL_DMA_Start_IT+0x4c4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a64      	ldr	r2, [pc, #400]	@ (8004fc8 <HAL_DMA_Start_IT+0x4c8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a62      	ldr	r2, [pc, #392]	@ (8004fcc <HAL_DMA_Start_IT+0x4cc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a61      	ldr	r2, [pc, #388]	@ (8004fd0 <HAL_DMA_Start_IT+0x4d0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA_Start_IT+0x354>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_DMA_Start_IT+0x356>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01a      	beq.n	8004e90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a37      	ldr	r2, [pc, #220]	@ (8004f74 <HAL_DMA_Start_IT+0x474>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d04a      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a36      	ldr	r2, [pc, #216]	@ (8004f78 <HAL_DMA_Start_IT+0x478>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d045      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <HAL_DMA_Start_IT+0x47c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d040      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a33      	ldr	r2, [pc, #204]	@ (8004f80 <HAL_DMA_Start_IT+0x480>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d03b      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a31      	ldr	r2, [pc, #196]	@ (8004f84 <HAL_DMA_Start_IT+0x484>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d036      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a30      	ldr	r2, [pc, #192]	@ (8004f88 <HAL_DMA_Start_IT+0x488>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d031      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f8c <HAL_DMA_Start_IT+0x48c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02c      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2d      	ldr	r2, [pc, #180]	@ (8004f90 <HAL_DMA_Start_IT+0x490>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d027      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <HAL_DMA_Start_IT+0x494>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	@ (8004f98 <HAL_DMA_Start_IT+0x498>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d01d      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a28      	ldr	r2, [pc, #160]	@ (8004f9c <HAL_DMA_Start_IT+0x49c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <HAL_DMA_Start_IT+0x4a0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	@ (8004fa4 <HAL_DMA_Start_IT+0x4a4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_DMA_Start_IT+0x4a8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <HAL_DMA_Start_IT+0x4ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <HAL_DMA_Start_IT+0x4b0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d108      	bne.n	8004f42 <HAL_DMA_Start_IT+0x442>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e012      	b.n	8004f68 <HAL_DMA_Start_IT+0x468>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e009      	b.n	8004f68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40020010 	.word	0x40020010
 8004f78:	40020028 	.word	0x40020028
 8004f7c:	40020040 	.word	0x40020040
 8004f80:	40020058 	.word	0x40020058
 8004f84:	40020070 	.word	0x40020070
 8004f88:	40020088 	.word	0x40020088
 8004f8c:	400200a0 	.word	0x400200a0
 8004f90:	400200b8 	.word	0x400200b8
 8004f94:	40020410 	.word	0x40020410
 8004f98:	40020428 	.word	0x40020428
 8004f9c:	40020440 	.word	0x40020440
 8004fa0:	40020458 	.word	0x40020458
 8004fa4:	40020470 	.word	0x40020470
 8004fa8:	40020488 	.word	0x40020488
 8004fac:	400204a0 	.word	0x400204a0
 8004fb0:	400204b8 	.word	0x400204b8
 8004fb4:	58025408 	.word	0x58025408
 8004fb8:	5802541c 	.word	0x5802541c
 8004fbc:	58025430 	.word	0x58025430
 8004fc0:	58025444 	.word	0x58025444
 8004fc4:	58025458 	.word	0x58025458
 8004fc8:	5802546c 	.word	0x5802546c
 8004fcc:	58025480 	.word	0x58025480
 8004fd0:	58025494 	.word	0x58025494

08004fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004fdc:	f7fc ff3c 	bl	8001e58 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e2dc      	b.n	80055a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d008      	beq.n	800500a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e2cd      	b.n	80055a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a76      	ldr	r2, [pc, #472]	@ (80051e8 <HAL_DMA_Abort+0x214>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d04a      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a74      	ldr	r2, [pc, #464]	@ (80051ec <HAL_DMA_Abort+0x218>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d045      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a73      	ldr	r2, [pc, #460]	@ (80051f0 <HAL_DMA_Abort+0x21c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d040      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a71      	ldr	r2, [pc, #452]	@ (80051f4 <HAL_DMA_Abort+0x220>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d03b      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a70      	ldr	r2, [pc, #448]	@ (80051f8 <HAL_DMA_Abort+0x224>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d036      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a6e      	ldr	r2, [pc, #440]	@ (80051fc <HAL_DMA_Abort+0x228>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6d      	ldr	r2, [pc, #436]	@ (8005200 <HAL_DMA_Abort+0x22c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d02c      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6b      	ldr	r2, [pc, #428]	@ (8005204 <HAL_DMA_Abort+0x230>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d027      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6a      	ldr	r2, [pc, #424]	@ (8005208 <HAL_DMA_Abort+0x234>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a68      	ldr	r2, [pc, #416]	@ (800520c <HAL_DMA_Abort+0x238>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01d      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a67      	ldr	r2, [pc, #412]	@ (8005210 <HAL_DMA_Abort+0x23c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a65      	ldr	r2, [pc, #404]	@ (8005214 <HAL_DMA_Abort+0x240>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a64      	ldr	r2, [pc, #400]	@ (8005218 <HAL_DMA_Abort+0x244>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a62      	ldr	r2, [pc, #392]	@ (800521c <HAL_DMA_Abort+0x248>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a61      	ldr	r2, [pc, #388]	@ (8005220 <HAL_DMA_Abort+0x24c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_DMA_Abort+0xd6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005224 <HAL_DMA_Abort+0x250>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d101      	bne.n	80050ae <HAL_DMA_Abort+0xda>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_DMA_Abort+0xdc>
 80050ae:	2300      	movs	r3, #0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 021e 	bic.w	r2, r2, #30
 80050c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e00a      	b.n	80050f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 020e 	bic.w	r2, r2, #14
 80050ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <HAL_DMA_Abort+0x214>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d072      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3a      	ldr	r2, [pc, #232]	@ (80051ec <HAL_DMA_Abort+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d06d      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a39      	ldr	r2, [pc, #228]	@ (80051f0 <HAL_DMA_Abort+0x21c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d068      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a37      	ldr	r2, [pc, #220]	@ (80051f4 <HAL_DMA_Abort+0x220>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d063      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a36      	ldr	r2, [pc, #216]	@ (80051f8 <HAL_DMA_Abort+0x224>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d05e      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a34      	ldr	r2, [pc, #208]	@ (80051fc <HAL_DMA_Abort+0x228>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d059      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a33      	ldr	r2, [pc, #204]	@ (8005200 <HAL_DMA_Abort+0x22c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d054      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a31      	ldr	r2, [pc, #196]	@ (8005204 <HAL_DMA_Abort+0x230>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04f      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a30      	ldr	r2, [pc, #192]	@ (8005208 <HAL_DMA_Abort+0x234>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <HAL_DMA_Abort+0x238>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2d      	ldr	r2, [pc, #180]	@ (8005210 <HAL_DMA_Abort+0x23c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2b      	ldr	r2, [pc, #172]	@ (8005214 <HAL_DMA_Abort+0x240>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <HAL_DMA_Abort+0x244>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a28      	ldr	r2, [pc, #160]	@ (800521c <HAL_DMA_Abort+0x248>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a27      	ldr	r2, [pc, #156]	@ (8005220 <HAL_DMA_Abort+0x24c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a25      	ldr	r2, [pc, #148]	@ (8005224 <HAL_DMA_Abort+0x250>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a24      	ldr	r2, [pc, #144]	@ (8005228 <HAL_DMA_Abort+0x254>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a22      	ldr	r2, [pc, #136]	@ (800522c <HAL_DMA_Abort+0x258>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a21      	ldr	r2, [pc, #132]	@ (8005230 <HAL_DMA_Abort+0x25c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005234 <HAL_DMA_Abort+0x260>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1e      	ldr	r2, [pc, #120]	@ (8005238 <HAL_DMA_Abort+0x264>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <HAL_DMA_Abort+0x268>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <HAL_DMA_Abort+0x26c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_Abort+0x20e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a19      	ldr	r2, [pc, #100]	@ (8005244 <HAL_DMA_Abort+0x270>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d132      	bne.n	8005248 <HAL_DMA_Abort+0x274>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e031      	b.n	800524a <HAL_DMA_Abort+0x276>
 80051e6:	bf00      	nop
 80051e8:	40020010 	.word	0x40020010
 80051ec:	40020028 	.word	0x40020028
 80051f0:	40020040 	.word	0x40020040
 80051f4:	40020058 	.word	0x40020058
 80051f8:	40020070 	.word	0x40020070
 80051fc:	40020088 	.word	0x40020088
 8005200:	400200a0 	.word	0x400200a0
 8005204:	400200b8 	.word	0x400200b8
 8005208:	40020410 	.word	0x40020410
 800520c:	40020428 	.word	0x40020428
 8005210:	40020440 	.word	0x40020440
 8005214:	40020458 	.word	0x40020458
 8005218:	40020470 	.word	0x40020470
 800521c:	40020488 	.word	0x40020488
 8005220:	400204a0 	.word	0x400204a0
 8005224:	400204b8 	.word	0x400204b8
 8005228:	58025408 	.word	0x58025408
 800522c:	5802541c 	.word	0x5802541c
 8005230:	58025430 	.word	0x58025430
 8005234:	58025444 	.word	0x58025444
 8005238:	58025458 	.word	0x58025458
 800523c:	5802546c 	.word	0x5802546c
 8005240:	58025480 	.word	0x58025480
 8005244:	58025494 	.word	0x58025494
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800525c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a6d      	ldr	r2, [pc, #436]	@ (8005418 <HAL_DMA_Abort+0x444>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6b      	ldr	r2, [pc, #428]	@ (800541c <HAL_DMA_Abort+0x448>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6a      	ldr	r2, [pc, #424]	@ (8005420 <HAL_DMA_Abort+0x44c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a68      	ldr	r2, [pc, #416]	@ (8005424 <HAL_DMA_Abort+0x450>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a67      	ldr	r2, [pc, #412]	@ (8005428 <HAL_DMA_Abort+0x454>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a65      	ldr	r2, [pc, #404]	@ (800542c <HAL_DMA_Abort+0x458>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a64      	ldr	r2, [pc, #400]	@ (8005430 <HAL_DMA_Abort+0x45c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a62      	ldr	r2, [pc, #392]	@ (8005434 <HAL_DMA_Abort+0x460>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a61      	ldr	r2, [pc, #388]	@ (8005438 <HAL_DMA_Abort+0x464>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5f      	ldr	r2, [pc, #380]	@ (800543c <HAL_DMA_Abort+0x468>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005440 <HAL_DMA_Abort+0x46c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005444 <HAL_DMA_Abort+0x470>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5b      	ldr	r2, [pc, #364]	@ (8005448 <HAL_DMA_Abort+0x474>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a59      	ldr	r2, [pc, #356]	@ (800544c <HAL_DMA_Abort+0x478>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a58      	ldr	r2, [pc, #352]	@ (8005450 <HAL_DMA_Abort+0x47c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_Abort+0x32a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a56      	ldr	r2, [pc, #344]	@ (8005454 <HAL_DMA_Abort+0x480>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <HAL_DMA_Abort+0x33c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e007      	b.n	8005320 <HAL_DMA_Abort+0x34c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005320:	e013      	b.n	800534a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005322:	f7fc fd99 	bl	8001e58 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b05      	cmp	r3, #5
 800532e:	d90c      	bls.n	800534a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e12d      	b.n	80055a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e5      	bne.n	8005322 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <HAL_DMA_Abort+0x444>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2d      	ldr	r2, [pc, #180]	@ (800541c <HAL_DMA_Abort+0x448>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	@ (8005420 <HAL_DMA_Abort+0x44c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <HAL_DMA_Abort+0x450>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <HAL_DMA_Abort+0x454>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a27      	ldr	r2, [pc, #156]	@ (800542c <HAL_DMA_Abort+0x458>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a26      	ldr	r2, [pc, #152]	@ (8005430 <HAL_DMA_Abort+0x45c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a24      	ldr	r2, [pc, #144]	@ (8005434 <HAL_DMA_Abort+0x460>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a23      	ldr	r2, [pc, #140]	@ (8005438 <HAL_DMA_Abort+0x464>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a21      	ldr	r2, [pc, #132]	@ (800543c <HAL_DMA_Abort+0x468>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a20      	ldr	r2, [pc, #128]	@ (8005440 <HAL_DMA_Abort+0x46c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005444 <HAL_DMA_Abort+0x470>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005448 <HAL_DMA_Abort+0x474>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <HAL_DMA_Abort+0x478>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005450 <HAL_DMA_Abort+0x47c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_Abort+0x422>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <HAL_DMA_Abort+0x480>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_Abort+0x426>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <HAL_DMA_Abort+0x428>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02b      	beq.n	8005458 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	223f      	movs	r2, #63	@ 0x3f
 8005410:	409a      	lsls	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	e02a      	b.n	800546e <HAL_DMA_Abort+0x49a>
 8005418:	40020010 	.word	0x40020010
 800541c:	40020028 	.word	0x40020028
 8005420:	40020040 	.word	0x40020040
 8005424:	40020058 	.word	0x40020058
 8005428:	40020070 	.word	0x40020070
 800542c:	40020088 	.word	0x40020088
 8005430:	400200a0 	.word	0x400200a0
 8005434:	400200b8 	.word	0x400200b8
 8005438:	40020410 	.word	0x40020410
 800543c:	40020428 	.word	0x40020428
 8005440:	40020440 	.word	0x40020440
 8005444:	40020458 	.word	0x40020458
 8005448:	40020470 	.word	0x40020470
 800544c:	40020488 	.word	0x40020488
 8005450:	400204a0 	.word	0x400204a0
 8005454:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2201      	movs	r2, #1
 8005468:	409a      	lsls	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a4f      	ldr	r2, [pc, #316]	@ (80055b0 <HAL_DMA_Abort+0x5dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d072      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a4d      	ldr	r2, [pc, #308]	@ (80055b4 <HAL_DMA_Abort+0x5e0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d06d      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a4c      	ldr	r2, [pc, #304]	@ (80055b8 <HAL_DMA_Abort+0x5e4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d068      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4a      	ldr	r2, [pc, #296]	@ (80055bc <HAL_DMA_Abort+0x5e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d063      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a49      	ldr	r2, [pc, #292]	@ (80055c0 <HAL_DMA_Abort+0x5ec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d05e      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a47      	ldr	r2, [pc, #284]	@ (80055c4 <HAL_DMA_Abort+0x5f0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d059      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a46      	ldr	r2, [pc, #280]	@ (80055c8 <HAL_DMA_Abort+0x5f4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d054      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a44      	ldr	r2, [pc, #272]	@ (80055cc <HAL_DMA_Abort+0x5f8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04f      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a43      	ldr	r2, [pc, #268]	@ (80055d0 <HAL_DMA_Abort+0x5fc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d04a      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a41      	ldr	r2, [pc, #260]	@ (80055d4 <HAL_DMA_Abort+0x600>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d045      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a40      	ldr	r2, [pc, #256]	@ (80055d8 <HAL_DMA_Abort+0x604>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d040      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3e      	ldr	r2, [pc, #248]	@ (80055dc <HAL_DMA_Abort+0x608>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d03b      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3d      	ldr	r2, [pc, #244]	@ (80055e0 <HAL_DMA_Abort+0x60c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d036      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a3b      	ldr	r2, [pc, #236]	@ (80055e4 <HAL_DMA_Abort+0x610>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d031      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a3a      	ldr	r2, [pc, #232]	@ (80055e8 <HAL_DMA_Abort+0x614>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d02c      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a38      	ldr	r2, [pc, #224]	@ (80055ec <HAL_DMA_Abort+0x618>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d027      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a37      	ldr	r2, [pc, #220]	@ (80055f0 <HAL_DMA_Abort+0x61c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a35      	ldr	r2, [pc, #212]	@ (80055f4 <HAL_DMA_Abort+0x620>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a34      	ldr	r2, [pc, #208]	@ (80055f8 <HAL_DMA_Abort+0x624>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a32      	ldr	r2, [pc, #200]	@ (80055fc <HAL_DMA_Abort+0x628>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a31      	ldr	r2, [pc, #196]	@ (8005600 <HAL_DMA_Abort+0x62c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2f      	ldr	r2, [pc, #188]	@ (8005604 <HAL_DMA_Abort+0x630>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2e      	ldr	r2, [pc, #184]	@ (8005608 <HAL_DMA_Abort+0x634>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_DMA_Abort+0x58a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a2c      	ldr	r2, [pc, #176]	@ (800560c <HAL_DMA_Abort+0x638>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_DMA_Abort+0x58e>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_DMA_Abort+0x590>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005570:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005588:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005592:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	58025408 	.word	0x58025408
 80055f4:	5802541c 	.word	0x5802541c
 80055f8:	58025430 	.word	0x58025430
 80055fc:	58025444 	.word	0x58025444
 8005600:	58025458 	.word	0x58025458
 8005604:	5802546c 	.word	0x5802546c
 8005608:	58025480 	.word	0x58025480
 800560c:	58025494 	.word	0x58025494

08005610 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e237      	b.n	8005a92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d004      	beq.n	8005638 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2280      	movs	r2, #128	@ 0x80
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e22c      	b.n	8005a92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5c      	ldr	r2, [pc, #368]	@ (80057b0 <HAL_DMA_Abort_IT+0x1a0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04a      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a5b      	ldr	r2, [pc, #364]	@ (80057b4 <HAL_DMA_Abort_IT+0x1a4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d045      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a59      	ldr	r2, [pc, #356]	@ (80057b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d040      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a58      	ldr	r2, [pc, #352]	@ (80057bc <HAL_DMA_Abort_IT+0x1ac>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d03b      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a56      	ldr	r2, [pc, #344]	@ (80057c0 <HAL_DMA_Abort_IT+0x1b0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d036      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a55      	ldr	r2, [pc, #340]	@ (80057c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d031      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a53      	ldr	r2, [pc, #332]	@ (80057c8 <HAL_DMA_Abort_IT+0x1b8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02c      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a52      	ldr	r2, [pc, #328]	@ (80057cc <HAL_DMA_Abort_IT+0x1bc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d027      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a50      	ldr	r2, [pc, #320]	@ (80057d0 <HAL_DMA_Abort_IT+0x1c0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4f      	ldr	r2, [pc, #316]	@ (80057d4 <HAL_DMA_Abort_IT+0x1c4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01d      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4d      	ldr	r2, [pc, #308]	@ (80057d8 <HAL_DMA_Abort_IT+0x1c8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4c      	ldr	r2, [pc, #304]	@ (80057dc <HAL_DMA_Abort_IT+0x1cc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a4a      	ldr	r2, [pc, #296]	@ (80057e0 <HAL_DMA_Abort_IT+0x1d0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a49      	ldr	r2, [pc, #292]	@ (80057e4 <HAL_DMA_Abort_IT+0x1d4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a47      	ldr	r2, [pc, #284]	@ (80057e8 <HAL_DMA_Abort_IT+0x1d8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_Abort_IT+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a46      	ldr	r2, [pc, #280]	@ (80057ec <HAL_DMA_Abort_IT+0x1dc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Abort_IT+0xcc>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_DMA_Abort_IT+0xce>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8086 	beq.w	80057f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2204      	movs	r2, #4
 80056e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2f      	ldr	r2, [pc, #188]	@ (80057b0 <HAL_DMA_Abort_IT+0x1a0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d04a      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2e      	ldr	r2, [pc, #184]	@ (80057b4 <HAL_DMA_Abort_IT+0x1a4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d045      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2c      	ldr	r2, [pc, #176]	@ (80057b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d040      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2b      	ldr	r2, [pc, #172]	@ (80057bc <HAL_DMA_Abort_IT+0x1ac>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d03b      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a29      	ldr	r2, [pc, #164]	@ (80057c0 <HAL_DMA_Abort_IT+0x1b0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d036      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a28      	ldr	r2, [pc, #160]	@ (80057c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d031      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a26      	ldr	r2, [pc, #152]	@ (80057c8 <HAL_DMA_Abort_IT+0x1b8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02c      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a25      	ldr	r2, [pc, #148]	@ (80057cc <HAL_DMA_Abort_IT+0x1bc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d027      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_DMA_Abort_IT+0x1c0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a22      	ldr	r2, [pc, #136]	@ (80057d4 <HAL_DMA_Abort_IT+0x1c4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a20      	ldr	r2, [pc, #128]	@ (80057d8 <HAL_DMA_Abort_IT+0x1c8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <HAL_DMA_Abort_IT+0x1cc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <HAL_DMA_Abort_IT+0x1d0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1c      	ldr	r2, [pc, #112]	@ (80057e4 <HAL_DMA_Abort_IT+0x1d4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1a      	ldr	r2, [pc, #104]	@ (80057e8 <HAL_DMA_Abort_IT+0x1d8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_DMA_Abort_IT+0x17c>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a19      	ldr	r2, [pc, #100]	@ (80057ec <HAL_DMA_Abort_IT+0x1dc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <HAL_DMA_Abort_IT+0x18e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e178      	b.n	8005a90 <HAL_DMA_Abort_IT+0x480>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e16f      	b.n	8005a90 <HAL_DMA_Abort_IT+0x480>
 80057b0:	40020010 	.word	0x40020010
 80057b4:	40020028 	.word	0x40020028
 80057b8:	40020040 	.word	0x40020040
 80057bc:	40020058 	.word	0x40020058
 80057c0:	40020070 	.word	0x40020070
 80057c4:	40020088 	.word	0x40020088
 80057c8:	400200a0 	.word	0x400200a0
 80057cc:	400200b8 	.word	0x400200b8
 80057d0:	40020410 	.word	0x40020410
 80057d4:	40020428 	.word	0x40020428
 80057d8:	40020440 	.word	0x40020440
 80057dc:	40020458 	.word	0x40020458
 80057e0:	40020470 	.word	0x40020470
 80057e4:	40020488 	.word	0x40020488
 80057e8:	400204a0 	.word	0x400204a0
 80057ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 020e 	bic.w	r2, r2, #14
 80057fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6c      	ldr	r2, [pc, #432]	@ (80059b8 <HAL_DMA_Abort_IT+0x3a8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d04a      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6b      	ldr	r2, [pc, #428]	@ (80059bc <HAL_DMA_Abort_IT+0x3ac>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d045      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a69      	ldr	r2, [pc, #420]	@ (80059c0 <HAL_DMA_Abort_IT+0x3b0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d040      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a68      	ldr	r2, [pc, #416]	@ (80059c4 <HAL_DMA_Abort_IT+0x3b4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d03b      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a66      	ldr	r2, [pc, #408]	@ (80059c8 <HAL_DMA_Abort_IT+0x3b8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d036      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a65      	ldr	r2, [pc, #404]	@ (80059cc <HAL_DMA_Abort_IT+0x3bc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d031      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a63      	ldr	r2, [pc, #396]	@ (80059d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d02c      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a62      	ldr	r2, [pc, #392]	@ (80059d4 <HAL_DMA_Abort_IT+0x3c4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d027      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a60      	ldr	r2, [pc, #384]	@ (80059d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a5f      	ldr	r2, [pc, #380]	@ (80059dc <HAL_DMA_Abort_IT+0x3cc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d01d      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5d      	ldr	r2, [pc, #372]	@ (80059e0 <HAL_DMA_Abort_IT+0x3d0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5c      	ldr	r2, [pc, #368]	@ (80059e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5a      	ldr	r2, [pc, #360]	@ (80059e8 <HAL_DMA_Abort_IT+0x3d8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a59      	ldr	r2, [pc, #356]	@ (80059ec <HAL_DMA_Abort_IT+0x3dc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a57      	ldr	r2, [pc, #348]	@ (80059f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x290>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a56      	ldr	r2, [pc, #344]	@ (80059f4 <HAL_DMA_Abort_IT+0x3e4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <HAL_DMA_Abort_IT+0x2a2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e007      	b.n	80058c2 <HAL_DMA_Abort_IT+0x2b2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3c      	ldr	r2, [pc, #240]	@ (80059b8 <HAL_DMA_Abort_IT+0x3a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d072      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3a      	ldr	r2, [pc, #232]	@ (80059bc <HAL_DMA_Abort_IT+0x3ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d06d      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a39      	ldr	r2, [pc, #228]	@ (80059c0 <HAL_DMA_Abort_IT+0x3b0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d068      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a37      	ldr	r2, [pc, #220]	@ (80059c4 <HAL_DMA_Abort_IT+0x3b4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d063      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a36      	ldr	r2, [pc, #216]	@ (80059c8 <HAL_DMA_Abort_IT+0x3b8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d05e      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a34      	ldr	r2, [pc, #208]	@ (80059cc <HAL_DMA_Abort_IT+0x3bc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d059      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a33      	ldr	r2, [pc, #204]	@ (80059d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d054      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a31      	ldr	r2, [pc, #196]	@ (80059d4 <HAL_DMA_Abort_IT+0x3c4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04f      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a30      	ldr	r2, [pc, #192]	@ (80059d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d04a      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2e      	ldr	r2, [pc, #184]	@ (80059dc <HAL_DMA_Abort_IT+0x3cc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d045      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <HAL_DMA_Abort_IT+0x3d0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d040      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2b      	ldr	r2, [pc, #172]	@ (80059e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2a      	ldr	r2, [pc, #168]	@ (80059e8 <HAL_DMA_Abort_IT+0x3d8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d036      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a28      	ldr	r2, [pc, #160]	@ (80059ec <HAL_DMA_Abort_IT+0x3dc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d02c      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a25      	ldr	r2, [pc, #148]	@ (80059f4 <HAL_DMA_Abort_IT+0x3e4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d027      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a24      	ldr	r2, [pc, #144]	@ (80059f8 <HAL_DMA_Abort_IT+0x3e8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a22      	ldr	r2, [pc, #136]	@ (80059fc <HAL_DMA_Abort_IT+0x3ec>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a21      	ldr	r2, [pc, #132]	@ (8005a00 <HAL_DMA_Abort_IT+0x3f0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <HAL_DMA_Abort_IT+0x3f4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a08 <HAL_DMA_Abort_IT+0x3f8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1c      	ldr	r2, [pc, #112]	@ (8005a0c <HAL_DMA_Abort_IT+0x3fc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_DMA_Abort_IT+0x400>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMA_Abort_IT+0x3a2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a19      	ldr	r2, [pc, #100]	@ (8005a14 <HAL_DMA_Abort_IT+0x404>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d132      	bne.n	8005a18 <HAL_DMA_Abort_IT+0x408>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e031      	b.n	8005a1a <HAL_DMA_Abort_IT+0x40a>
 80059b6:	bf00      	nop
 80059b8:	40020010 	.word	0x40020010
 80059bc:	40020028 	.word	0x40020028
 80059c0:	40020040 	.word	0x40020040
 80059c4:	40020058 	.word	0x40020058
 80059c8:	40020070 	.word	0x40020070
 80059cc:	40020088 	.word	0x40020088
 80059d0:	400200a0 	.word	0x400200a0
 80059d4:	400200b8 	.word	0x400200b8
 80059d8:	40020410 	.word	0x40020410
 80059dc:	40020428 	.word	0x40020428
 80059e0:	40020440 	.word	0x40020440
 80059e4:	40020458 	.word	0x40020458
 80059e8:	40020470 	.word	0x40020470
 80059ec:	40020488 	.word	0x40020488
 80059f0:	400204a0 	.word	0x400204a0
 80059f4:	400204b8 	.word	0x400204b8
 80059f8:	58025408 	.word	0x58025408
 80059fc:	5802541c 	.word	0x5802541c
 8005a00:	58025430 	.word	0x58025430
 8005a04:	58025444 	.word	0x58025444
 8005a08:	58025458 	.word	0x58025458
 8005a0c:	5802546c 	.word	0x5802546c
 8005a10:	58025480 	.word	0x58025480
 8005a14:	58025494 	.word	0x58025494
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d028      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop

08005a9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005aa8:	4b67      	ldr	r3, [pc, #412]	@ (8005c48 <HAL_DMA_IRQHandler+0x1ac>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a67      	ldr	r2, [pc, #412]	@ (8005c4c <HAL_DMA_IRQHandler+0x1b0>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0a9b      	lsrs	r3, r3, #10
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8005c50 <HAL_DMA_IRQHandler+0x1b4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d04a      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a5d      	ldr	r2, [pc, #372]	@ (8005c54 <HAL_DMA_IRQHandler+0x1b8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d045      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8005c58 <HAL_DMA_IRQHandler+0x1bc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d040      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a5a      	ldr	r2, [pc, #360]	@ (8005c5c <HAL_DMA_IRQHandler+0x1c0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d03b      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a59      	ldr	r2, [pc, #356]	@ (8005c60 <HAL_DMA_IRQHandler+0x1c4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d036      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a57      	ldr	r2, [pc, #348]	@ (8005c64 <HAL_DMA_IRQHandler+0x1c8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d031      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a56      	ldr	r2, [pc, #344]	@ (8005c68 <HAL_DMA_IRQHandler+0x1cc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d02c      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a54      	ldr	r2, [pc, #336]	@ (8005c6c <HAL_DMA_IRQHandler+0x1d0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d027      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a53      	ldr	r2, [pc, #332]	@ (8005c70 <HAL_DMA_IRQHandler+0x1d4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d022      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a51      	ldr	r2, [pc, #324]	@ (8005c74 <HAL_DMA_IRQHandler+0x1d8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01d      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a50      	ldr	r2, [pc, #320]	@ (8005c78 <HAL_DMA_IRQHandler+0x1dc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4e      	ldr	r2, [pc, #312]	@ (8005c7c <HAL_DMA_IRQHandler+0x1e0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8005c80 <HAL_DMA_IRQHandler+0x1e4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a4b      	ldr	r2, [pc, #300]	@ (8005c84 <HAL_DMA_IRQHandler+0x1e8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c88 <HAL_DMA_IRQHandler+0x1ec>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xd2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a48      	ldr	r2, [pc, #288]	@ (8005c8c <HAL_DMA_IRQHandler+0x1f0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_DMA_IRQHandler+0xd6>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_DMA_IRQHandler+0xd8>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 842b 	beq.w	80063d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2208      	movs	r2, #8
 8005b84:	409a      	lsls	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80a2 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2e      	ldr	r2, [pc, #184]	@ (8005c50 <HAL_DMA_IRQHandler+0x1b4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d04a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c54 <HAL_DMA_IRQHandler+0x1b8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d045      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c58 <HAL_DMA_IRQHandler+0x1bc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d040      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c5c <HAL_DMA_IRQHandler+0x1c0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d03b      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a28      	ldr	r2, [pc, #160]	@ (8005c60 <HAL_DMA_IRQHandler+0x1c4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d036      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a27      	ldr	r2, [pc, #156]	@ (8005c64 <HAL_DMA_IRQHandler+0x1c8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	@ (8005c68 <HAL_DMA_IRQHandler+0x1cc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02c      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a24      	ldr	r2, [pc, #144]	@ (8005c6c <HAL_DMA_IRQHandler+0x1d0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d027      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a22      	ldr	r2, [pc, #136]	@ (8005c70 <HAL_DMA_IRQHandler+0x1d4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d022      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <HAL_DMA_IRQHandler+0x1d8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d01d      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c78 <HAL_DMA_IRQHandler+0x1dc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	@ (8005c7c <HAL_DMA_IRQHandler+0x1e0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c80 <HAL_DMA_IRQHandler+0x1e4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00e      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <HAL_DMA_IRQHandler+0x1e8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <HAL_DMA_IRQHandler+0x1ec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x194>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <HAL_DMA_IRQHandler+0x1f0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d12f      	bne.n	8005c90 <HAL_DMA_IRQHandler+0x1f4>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bf14      	ite	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	2300      	moveq	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e02e      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x208>
 8005c46:	bf00      	nop
 8005c48:	24000010 	.word	0x24000010
 8005c4c:	1b4e81b5 	.word	0x1b4e81b5
 8005c50:	40020010 	.word	0x40020010
 8005c54:	40020028 	.word	0x40020028
 8005c58:	40020040 	.word	0x40020040
 8005c5c:	40020058 	.word	0x40020058
 8005c60:	40020070 	.word	0x40020070
 8005c64:	40020088 	.word	0x40020088
 8005c68:	400200a0 	.word	0x400200a0
 8005c6c:	400200b8 	.word	0x400200b8
 8005c70:	40020410 	.word	0x40020410
 8005c74:	40020428 	.word	0x40020428
 8005c78:	40020440 	.word	0x40020440
 8005c7c:	40020458 	.word	0x40020458
 8005c80:	40020470 	.word	0x40020470
 8005c84:	40020488 	.word	0x40020488
 8005c88:	400204a0 	.word	0x400204a0
 8005c8c:	400204b8 	.word	0x400204b8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf14      	ite	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	2300      	moveq	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	f043 0201 	orr.w	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d06e      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a69      	ldr	r2, [pc, #420]	@ (8005e94 <HAL_DMA_IRQHandler+0x3f8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a67      	ldr	r2, [pc, #412]	@ (8005e98 <HAL_DMA_IRQHandler+0x3fc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a66      	ldr	r2, [pc, #408]	@ (8005e9c <HAL_DMA_IRQHandler+0x400>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a64      	ldr	r2, [pc, #400]	@ (8005ea0 <HAL_DMA_IRQHandler+0x404>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a63      	ldr	r2, [pc, #396]	@ (8005ea4 <HAL_DMA_IRQHandler+0x408>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a61      	ldr	r2, [pc, #388]	@ (8005ea8 <HAL_DMA_IRQHandler+0x40c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a60      	ldr	r2, [pc, #384]	@ (8005eac <HAL_DMA_IRQHandler+0x410>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb0 <HAL_DMA_IRQHandler+0x414>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8005eb4 <HAL_DMA_IRQHandler+0x418>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5b      	ldr	r2, [pc, #364]	@ (8005eb8 <HAL_DMA_IRQHandler+0x41c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5a      	ldr	r2, [pc, #360]	@ (8005ebc <HAL_DMA_IRQHandler+0x420>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a58      	ldr	r2, [pc, #352]	@ (8005ec0 <HAL_DMA_IRQHandler+0x424>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a57      	ldr	r2, [pc, #348]	@ (8005ec4 <HAL_DMA_IRQHandler+0x428>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a55      	ldr	r2, [pc, #340]	@ (8005ec8 <HAL_DMA_IRQHandler+0x42c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a54      	ldr	r2, [pc, #336]	@ (8005ecc <HAL_DMA_IRQHandler+0x430>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x2ee>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a52      	ldr	r2, [pc, #328]	@ (8005ed0 <HAL_DMA_IRQHandler+0x434>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10a      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x304>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e003      	b.n	8005da8 <HAL_DMA_IRQHandler+0x30c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 808f 	beq.w	8005efc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e94 <HAL_DMA_IRQHandler+0x3f8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d04a      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <HAL_DMA_IRQHandler+0x3fc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d045      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <HAL_DMA_IRQHandler+0x400>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d040      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a27      	ldr	r2, [pc, #156]	@ (8005ea0 <HAL_DMA_IRQHandler+0x404>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d03b      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <HAL_DMA_IRQHandler+0x408>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d036      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <HAL_DMA_IRQHandler+0x40c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d031      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a23      	ldr	r2, [pc, #140]	@ (8005eac <HAL_DMA_IRQHandler+0x410>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d02c      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <HAL_DMA_IRQHandler+0x414>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d027      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a20      	ldr	r2, [pc, #128]	@ (8005eb4 <HAL_DMA_IRQHandler+0x418>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb8 <HAL_DMA_IRQHandler+0x41c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <HAL_DMA_IRQHandler+0x420>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <HAL_DMA_IRQHandler+0x424>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec4 <HAL_DMA_IRQHandler+0x428>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_DMA_IRQHandler+0x42c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <HAL_DMA_IRQHandler+0x430>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x3e2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <HAL_DMA_IRQHandler+0x434>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d12a      	bne.n	8005ed4 <HAL_DMA_IRQHandler+0x438>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e023      	b.n	8005edc <HAL_DMA_IRQHandler+0x440>
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00d      	beq.n	8005efc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2204      	movs	r2, #4
 8005eea:	409a      	lsls	r2, r3
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	2210      	movs	r2, #16
 8005f06:	409a      	lsls	r2, r3
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a6 	beq.w	800605e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a85      	ldr	r2, [pc, #532]	@ (800612c <HAL_DMA_IRQHandler+0x690>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d04a      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a83      	ldr	r2, [pc, #524]	@ (8006130 <HAL_DMA_IRQHandler+0x694>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d045      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a82      	ldr	r2, [pc, #520]	@ (8006134 <HAL_DMA_IRQHandler+0x698>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d040      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a80      	ldr	r2, [pc, #512]	@ (8006138 <HAL_DMA_IRQHandler+0x69c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d03b      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a7f      	ldr	r2, [pc, #508]	@ (800613c <HAL_DMA_IRQHandler+0x6a0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d036      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a7d      	ldr	r2, [pc, #500]	@ (8006140 <HAL_DMA_IRQHandler+0x6a4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d031      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7c      	ldr	r2, [pc, #496]	@ (8006144 <HAL_DMA_IRQHandler+0x6a8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d02c      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a7a      	ldr	r2, [pc, #488]	@ (8006148 <HAL_DMA_IRQHandler+0x6ac>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d027      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a79      	ldr	r2, [pc, #484]	@ (800614c <HAL_DMA_IRQHandler+0x6b0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a77      	ldr	r2, [pc, #476]	@ (8006150 <HAL_DMA_IRQHandler+0x6b4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01d      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a76      	ldr	r2, [pc, #472]	@ (8006154 <HAL_DMA_IRQHandler+0x6b8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a74      	ldr	r2, [pc, #464]	@ (8006158 <HAL_DMA_IRQHandler+0x6bc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a73      	ldr	r2, [pc, #460]	@ (800615c <HAL_DMA_IRQHandler+0x6c0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a71      	ldr	r2, [pc, #452]	@ (8006160 <HAL_DMA_IRQHandler+0x6c4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a70      	ldr	r2, [pc, #448]	@ (8006164 <HAL_DMA_IRQHandler+0x6c8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x516>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a6e      	ldr	r2, [pc, #440]	@ (8006168 <HAL_DMA_IRQHandler+0x6cc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10a      	bne.n	8005fc8 <HAL_DMA_IRQHandler+0x52c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e009      	b.n	8005fdc <HAL_DMA_IRQHandler+0x540>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d03e      	beq.n	800605e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	2210      	movs	r2, #16
 8005fea:	409a      	lsls	r2, r3
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d108      	bne.n	800601e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d024      	beq.n	800605e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
 800601c:	e01f      	b.n	800605e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01b      	beq.n	800605e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
 800602e:	e016      	b.n	800605e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0208 	bic.w	r2, r2, #8
 800604c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2220      	movs	r2, #32
 8006068:	409a      	lsls	r2, r3
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8110 	beq.w	8006294 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2c      	ldr	r2, [pc, #176]	@ (800612c <HAL_DMA_IRQHandler+0x690>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2b      	ldr	r2, [pc, #172]	@ (8006130 <HAL_DMA_IRQHandler+0x694>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a29      	ldr	r2, [pc, #164]	@ (8006134 <HAL_DMA_IRQHandler+0x698>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <HAL_DMA_IRQHandler+0x69c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a26      	ldr	r2, [pc, #152]	@ (800613c <HAL_DMA_IRQHandler+0x6a0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a25      	ldr	r2, [pc, #148]	@ (8006140 <HAL_DMA_IRQHandler+0x6a4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a23      	ldr	r2, [pc, #140]	@ (8006144 <HAL_DMA_IRQHandler+0x6a8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a22      	ldr	r2, [pc, #136]	@ (8006148 <HAL_DMA_IRQHandler+0x6ac>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a20      	ldr	r2, [pc, #128]	@ (800614c <HAL_DMA_IRQHandler+0x6b0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006150 <HAL_DMA_IRQHandler+0x6b4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <HAL_DMA_IRQHandler+0x6b8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <HAL_DMA_IRQHandler+0x6bc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1a      	ldr	r2, [pc, #104]	@ (800615c <HAL_DMA_IRQHandler+0x6c0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <HAL_DMA_IRQHandler+0x6c4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <HAL_DMA_IRQHandler+0x6c8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_IRQHandler+0x678>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a16      	ldr	r2, [pc, #88]	@ (8006168 <HAL_DMA_IRQHandler+0x6cc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d12b      	bne.n	800616c <HAL_DMA_IRQHandler+0x6d0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e02a      	b.n	8006180 <HAL_DMA_IRQHandler+0x6e4>
 800612a:	bf00      	nop
 800612c:	40020010 	.word	0x40020010
 8006130:	40020028 	.word	0x40020028
 8006134:	40020040 	.word	0x40020040
 8006138:	40020058 	.word	0x40020058
 800613c:	40020070 	.word	0x40020070
 8006140:	40020088 	.word	0x40020088
 8006144:	400200a0 	.word	0x400200a0
 8006148:	400200b8 	.word	0x400200b8
 800614c:	40020410 	.word	0x40020410
 8006150:	40020428 	.word	0x40020428
 8006154:	40020440 	.word	0x40020440
 8006158:	40020458 	.word	0x40020458
 800615c:	40020470 	.word	0x40020470
 8006160:	40020488 	.word	0x40020488
 8006164:	400204a0 	.word	0x400204a0
 8006168:	400204b8 	.word	0x400204b8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf14      	ite	ne
 800617a:	2301      	movne	r3, #1
 800617c:	2300      	moveq	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8087 	beq.w	8006294 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2220      	movs	r2, #32
 8006190:	409a      	lsls	r2, r3
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d139      	bne.n	8006216 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0216 	bic.w	r2, r2, #22
 80061b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_DMA_IRQHandler+0x736>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0208 	bic.w	r2, r2, #8
 80061e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	223f      	movs	r2, #63	@ 0x3f
 80061ec:	409a      	lsls	r2, r3
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 834a 	beq.w	80068a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
          }
          return;
 8006214:	e344      	b.n	80068a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d018      	beq.n	8006256 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d108      	bne.n	8006244 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02c      	beq.n	8006294 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
 8006242:	e027      	b.n	8006294 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d023      	beq.n	8006294 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 8006254:	e01e      	b.n	8006294 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0210 	bic.w	r2, r2, #16
 8006272:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8306 	beq.w	80068aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8088 	beq.w	80063bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a7a      	ldr	r2, [pc, #488]	@ (80064a4 <HAL_DMA_IRQHandler+0xa08>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d04a      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a79      	ldr	r2, [pc, #484]	@ (80064a8 <HAL_DMA_IRQHandler+0xa0c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d045      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a77      	ldr	r2, [pc, #476]	@ (80064ac <HAL_DMA_IRQHandler+0xa10>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d040      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a76      	ldr	r2, [pc, #472]	@ (80064b0 <HAL_DMA_IRQHandler+0xa14>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d03b      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a74      	ldr	r2, [pc, #464]	@ (80064b4 <HAL_DMA_IRQHandler+0xa18>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d036      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a73      	ldr	r2, [pc, #460]	@ (80064b8 <HAL_DMA_IRQHandler+0xa1c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d031      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a71      	ldr	r2, [pc, #452]	@ (80064bc <HAL_DMA_IRQHandler+0xa20>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d02c      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a70      	ldr	r2, [pc, #448]	@ (80064c0 <HAL_DMA_IRQHandler+0xa24>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d027      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6e      	ldr	r2, [pc, #440]	@ (80064c4 <HAL_DMA_IRQHandler+0xa28>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6d      	ldr	r2, [pc, #436]	@ (80064c8 <HAL_DMA_IRQHandler+0xa2c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d01d      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6b      	ldr	r2, [pc, #428]	@ (80064cc <HAL_DMA_IRQHandler+0xa30>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a6a      	ldr	r2, [pc, #424]	@ (80064d0 <HAL_DMA_IRQHandler+0xa34>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a68      	ldr	r2, [pc, #416]	@ (80064d4 <HAL_DMA_IRQHandler+0xa38>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a67      	ldr	r2, [pc, #412]	@ (80064d8 <HAL_DMA_IRQHandler+0xa3c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a65      	ldr	r2, [pc, #404]	@ (80064dc <HAL_DMA_IRQHandler+0xa40>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_DMA_IRQHandler+0x8b8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a64      	ldr	r2, [pc, #400]	@ (80064e0 <HAL_DMA_IRQHandler+0xa44>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d108      	bne.n	8006366 <HAL_DMA_IRQHandler+0x8ca>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0201 	bic.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e007      	b.n	8006376 <HAL_DMA_IRQHandler+0x8da>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637e:	429a      	cmp	r2, r3
 8006380:	d307      	bcc.n	8006392 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f2      	bne.n	8006376 <HAL_DMA_IRQHandler+0x8da>
 8006390:	e000      	b.n	8006394 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006392:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2203      	movs	r2, #3
 80063a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80063aa:	e003      	b.n	80063b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8272 	beq.w	80068aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	e26c      	b.n	80068aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a43      	ldr	r2, [pc, #268]	@ (80064e4 <HAL_DMA_IRQHandler+0xa48>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d022      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a42      	ldr	r2, [pc, #264]	@ (80064e8 <HAL_DMA_IRQHandler+0xa4c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d01d      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a40      	ldr	r2, [pc, #256]	@ (80064ec <HAL_DMA_IRQHandler+0xa50>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a3f      	ldr	r2, [pc, #252]	@ (80064f0 <HAL_DMA_IRQHandler+0xa54>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a3d      	ldr	r2, [pc, #244]	@ (80064f4 <HAL_DMA_IRQHandler+0xa58>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3c      	ldr	r2, [pc, #240]	@ (80064f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a3a      	ldr	r2, [pc, #232]	@ (80064fc <HAL_DMA_IRQHandler+0xa60>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_DMA_IRQHandler+0x984>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a39      	ldr	r2, [pc, #228]	@ (8006500 <HAL_DMA_IRQHandler+0xa64>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <HAL_DMA_IRQHandler+0x988>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_DMA_IRQHandler+0x98a>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 823f 	beq.w	80068aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2204      	movs	r2, #4
 800643e:	409a      	lsls	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80cd 	beq.w	80065e4 <HAL_DMA_IRQHandler+0xb48>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80c7 	beq.w	80065e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2204      	movs	r2, #4
 8006460:	409a      	lsls	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d049      	beq.n	8006504 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8210 	beq.w	80068a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800648c:	e20a      	b.n	80068a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8206 	beq.w	80068a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a0:	e200      	b.n	80068a4 <HAL_DMA_IRQHandler+0xe08>
 80064a2:	bf00      	nop
 80064a4:	40020010 	.word	0x40020010
 80064a8:	40020028 	.word	0x40020028
 80064ac:	40020040 	.word	0x40020040
 80064b0:	40020058 	.word	0x40020058
 80064b4:	40020070 	.word	0x40020070
 80064b8:	40020088 	.word	0x40020088
 80064bc:	400200a0 	.word	0x400200a0
 80064c0:	400200b8 	.word	0x400200b8
 80064c4:	40020410 	.word	0x40020410
 80064c8:	40020428 	.word	0x40020428
 80064cc:	40020440 	.word	0x40020440
 80064d0:	40020458 	.word	0x40020458
 80064d4:	40020470 	.word	0x40020470
 80064d8:	40020488 	.word	0x40020488
 80064dc:	400204a0 	.word	0x400204a0
 80064e0:	400204b8 	.word	0x400204b8
 80064e4:	58025408 	.word	0x58025408
 80064e8:	5802541c 	.word	0x5802541c
 80064ec:	58025430 	.word	0x58025430
 80064f0:	58025444 	.word	0x58025444
 80064f4:	58025458 	.word	0x58025458
 80064f8:	5802546c 	.word	0x5802546c
 80064fc:	58025480 	.word	0x58025480
 8006500:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d160      	bne.n	80065d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a7f      	ldr	r2, [pc, #508]	@ (8006710 <HAL_DMA_IRQHandler+0xc74>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d04a      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a7d      	ldr	r2, [pc, #500]	@ (8006714 <HAL_DMA_IRQHandler+0xc78>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d045      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a7c      	ldr	r2, [pc, #496]	@ (8006718 <HAL_DMA_IRQHandler+0xc7c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d040      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a7a      	ldr	r2, [pc, #488]	@ (800671c <HAL_DMA_IRQHandler+0xc80>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d03b      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a79      	ldr	r2, [pc, #484]	@ (8006720 <HAL_DMA_IRQHandler+0xc84>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d036      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a77      	ldr	r2, [pc, #476]	@ (8006724 <HAL_DMA_IRQHandler+0xc88>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d031      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a76      	ldr	r2, [pc, #472]	@ (8006728 <HAL_DMA_IRQHandler+0xc8c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d02c      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a74      	ldr	r2, [pc, #464]	@ (800672c <HAL_DMA_IRQHandler+0xc90>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a73      	ldr	r2, [pc, #460]	@ (8006730 <HAL_DMA_IRQHandler+0xc94>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a71      	ldr	r2, [pc, #452]	@ (8006734 <HAL_DMA_IRQHandler+0xc98>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a70      	ldr	r2, [pc, #448]	@ (8006738 <HAL_DMA_IRQHandler+0xc9c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6e      	ldr	r2, [pc, #440]	@ (800673c <HAL_DMA_IRQHandler+0xca0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6d      	ldr	r2, [pc, #436]	@ (8006740 <HAL_DMA_IRQHandler+0xca4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6b      	ldr	r2, [pc, #428]	@ (8006744 <HAL_DMA_IRQHandler+0xca8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6a      	ldr	r2, [pc, #424]	@ (8006748 <HAL_DMA_IRQHandler+0xcac>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_DMA_IRQHandler+0xb12>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a68      	ldr	r2, [pc, #416]	@ (800674c <HAL_DMA_IRQHandler+0xcb0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d108      	bne.n	80065c0 <HAL_DMA_IRQHandler+0xb24>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0208 	bic.w	r2, r2, #8
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e007      	b.n	80065d0 <HAL_DMA_IRQHandler+0xb34>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0204 	bic.w	r2, r2, #4
 80065ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8165 	beq.w	80068a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e2:	e15f      	b.n	80068a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2202      	movs	r2, #2
 80065ee:	409a      	lsls	r2, r3
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80c5 	beq.w	8006784 <HAL_DMA_IRQHandler+0xce8>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80bf 	beq.w	8006784 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	2202      	movs	r2, #2
 8006610:	409a      	lsls	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d018      	beq.n	8006652 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 813a 	beq.w	80068a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800663c:	e134      	b.n	80068a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8130 	beq.w	80068a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006650:	e12a      	b.n	80068a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 8089 	bne.w	8006770 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2b      	ldr	r2, [pc, #172]	@ (8006710 <HAL_DMA_IRQHandler+0xc74>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d04a      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a29      	ldr	r2, [pc, #164]	@ (8006714 <HAL_DMA_IRQHandler+0xc78>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d045      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a28      	ldr	r2, [pc, #160]	@ (8006718 <HAL_DMA_IRQHandler+0xc7c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d040      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a26      	ldr	r2, [pc, #152]	@ (800671c <HAL_DMA_IRQHandler+0xc80>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d03b      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a25      	ldr	r2, [pc, #148]	@ (8006720 <HAL_DMA_IRQHandler+0xc84>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d036      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a23      	ldr	r2, [pc, #140]	@ (8006724 <HAL_DMA_IRQHandler+0xc88>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d031      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <HAL_DMA_IRQHandler+0xc8c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d02c      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a20      	ldr	r2, [pc, #128]	@ (800672c <HAL_DMA_IRQHandler+0xc90>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d027      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <HAL_DMA_IRQHandler+0xc94>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006734 <HAL_DMA_IRQHandler+0xc98>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01d      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <HAL_DMA_IRQHandler+0xc9c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <HAL_DMA_IRQHandler+0xca0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <HAL_DMA_IRQHandler+0xca4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a17      	ldr	r2, [pc, #92]	@ (8006744 <HAL_DMA_IRQHandler+0xca8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <HAL_DMA_IRQHandler+0xcac>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_DMA_IRQHandler+0xc62>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a14      	ldr	r2, [pc, #80]	@ (800674c <HAL_DMA_IRQHandler+0xcb0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d128      	bne.n	8006750 <HAL_DMA_IRQHandler+0xcb4>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0214 	bic.w	r2, r2, #20
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e027      	b.n	8006760 <HAL_DMA_IRQHandler+0xcc4>
 8006710:	40020010 	.word	0x40020010
 8006714:	40020028 	.word	0x40020028
 8006718:	40020040 	.word	0x40020040
 800671c:	40020058 	.word	0x40020058
 8006720:	40020070 	.word	0x40020070
 8006724:	40020088 	.word	0x40020088
 8006728:	400200a0 	.word	0x400200a0
 800672c:	400200b8 	.word	0x400200b8
 8006730:	40020410 	.word	0x40020410
 8006734:	40020428 	.word	0x40020428
 8006738:	40020440 	.word	0x40020440
 800673c:	40020458 	.word	0x40020458
 8006740:	40020470 	.word	0x40020470
 8006744:	40020488 	.word	0x40020488
 8006748:	400204a0 	.word	0x400204a0
 800674c:	400204b8 	.word	0x400204b8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 020a 	bic.w	r2, r2, #10
 800675e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8097 	beq.w	80068a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006782:	e091      	b.n	80068a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2208      	movs	r2, #8
 800678e:	409a      	lsls	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8088 	beq.w	80068aa <HAL_DMA_IRQHandler+0xe0e>
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8082 	beq.w	80068aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a41      	ldr	r2, [pc, #260]	@ (80068b0 <HAL_DMA_IRQHandler+0xe14>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a3f      	ldr	r2, [pc, #252]	@ (80068b4 <HAL_DMA_IRQHandler+0xe18>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a3e      	ldr	r2, [pc, #248]	@ (80068b8 <HAL_DMA_IRQHandler+0xe1c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a3c      	ldr	r2, [pc, #240]	@ (80068bc <HAL_DMA_IRQHandler+0xe20>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a3b      	ldr	r2, [pc, #236]	@ (80068c0 <HAL_DMA_IRQHandler+0xe24>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a39      	ldr	r2, [pc, #228]	@ (80068c4 <HAL_DMA_IRQHandler+0xe28>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a38      	ldr	r2, [pc, #224]	@ (80068c8 <HAL_DMA_IRQHandler+0xe2c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a36      	ldr	r2, [pc, #216]	@ (80068cc <HAL_DMA_IRQHandler+0xe30>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a35      	ldr	r2, [pc, #212]	@ (80068d0 <HAL_DMA_IRQHandler+0xe34>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a33      	ldr	r2, [pc, #204]	@ (80068d4 <HAL_DMA_IRQHandler+0xe38>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a32      	ldr	r2, [pc, #200]	@ (80068d8 <HAL_DMA_IRQHandler+0xe3c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a30      	ldr	r2, [pc, #192]	@ (80068dc <HAL_DMA_IRQHandler+0xe40>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2f      	ldr	r2, [pc, #188]	@ (80068e0 <HAL_DMA_IRQHandler+0xe44>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a2d      	ldr	r2, [pc, #180]	@ (80068e4 <HAL_DMA_IRQHandler+0xe48>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a2c      	ldr	r2, [pc, #176]	@ (80068e8 <HAL_DMA_IRQHandler+0xe4c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_DMA_IRQHandler+0xdaa>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a2a      	ldr	r2, [pc, #168]	@ (80068ec <HAL_DMA_IRQHandler+0xe50>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <HAL_DMA_IRQHandler+0xdbc>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 021c 	bic.w	r2, r2, #28
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e007      	b.n	8006868 <HAL_DMA_IRQHandler+0xdcc>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 020e 	bic.w	r2, r2, #14
 8006866:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2201      	movs	r2, #1
 8006872:	409a      	lsls	r2, r3
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	e004      	b.n	80068aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068a0:	bf00      	nop
 80068a2:	e002      	b.n	80068aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a4:	bf00      	nop
 80068a6:	e000      	b.n	80068aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068aa:	3728      	adds	r7, #40	@ 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40020010 	.word	0x40020010
 80068b4:	40020028 	.word	0x40020028
 80068b8:	40020040 	.word	0x40020040
 80068bc:	40020058 	.word	0x40020058
 80068c0:	40020070 	.word	0x40020070
 80068c4:	40020088 	.word	0x40020088
 80068c8:	400200a0 	.word	0x400200a0
 80068cc:	400200b8 	.word	0x400200b8
 80068d0:	40020410 	.word	0x40020410
 80068d4:	40020428 	.word	0x40020428
 80068d8:	40020440 	.word	0x40020440
 80068dc:	40020458 	.word	0x40020458
 80068e0:	40020470 	.word	0x40020470
 80068e4:	40020488 	.word	0x40020488
 80068e8:	400204a0 	.word	0x400204a0
 80068ec:	400204b8 	.word	0x400204b8

080068f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006902:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006908:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b0c <DMA_SetConfig+0x21c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d072      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a7d      	ldr	r2, [pc, #500]	@ (8006b10 <DMA_SetConfig+0x220>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d06d      	beq.n	80069fa <DMA_SetConfig+0x10a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a7c      	ldr	r2, [pc, #496]	@ (8006b14 <DMA_SetConfig+0x224>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d068      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a7a      	ldr	r2, [pc, #488]	@ (8006b18 <DMA_SetConfig+0x228>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d063      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a79      	ldr	r2, [pc, #484]	@ (8006b1c <DMA_SetConfig+0x22c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d05e      	beq.n	80069fa <DMA_SetConfig+0x10a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a77      	ldr	r2, [pc, #476]	@ (8006b20 <DMA_SetConfig+0x230>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d059      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a76      	ldr	r2, [pc, #472]	@ (8006b24 <DMA_SetConfig+0x234>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d054      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a74      	ldr	r2, [pc, #464]	@ (8006b28 <DMA_SetConfig+0x238>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d04f      	beq.n	80069fa <DMA_SetConfig+0x10a>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a73      	ldr	r2, [pc, #460]	@ (8006b2c <DMA_SetConfig+0x23c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d04a      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a71      	ldr	r2, [pc, #452]	@ (8006b30 <DMA_SetConfig+0x240>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d045      	beq.n	80069fa <DMA_SetConfig+0x10a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a70      	ldr	r2, [pc, #448]	@ (8006b34 <DMA_SetConfig+0x244>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d040      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b38 <DMA_SetConfig+0x248>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d03b      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6d      	ldr	r2, [pc, #436]	@ (8006b3c <DMA_SetConfig+0x24c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d036      	beq.n	80069fa <DMA_SetConfig+0x10a>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a6b      	ldr	r2, [pc, #428]	@ (8006b40 <DMA_SetConfig+0x250>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d031      	beq.n	80069fa <DMA_SetConfig+0x10a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6a      	ldr	r2, [pc, #424]	@ (8006b44 <DMA_SetConfig+0x254>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d02c      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a68      	ldr	r2, [pc, #416]	@ (8006b48 <DMA_SetConfig+0x258>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d027      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a67      	ldr	r2, [pc, #412]	@ (8006b4c <DMA_SetConfig+0x25c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a65      	ldr	r2, [pc, #404]	@ (8006b50 <DMA_SetConfig+0x260>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a64      	ldr	r2, [pc, #400]	@ (8006b54 <DMA_SetConfig+0x264>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a62      	ldr	r2, [pc, #392]	@ (8006b58 <DMA_SetConfig+0x268>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a61      	ldr	r2, [pc, #388]	@ (8006b5c <DMA_SetConfig+0x26c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006b60 <DMA_SetConfig+0x270>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006b64 <DMA_SetConfig+0x274>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <DMA_SetConfig+0x10a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006b68 <DMA_SetConfig+0x278>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <DMA_SetConfig+0x10e>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <DMA_SetConfig+0x110>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a39      	ldr	r2, [pc, #228]	@ (8006b0c <DMA_SetConfig+0x21c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d04a      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a38      	ldr	r2, [pc, #224]	@ (8006b10 <DMA_SetConfig+0x220>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d045      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a36      	ldr	r2, [pc, #216]	@ (8006b14 <DMA_SetConfig+0x224>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d040      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a35      	ldr	r2, [pc, #212]	@ (8006b18 <DMA_SetConfig+0x228>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d03b      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a33      	ldr	r2, [pc, #204]	@ (8006b1c <DMA_SetConfig+0x22c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d036      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a32      	ldr	r2, [pc, #200]	@ (8006b20 <DMA_SetConfig+0x230>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d031      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a30      	ldr	r2, [pc, #192]	@ (8006b24 <DMA_SetConfig+0x234>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d02c      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b28 <DMA_SetConfig+0x238>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d027      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2d      	ldr	r2, [pc, #180]	@ (8006b2c <DMA_SetConfig+0x23c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b30 <DMA_SetConfig+0x240>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2a      	ldr	r2, [pc, #168]	@ (8006b34 <DMA_SetConfig+0x244>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a29      	ldr	r2, [pc, #164]	@ (8006b38 <DMA_SetConfig+0x248>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a27      	ldr	r2, [pc, #156]	@ (8006b3c <DMA_SetConfig+0x24c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a26      	ldr	r2, [pc, #152]	@ (8006b40 <DMA_SetConfig+0x250>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a24      	ldr	r2, [pc, #144]	@ (8006b44 <DMA_SetConfig+0x254>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <DMA_SetConfig+0x1d0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a23      	ldr	r2, [pc, #140]	@ (8006b48 <DMA_SetConfig+0x258>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <DMA_SetConfig+0x1d4>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <DMA_SetConfig+0x1d6>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d059      	beq.n	8006b7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	223f      	movs	r2, #63	@ 0x3f
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d138      	bne.n	8006b6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b0a:	e086      	b.n	8006c1a <DMA_SetConfig+0x32a>
 8006b0c:	40020010 	.word	0x40020010
 8006b10:	40020028 	.word	0x40020028
 8006b14:	40020040 	.word	0x40020040
 8006b18:	40020058 	.word	0x40020058
 8006b1c:	40020070 	.word	0x40020070
 8006b20:	40020088 	.word	0x40020088
 8006b24:	400200a0 	.word	0x400200a0
 8006b28:	400200b8 	.word	0x400200b8
 8006b2c:	40020410 	.word	0x40020410
 8006b30:	40020428 	.word	0x40020428
 8006b34:	40020440 	.word	0x40020440
 8006b38:	40020458 	.word	0x40020458
 8006b3c:	40020470 	.word	0x40020470
 8006b40:	40020488 	.word	0x40020488
 8006b44:	400204a0 	.word	0x400204a0
 8006b48:	400204b8 	.word	0x400204b8
 8006b4c:	58025408 	.word	0x58025408
 8006b50:	5802541c 	.word	0x5802541c
 8006b54:	58025430 	.word	0x58025430
 8006b58:	58025444 	.word	0x58025444
 8006b5c:	58025458 	.word	0x58025458
 8006b60:	5802546c 	.word	0x5802546c
 8006b64:	58025480 	.word	0x58025480
 8006b68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	60da      	str	r2, [r3, #12]
}
 8006b7c:	e04d      	b.n	8006c1a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a29      	ldr	r2, [pc, #164]	@ (8006c28 <DMA_SetConfig+0x338>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a27      	ldr	r2, [pc, #156]	@ (8006c2c <DMA_SetConfig+0x33c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01d      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a26      	ldr	r2, [pc, #152]	@ (8006c30 <DMA_SetConfig+0x340>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a24      	ldr	r2, [pc, #144]	@ (8006c34 <DMA_SetConfig+0x344>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a23      	ldr	r2, [pc, #140]	@ (8006c38 <DMA_SetConfig+0x348>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <DMA_SetConfig+0x34c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a20      	ldr	r2, [pc, #128]	@ (8006c40 <DMA_SetConfig+0x350>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <DMA_SetConfig+0x2de>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c44 <DMA_SetConfig+0x354>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d101      	bne.n	8006bd2 <DMA_SetConfig+0x2e2>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <DMA_SetConfig+0x2e4>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d020      	beq.n	8006c1a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d108      	bne.n	8006c0a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	60da      	str	r2, [r3, #12]
}
 8006c08:	e007      	b.n	8006c1a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	60da      	str	r2, [r3, #12]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	58025408 	.word	0x58025408
 8006c2c:	5802541c 	.word	0x5802541c
 8006c30:	58025430 	.word	0x58025430
 8006c34:	58025444 	.word	0x58025444
 8006c38:	58025458 	.word	0x58025458
 8006c3c:	5802546c 	.word	0x5802546c
 8006c40:	58025480 	.word	0x58025480
 8006c44:	58025494 	.word	0x58025494

08006c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a42      	ldr	r2, [pc, #264]	@ (8006d60 <DMA_CalcBaseAndBitshift+0x118>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d04a      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a41      	ldr	r2, [pc, #260]	@ (8006d64 <DMA_CalcBaseAndBitshift+0x11c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d045      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3f      	ldr	r2, [pc, #252]	@ (8006d68 <DMA_CalcBaseAndBitshift+0x120>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d040      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a3e      	ldr	r2, [pc, #248]	@ (8006d6c <DMA_CalcBaseAndBitshift+0x124>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d03b      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d70 <DMA_CalcBaseAndBitshift+0x128>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d036      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a3b      	ldr	r2, [pc, #236]	@ (8006d74 <DMA_CalcBaseAndBitshift+0x12c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d031      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a39      	ldr	r2, [pc, #228]	@ (8006d78 <DMA_CalcBaseAndBitshift+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d02c      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a38      	ldr	r2, [pc, #224]	@ (8006d7c <DMA_CalcBaseAndBitshift+0x134>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d027      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a36      	ldr	r2, [pc, #216]	@ (8006d80 <DMA_CalcBaseAndBitshift+0x138>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d022      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a35      	ldr	r2, [pc, #212]	@ (8006d84 <DMA_CalcBaseAndBitshift+0x13c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d01d      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a33      	ldr	r2, [pc, #204]	@ (8006d88 <DMA_CalcBaseAndBitshift+0x140>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d018      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a32      	ldr	r2, [pc, #200]	@ (8006d8c <DMA_CalcBaseAndBitshift+0x144>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a30      	ldr	r2, [pc, #192]	@ (8006d90 <DMA_CalcBaseAndBitshift+0x148>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00e      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8006d94 <DMA_CalcBaseAndBitshift+0x14c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d98 <DMA_CalcBaseAndBitshift+0x150>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d004      	beq.n	8006cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2c      	ldr	r2, [pc, #176]	@ (8006d9c <DMA_CalcBaseAndBitshift+0x154>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d101      	bne.n	8006cf4 <DMA_CalcBaseAndBitshift+0xac>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <DMA_CalcBaseAndBitshift+0xae>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d024      	beq.n	8006d44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	3b10      	subs	r3, #16
 8006d02:	4a27      	ldr	r2, [pc, #156]	@ (8006da0 <DMA_CalcBaseAndBitshift+0x158>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d14:	5cd3      	ldrb	r3, [r2, r3]
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d908      	bls.n	8006d34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d32:	e00d      	b.n	8006d50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d42:	e005      	b.n	8006d50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40020010 	.word	0x40020010
 8006d64:	40020028 	.word	0x40020028
 8006d68:	40020040 	.word	0x40020040
 8006d6c:	40020058 	.word	0x40020058
 8006d70:	40020070 	.word	0x40020070
 8006d74:	40020088 	.word	0x40020088
 8006d78:	400200a0 	.word	0x400200a0
 8006d7c:	400200b8 	.word	0x400200b8
 8006d80:	40020410 	.word	0x40020410
 8006d84:	40020428 	.word	0x40020428
 8006d88:	40020440 	.word	0x40020440
 8006d8c:	40020458 	.word	0x40020458
 8006d90:	40020470 	.word	0x40020470
 8006d94:	40020488 	.word	0x40020488
 8006d98:	400204a0 	.word	0x400204a0
 8006d9c:	400204b8 	.word	0x400204b8
 8006da0:	aaaaaaab 	.word	0xaaaaaaab
 8006da4:	08010524 	.word	0x08010524
 8006da8:	fffffc00 	.word	0xfffffc00

08006dac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d120      	bne.n	8006e02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d858      	bhi.n	8006e7a <DMA_CheckFifoParam+0xce>
 8006dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <DMA_CheckFifoParam+0x24>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006df3 	.word	0x08006df3
 8006dd8:	08006de1 	.word	0x08006de1
 8006ddc:	08006e7b 	.word	0x08006e7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d048      	beq.n	8006e7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006df0:	e045      	b.n	8006e7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006dfa:	d142      	bne.n	8006e82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e00:	e03f      	b.n	8006e82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0a:	d123      	bne.n	8006e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d838      	bhi.n	8006e86 <DMA_CheckFifoParam+0xda>
 8006e14:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <DMA_CheckFifoParam+0x70>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e2d 	.word	0x08006e2d
 8006e20:	08006e33 	.word	0x08006e33
 8006e24:	08006e2d 	.word	0x08006e2d
 8006e28:	08006e45 	.word	0x08006e45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
        break;
 8006e30:	e030      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d025      	beq.n	8006e8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e42:	e022      	b.n	8006e8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e4c:	d11f      	bne.n	8006e8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e52:	e01c      	b.n	8006e8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d902      	bls.n	8006e62 <DMA_CheckFifoParam+0xb6>
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d003      	beq.n	8006e68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e60:	e018      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
        break;
 8006e66:	e015      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
    break;
 8006e78:	e00b      	b.n	8006e92 <DMA_CheckFifoParam+0xe6>
        break;
 8006e7a:	bf00      	nop
 8006e7c:	e00a      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        break;
 8006e7e:	bf00      	nop
 8006e80:	e008      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        break;
 8006e82:	bf00      	nop
 8006e84:	e006      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        break;
 8006e86:	bf00      	nop
 8006e88:	e004      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
    break;
 8006e92:	bf00      	nop
    }
  }

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a38      	ldr	r2, [pc, #224]	@ (8006f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a36      	ldr	r2, [pc, #216]	@ (8006f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d01d      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a35      	ldr	r2, [pc, #212]	@ (8006fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a33      	ldr	r2, [pc, #204]	@ (8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a32      	ldr	r2, [pc, #200]	@ (8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a30      	ldr	r2, [pc, #192]	@ (8006fac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d101      	bne.n	8006f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f06:	2300      	movs	r3, #0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01a      	beq.n	8006f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	3b08      	subs	r3, #8
 8006f14:	4a28      	ldr	r2, [pc, #160]	@ (8006fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4b26      	ldr	r3, [pc, #152]	@ (8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a24      	ldr	r2, [pc, #144]	@ (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2201      	movs	r2, #1
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f40:	e024      	b.n	8006f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3b10      	subs	r3, #16
 8006f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d806      	bhi.n	8006f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d902      	bls.n	8006f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3308      	adds	r3, #8
 8006f68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4b18      	ldr	r3, [pc, #96]	@ (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a16      	ldr	r2, [pc, #88]	@ (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006f7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f003 031f 	and.w	r3, r3, #31
 8006f84:	2201      	movs	r2, #1
 8006f86:	409a      	lsls	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	58025408 	.word	0x58025408
 8006f9c:	5802541c 	.word	0x5802541c
 8006fa0:	58025430 	.word	0x58025430
 8006fa4:	58025444 	.word	0x58025444
 8006fa8:	58025458 	.word	0x58025458
 8006fac:	5802546c 	.word	0x5802546c
 8006fb0:	58025480 	.word	0x58025480
 8006fb4:	58025494 	.word	0x58025494
 8006fb8:	cccccccd 	.word	0xcccccccd
 8006fbc:	16009600 	.word	0x16009600
 8006fc0:	58025880 	.word	0x58025880
 8006fc4:	aaaaaaab 	.word	0xaaaaaaab
 8006fc8:	400204b8 	.word	0x400204b8
 8006fcc:	4002040f 	.word	0x4002040f
 8006fd0:	10008200 	.word	0x10008200
 8006fd4:	40020880 	.word	0x40020880

08006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d04a      	beq.n	8007084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d847      	bhi.n	8007084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	@ (8007090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d022      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a24      	ldr	r2, [pc, #144]	@ (8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d01d      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a22      	ldr	r2, [pc, #136]	@ (8007098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d018      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a21      	ldr	r2, [pc, #132]	@ (800709c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1f      	ldr	r2, [pc, #124]	@ (80070a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1e      	ldr	r2, [pc, #120]	@ (80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1c      	ldr	r2, [pc, #112]	@ (80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4b17      	ldr	r3, [pc, #92]	@ (80070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a15      	ldr	r2, [pc, #84]	@ (80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007060:	671a      	str	r2, [r3, #112]	@ 0x70
 8007062:	e009      	b.n	8007078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	461a      	mov	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007076:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3b01      	subs	r3, #1
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	58025408 	.word	0x58025408
 8007094:	5802541c 	.word	0x5802541c
 8007098:	58025430 	.word	0x58025430
 800709c:	58025444 	.word	0x58025444
 80070a0:	58025458 	.word	0x58025458
 80070a4:	5802546c 	.word	0x5802546c
 80070a8:	58025480 	.word	0x58025480
 80070ac:	58025494 	.word	0x58025494
 80070b0:	1600963f 	.word	0x1600963f
 80070b4:	58025940 	.word	0x58025940
 80070b8:	1000823f 	.word	0x1000823f
 80070bc:	40020940 	.word	0x40020940

080070c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	@ 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070ce:	4b86      	ldr	r3, [pc, #536]	@ (80072e8 <HAL_GPIO_Init+0x228>)
 80070d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070d2:	e18c      	b.n	80073ee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	2101      	movs	r1, #1
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	fa01 f303 	lsl.w	r3, r1, r3
 80070e0:	4013      	ands	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 817e 	beq.w	80073e8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d005      	beq.n	8007104 <HAL_GPIO_Init+0x44>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d130      	bne.n	8007166 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	2203      	movs	r2, #3
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	43db      	mvns	r3, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4013      	ands	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4313      	orrs	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800713a:	2201      	movs	r2, #1
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	fa02 f303 	lsl.w	r3, r2, r3
 8007142:	43db      	mvns	r3, r3
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4013      	ands	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	f003 0201 	and.w	r2, r3, #1
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4313      	orrs	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	2b03      	cmp	r3, #3
 8007170:	d017      	beq.n	80071a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	2203      	movs	r2, #3
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43db      	mvns	r3, r3
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4013      	ands	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	fa02 f303 	lsl.w	r3, r2, r3
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	4313      	orrs	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d123      	bne.n	80071f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	08da      	lsrs	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3208      	adds	r2, #8
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	220f      	movs	r2, #15
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	08da      	lsrs	r2, r3, #3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3208      	adds	r2, #8
 80071f0:	69b9      	ldr	r1, [r7, #24]
 80071f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	2203      	movs	r2, #3
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4013      	ands	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f003 0203 	and.w	r2, r3, #3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	4313      	orrs	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80d8 	beq.w	80073e8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007238:	4b2c      	ldr	r3, [pc, #176]	@ (80072ec <HAL_GPIO_Init+0x22c>)
 800723a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800723e:	4a2b      	ldr	r2, [pc, #172]	@ (80072ec <HAL_GPIO_Init+0x22c>)
 8007240:	f043 0302 	orr.w	r3, r3, #2
 8007244:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007248:	4b28      	ldr	r3, [pc, #160]	@ (80072ec <HAL_GPIO_Init+0x22c>)
 800724a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007256:	4a26      	ldr	r2, [pc, #152]	@ (80072f0 <HAL_GPIO_Init+0x230>)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	3302      	adds	r3, #2
 800725e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	220f      	movs	r2, #15
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	43db      	mvns	r3, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	4013      	ands	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a1d      	ldr	r2, [pc, #116]	@ (80072f4 <HAL_GPIO_Init+0x234>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04a      	beq.n	8007318 <HAL_GPIO_Init+0x258>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <HAL_GPIO_Init+0x238>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d02b      	beq.n	80072e2 <HAL_GPIO_Init+0x222>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <HAL_GPIO_Init+0x23c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d025      	beq.n	80072de <HAL_GPIO_Init+0x21e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a1a      	ldr	r2, [pc, #104]	@ (8007300 <HAL_GPIO_Init+0x240>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01f      	beq.n	80072da <HAL_GPIO_Init+0x21a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a19      	ldr	r2, [pc, #100]	@ (8007304 <HAL_GPIO_Init+0x244>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d019      	beq.n	80072d6 <HAL_GPIO_Init+0x216>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a18      	ldr	r2, [pc, #96]	@ (8007308 <HAL_GPIO_Init+0x248>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <HAL_GPIO_Init+0x212>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a17      	ldr	r2, [pc, #92]	@ (800730c <HAL_GPIO_Init+0x24c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00d      	beq.n	80072ce <HAL_GPIO_Init+0x20e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a16      	ldr	r2, [pc, #88]	@ (8007310 <HAL_GPIO_Init+0x250>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d007      	beq.n	80072ca <HAL_GPIO_Init+0x20a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <HAL_GPIO_Init+0x254>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <HAL_GPIO_Init+0x206>
 80072c2:	2309      	movs	r3, #9
 80072c4:	e029      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072c6:	230a      	movs	r3, #10
 80072c8:	e027      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072ca:	2307      	movs	r3, #7
 80072cc:	e025      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072ce:	2306      	movs	r3, #6
 80072d0:	e023      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072d2:	2305      	movs	r3, #5
 80072d4:	e021      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072d6:	2304      	movs	r3, #4
 80072d8:	e01f      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072da:	2303      	movs	r3, #3
 80072dc:	e01d      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072de:	2302      	movs	r3, #2
 80072e0:	e01b      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e019      	b.n	800731a <HAL_GPIO_Init+0x25a>
 80072e6:	bf00      	nop
 80072e8:	58000080 	.word	0x58000080
 80072ec:	58024400 	.word	0x58024400
 80072f0:	58000400 	.word	0x58000400
 80072f4:	58020000 	.word	0x58020000
 80072f8:	58020400 	.word	0x58020400
 80072fc:	58020800 	.word	0x58020800
 8007300:	58020c00 	.word	0x58020c00
 8007304:	58021000 	.word	0x58021000
 8007308:	58021400 	.word	0x58021400
 800730c:	58021800 	.word	0x58021800
 8007310:	58021c00 	.word	0x58021c00
 8007314:	58022400 	.word	0x58022400
 8007318:	2300      	movs	r3, #0
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	f002 0203 	and.w	r2, r2, #3
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	4093      	lsls	r3, r2
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	4313      	orrs	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800732a:	4938      	ldr	r1, [pc, #224]	@ (800740c <HAL_GPIO_Init+0x34c>)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	089b      	lsrs	r3, r3, #2
 8007330:	3302      	adds	r3, #2
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	43db      	mvns	r3, r3
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	4013      	ands	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800735e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	43db      	mvns	r3, r3
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4013      	ands	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800738c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	43db      	mvns	r3, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4013      	ands	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	43db      	mvns	r3, r3
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4013      	ands	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	3301      	adds	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f ae6b 	bne.w	80070d4 <HAL_GPIO_Init+0x14>
  }
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3724      	adds	r7, #36	@ 0x24
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	58000400 	.word	0x58000400

08007410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	807b      	strh	r3, [r7, #2]
 800741c:	4613      	mov	r3, r2
 800741e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007420:	787b      	ldrb	r3, [r7, #1]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800742c:	e003      	b.n	8007436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800742e:	887b      	ldrh	r3, [r7, #2]
 8007430:	041a      	lsls	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007454:	887a      	ldrh	r2, [r7, #2]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4013      	ands	r3, r2
 800745a:	041a      	lsls	r2, r3, #16
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	43d9      	mvns	r1, r3
 8007460:	887b      	ldrh	r3, [r7, #2]
 8007462:	400b      	ands	r3, r1
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	619a      	str	r2, [r3, #24]
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e08b      	b.n	80075a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7f9 fc62 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	@ 0x24
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d107      	bne.n	80074f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e006      	b.n	8007500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d108      	bne.n	800751a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007516:	605a      	str	r2, [r3, #4]
 8007518:	e007      	b.n	800752a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b1d      	ldr	r3, [pc, #116]	@ (80075ac <HAL_I2C_Init+0x134>)
 8007536:	430b      	orrs	r3, r1
 8007538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69d9      	ldr	r1, [r3, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	02008000 	.word	0x02008000

080075b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	461a      	mov	r2, r3
 80075bc:	460b      	mov	r3, r1
 80075be:	817b      	strh	r3, [r7, #10]
 80075c0:	4613      	mov	r3, r2
 80075c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	f040 80fd 	bne.w	80077cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_I2C_Master_Transmit+0x30>
 80075dc:	2302      	movs	r3, #2
 80075de:	e0f6      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075e8:	f7fa fc36 	bl	8001e58 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2319      	movs	r3, #25
 80075f4:	2201      	movs	r2, #1
 80075f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f914 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e0e1      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2221      	movs	r2, #33	@ 0x21
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2210      	movs	r2, #16
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	893a      	ldrh	r2, [r7, #8]
 800762a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007636:	b29b      	uxth	r3, r3
 8007638:	2bff      	cmp	r3, #255	@ 0xff
 800763a:	d906      	bls.n	800764a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22ff      	movs	r2, #255	@ 0xff
 8007640:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e007      	b.n	800765a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007658:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d024      	beq.n	80076ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	781a      	ldrb	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007696:	b2db      	uxtb	r3, r3
 8007698:	3301      	adds	r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	8979      	ldrh	r1, [r7, #10]
 800769e:	4b4e      	ldr	r3, [pc, #312]	@ (80077d8 <HAL_I2C_Master_Transmit+0x228>)
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fa83 	bl	8007bb0 <I2C_TransferConfig>
 80076aa:	e066      	b.n	800777a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	8979      	ldrh	r1, [r7, #10]
 80076b4:	4b48      	ldr	r3, [pc, #288]	@ (80077d8 <HAL_I2C_Master_Transmit+0x228>)
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fa78 	bl	8007bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076c0:	e05b      	b.n	800777a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	6a39      	ldr	r1, [r7, #32]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f907 	bl	80078da <I2C_WaitOnTXISFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e07b      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d034      	beq.n	800777a <HAL_I2C_Master_Transmit+0x1ca>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007714:	2b00      	cmp	r3, #0
 8007716:	d130      	bne.n	800777a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2200      	movs	r2, #0
 8007720:	2180      	movs	r1, #128	@ 0x80
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f880 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e04d      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	2bff      	cmp	r3, #255	@ 0xff
 800773a:	d90e      	bls.n	800775a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	22ff      	movs	r2, #255	@ 0xff
 8007740:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007746:	b2da      	uxtb	r2, r3
 8007748:	8979      	ldrh	r1, [r7, #10]
 800774a:	2300      	movs	r3, #0
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa2c 	bl	8007bb0 <I2C_TransferConfig>
 8007758:	e00f      	b.n	800777a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007768:	b2da      	uxtb	r2, r3
 800776a:	8979      	ldrh	r1, [r7, #10]
 800776c:	2300      	movs	r3, #0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fa1b 	bl	8007bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d19e      	bne.n	80076c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	6a39      	ldr	r1, [r7, #32]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f8ed 	bl	8007968 <I2C_WaitOnSTOPFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e01a      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2220      	movs	r2, #32
 800779e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6859      	ldr	r1, [r3, #4]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <HAL_I2C_Master_Transmit+0x22c>)
 80077ac:	400b      	ands	r3, r1
 80077ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	80002000 	.word	0x80002000
 80077dc:	fe00e800 	.word	0xfe00e800

080077e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d103      	bne.n	80077fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d007      	beq.n	800781c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	619a      	str	r2, [r3, #24]
  }
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007838:	e03b      	b.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f8d6 	bl	80079f0 <I2C_IsErrorOccurred>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e041      	b.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d02d      	beq.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007856:	f7fa faff 	bl	8001e58 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d302      	bcc.n	800786c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d122      	bne.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	429a      	cmp	r2, r3
 8007888:	d113      	bne.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788e:	f043 0220 	orr.w	r2, r3, #32
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e00f      	b.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4013      	ands	r3, r2
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	429a      	cmp	r2, r3
 80078c0:	bf0c      	ite	eq
 80078c2:	2301      	moveq	r3, #1
 80078c4:	2300      	movne	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d0b4      	beq.n	800783a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078e6:	e033      	b.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f87f 	bl	80079f0 <I2C_IsErrorOccurred>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e031      	b.n	8007960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007902:	d025      	beq.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007904:	f7fa faa8 	bl	8001e58 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	d302      	bcc.n	800791a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d11a      	bne.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b02      	cmp	r3, #2
 8007926:	d013      	beq.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e007      	b.n	8007960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d1c4      	bne.n	80078e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007974:	e02f      	b.n	80079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f838 	bl	80079f0 <I2C_IsErrorOccurred>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e02d      	b.n	80079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800798a:	f7fa fa65 	bl	8001e58 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d302      	bcc.n	80079a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11a      	bne.n	80079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d013      	beq.n	80079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b2:	f043 0220 	orr.w	r2, r3, #32
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e007      	b.n	80079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d1c8      	bne.n	8007976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	@ 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d068      	beq.n	8007aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2210      	movs	r2, #16
 8007a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a24:	e049      	b.n	8007aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d045      	beq.n	8007aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a2e:	f7fa fa13 	bl	8001e58 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d302      	bcc.n	8007a44 <I2C_IsErrorOccurred+0x54>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d13a      	bne.n	8007aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a66:	d121      	bne.n	8007aac <I2C_IsErrorOccurred+0xbc>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a6e:	d01d      	beq.n	8007aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a70:	7cfb      	ldrb	r3, [r7, #19]
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d01a      	beq.n	8007aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a86:	f7fa f9e7 	bl	8001e58 <HAL_GetTick>
 8007a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a8c:	e00e      	b.n	8007aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a8e:	f7fa f9e3 	bl	8001e58 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b19      	cmp	r3, #25
 8007a9a:	d907      	bls.n	8007aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f043 0320 	orr.w	r3, r3, #32
 8007aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007aaa:	e006      	b.n	8007aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d1e9      	bne.n	8007a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d003      	beq.n	8007ad0 <I2C_IsErrorOccurred+0xe0>
 8007ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0aa      	beq.n	8007a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2220      	movs	r2, #32
 8007ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f043 0304 	orr.w	r3, r3, #4
 8007ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	f043 0308 	orr.w	r3, r3, #8
 8007b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01c      	beq.n	8007b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff fe3b 	bl	80077e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6859      	ldr	r1, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <I2C_IsErrorOccurred+0x1bc>)
 8007b76:	400b      	ands	r3, r1
 8007b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	431a      	orrs	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3728      	adds	r7, #40	@ 0x28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	fe00e800 	.word	0xfe00e800

08007bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	817b      	strh	r3, [r7, #10]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bc2:	897b      	ldrh	r3, [r7, #10]
 8007bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bc8:	7a7b      	ldrb	r3, [r7, #9]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	0d5b      	lsrs	r3, r3, #21
 8007bea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <I2C_TransferConfig+0x60>)
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	ea02 0103 	and.w	r1, r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	03ff63ff 	.word	0x03ff63ff

08007c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d138      	bne.n	8007c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e032      	b.n	8007c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2224      	movs	r2, #36	@ 0x24
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0201 	bic.w	r2, r2, #1
 8007c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d139      	bne.n	8007d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e033      	b.n	8007d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2224      	movs	r2, #36	@ 0x24
 8007cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d4c:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d00a      	beq.n	8007d6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d58:	4b16      	ldr	r3, [pc, #88]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d001      	beq.n	8007d6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e01f      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e01d      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d6e:	4b11      	ldr	r3, [pc, #68]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f023 0207 	bic.w	r2, r3, #7
 8007d76:	490f      	ldr	r1, [pc, #60]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d7e:	f7fa f86b 	bl	8001e58 <HAL_GetTick>
 8007d82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d84:	e009      	b.n	8007d9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d86:	f7fa f867 	bl	8001e58 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d94:	d901      	bls.n	8007d9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e007      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d9a:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	d1ee      	bne.n	8007d86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	58024800 	.word	0x58024800

08007db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	@ 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e3c8      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 8087 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dd8:	4b88      	ldr	r3, [pc, #544]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007de2:	4b86      	ldr	r3, [pc, #536]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d007      	beq.n	8007dfe <HAL_RCC_OscConfig+0x46>
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	2b18      	cmp	r3, #24
 8007df2:	d110      	bne.n	8007e16 <HAL_RCC_OscConfig+0x5e>
 8007df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d10b      	bne.n	8007e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d06c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x12c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d168      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e3a2      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCC_OscConfig+0x76>
 8007e20:	4b76      	ldr	r3, [pc, #472]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a75      	ldr	r2, [pc, #468]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e02e      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCC_OscConfig+0x98>
 8007e36:	4b71      	ldr	r3, [pc, #452]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a70      	ldr	r2, [pc, #448]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b6e      	ldr	r3, [pc, #440]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6d      	ldr	r2, [pc, #436]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e01d      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e58:	d10c      	bne.n	8007e74 <HAL_RCC_OscConfig+0xbc>
 8007e5a:	4b68      	ldr	r3, [pc, #416]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a67      	ldr	r2, [pc, #412]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	4b65      	ldr	r3, [pc, #404]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a64      	ldr	r2, [pc, #400]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	e00b      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e74:	4b61      	ldr	r3, [pc, #388]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a60      	ldr	r2, [pc, #384]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4b5e      	ldr	r3, [pc, #376]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a5d      	ldr	r2, [pc, #372]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7f9 ffe0 	bl	8001e58 <HAL_GetTick>
 8007e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e9c:	f7f9 ffdc 	bl	8001e58 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b64      	cmp	r3, #100	@ 0x64
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e356      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eae:	4b53      	ldr	r3, [pc, #332]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0xe4>
 8007eba:	e014      	b.n	8007ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7f9 ffcc 	bl	8001e58 <HAL_GetTick>
 8007ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7f9 ffc8 	bl	8001e58 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	@ 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e342      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ed6:	4b49      	ldr	r3, [pc, #292]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x10c>
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 808c 	beq.w	800800c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef4:	4b41      	ldr	r3, [pc, #260]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007efc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007efe:	4b3f      	ldr	r3, [pc, #252]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_RCC_OscConfig+0x162>
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	2b18      	cmp	r3, #24
 8007f0e:	d137      	bne.n	8007f80 <HAL_RCC_OscConfig+0x1c8>
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d132      	bne.n	8007f80 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1a:	4b38      	ldr	r3, [pc, #224]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_RCC_OscConfig+0x17a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e314      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f32:	4b32      	ldr	r3, [pc, #200]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f023 0219 	bic.w	r2, r3, #25
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	492f      	ldr	r1, [pc, #188]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7f9 ff88 	bl	8001e58 <HAL_GetTick>
 8007f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f4c:	f7f9 ff84 	bl	8001e58 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e2fe      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f5e:	4b27      	ldr	r3, [pc, #156]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f0      	beq.n	8007f4c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f6a:	4b24      	ldr	r3, [pc, #144]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	061b      	lsls	r3, r3, #24
 8007f78:	4920      	ldr	r1, [pc, #128]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f7e:	e045      	b.n	800800c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d026      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f88:	4b1c      	ldr	r3, [pc, #112]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f023 0219 	bic.w	r2, r3, #25
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4919      	ldr	r1, [pc, #100]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9a:	f7f9 ff5d 	bl	8001e58 <HAL_GetTick>
 8007f9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fa2:	f7f9 ff59 	bl	8001e58 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e2d3      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fb4:	4b11      	ldr	r3, [pc, #68]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	490b      	ldr	r1, [pc, #44]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	604b      	str	r3, [r1, #4]
 8007fd4:	e01a      	b.n	800800c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fd6:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a08      	ldr	r2, [pc, #32]	@ (8007ffc <HAL_RCC_OscConfig+0x244>)
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe2:	f7f9 ff39 	bl	8001e58 <HAL_GetTick>
 8007fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fe8:	e00a      	b.n	8008000 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fea:	f7f9 ff35 	bl	8001e58 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d903      	bls.n	8008000 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e2af      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
 8007ffc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008000:	4b96      	ldr	r3, [pc, #600]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ee      	bne.n	8007fea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d06a      	beq.n	80080ee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008018:	4b90      	ldr	r3, [pc, #576]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008020:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008022:	4b8e      	ldr	r3, [pc, #568]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008026:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b08      	cmp	r3, #8
 800802c:	d007      	beq.n	800803e <HAL_RCC_OscConfig+0x286>
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b18      	cmp	r3, #24
 8008032:	d11b      	bne.n	800806c <HAL_RCC_OscConfig+0x2b4>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b01      	cmp	r3, #1
 800803c:	d116      	bne.n	800806c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800803e:	4b87      	ldr	r3, [pc, #540]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_RCC_OscConfig+0x29e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	2b80      	cmp	r3, #128	@ 0x80
 8008050:	d001      	beq.n	8008056 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e282      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008056:	4b81      	ldr	r3, [pc, #516]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	061b      	lsls	r3, r3, #24
 8008064:	497d      	ldr	r1, [pc, #500]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008066:	4313      	orrs	r3, r2
 8008068:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800806a:	e040      	b.n	80080ee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d023      	beq.n	80080bc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008074:	4b79      	ldr	r3, [pc, #484]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a78      	ldr	r2, [pc, #480]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800807a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008080:	f7f9 feea 	bl	8001e58 <HAL_GetTick>
 8008084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008088:	f7f9 fee6 	bl	8001e58 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e260      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800809a:	4b70      	ldr	r3, [pc, #448]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0f0      	beq.n	8008088 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080a6:	4b6d      	ldr	r3, [pc, #436]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	061b      	lsls	r3, r3, #24
 80080b4:	4969      	ldr	r1, [pc, #420]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60cb      	str	r3, [r1, #12]
 80080ba:	e018      	b.n	80080ee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080bc:	4b67      	ldr	r3, [pc, #412]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a66      	ldr	r2, [pc, #408]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80080c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7f9 fec6 	bl	8001e58 <HAL_GetTick>
 80080cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080d0:	f7f9 fec2 	bl	8001e58 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e23c      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080e2:	4b5e      	ldr	r3, [pc, #376]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d036      	beq.n	8008168 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d019      	beq.n	8008136 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008102:	4b56      	ldr	r3, [pc, #344]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008106:	4a55      	ldr	r2, [pc, #340]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810e:	f7f9 fea3 	bl	8001e58 <HAL_GetTick>
 8008112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008116:	f7f9 fe9f 	bl	8001e58 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e219      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008128:	4b4c      	ldr	r3, [pc, #304]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800812a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x35e>
 8008134:	e018      	b.n	8008168 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008136:	4b49      	ldr	r3, [pc, #292]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813a:	4a48      	ldr	r2, [pc, #288]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800813c:	f023 0301 	bic.w	r3, r3, #1
 8008140:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008142:	f7f9 fe89 	bl	8001e58 <HAL_GetTick>
 8008146:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800814a:	f7f9 fe85 	bl	8001e58 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e1ff      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800815c:	4b3f      	ldr	r3, [pc, #252]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800815e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d036      	beq.n	80081e2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d019      	beq.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800817c:	4b37      	ldr	r3, [pc, #220]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a36      	ldr	r2, [pc, #216]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008182:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008186:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008188:	f7f9 fe66 	bl	8001e58 <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008190:	f7f9 fe62 	bl	8001e58 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e1dc      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081a2:	4b2e      	ldr	r3, [pc, #184]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f0      	beq.n	8008190 <HAL_RCC_OscConfig+0x3d8>
 80081ae:	e018      	b.n	80081e2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081b0:	4b2a      	ldr	r3, [pc, #168]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a29      	ldr	r2, [pc, #164]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80081b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081bc:	f7f9 fe4c 	bl	8001e58 <HAL_GetTick>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081c4:	f7f9 fe48 	bl	8001e58 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e1c2      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081d6:	4b21      	ldr	r3, [pc, #132]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f0      	bne.n	80081c4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 8086 	beq.w	80082fc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <HAL_RCC_OscConfig+0x4a8>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008260 <HAL_RCC_OscConfig+0x4a8>)
 80081f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081fc:	f7f9 fe2c 	bl	8001e58 <HAL_GetTick>
 8008200:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008204:	f7f9 fe28 	bl	8001e58 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b64      	cmp	r3, #100	@ 0x64
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e1a2      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008216:	4b12      	ldr	r3, [pc, #72]	@ (8008260 <HAL_RCC_OscConfig+0x4a8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d106      	bne.n	8008238 <HAL_RCC_OscConfig+0x480>
 800822a:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	4a0b      	ldr	r2, [pc, #44]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6713      	str	r3, [r2, #112]	@ 0x70
 8008236:	e032      	b.n	800829e <HAL_RCC_OscConfig+0x4e6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d111      	bne.n	8008264 <HAL_RCC_OscConfig+0x4ac>
 8008240:	4b06      	ldr	r3, [pc, #24]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008244:	4a05      	ldr	r2, [pc, #20]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	6713      	str	r3, [r2, #112]	@ 0x70
 800824c:	4b03      	ldr	r3, [pc, #12]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008250:	4a02      	ldr	r2, [pc, #8]	@ (800825c <HAL_RCC_OscConfig+0x4a4>)
 8008252:	f023 0304 	bic.w	r3, r3, #4
 8008256:	6713      	str	r3, [r2, #112]	@ 0x70
 8008258:	e021      	b.n	800829e <HAL_RCC_OscConfig+0x4e6>
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	58024800 	.word	0x58024800
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b05      	cmp	r3, #5
 800826a:	d10c      	bne.n	8008286 <HAL_RCC_OscConfig+0x4ce>
 800826c:	4b83      	ldr	r3, [pc, #524]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a82      	ldr	r2, [pc, #520]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008272:	f043 0304 	orr.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
 8008278:	4b80      	ldr	r3, [pc, #512]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827c:	4a7f      	ldr	r2, [pc, #508]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	6713      	str	r3, [r2, #112]	@ 0x70
 8008284:	e00b      	b.n	800829e <HAL_RCC_OscConfig+0x4e6>
 8008286:	4b7d      	ldr	r3, [pc, #500]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828a:	4a7c      	ldr	r2, [pc, #496]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	6713      	str	r3, [r2, #112]	@ 0x70
 8008292:	4b7a      	ldr	r3, [pc, #488]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008296:	4a79      	ldr	r2, [pc, #484]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008298:	f023 0304 	bic.w	r3, r3, #4
 800829c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d015      	beq.n	80082d2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a6:	f7f9 fdd7 	bl	8001e58 <HAL_GetTick>
 80082aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ac:	e00a      	b.n	80082c4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ae:	f7f9 fdd3 	bl	8001e58 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082bc:	4293      	cmp	r3, r2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e14b      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c4:	4b6d      	ldr	r3, [pc, #436]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80082c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0ee      	beq.n	80082ae <HAL_RCC_OscConfig+0x4f6>
 80082d0:	e014      	b.n	80082fc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d2:	f7f9 fdc1 	bl	8001e58 <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082d8:	e00a      	b.n	80082f0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082da:	f7f9 fdbd 	bl	8001e58 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e135      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082f0:	4b62      	ldr	r3, [pc, #392]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1ee      	bne.n	80082da <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 812a 	beq.w	800855a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008306:	4b5d      	ldr	r3, [pc, #372]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800830e:	2b18      	cmp	r3, #24
 8008310:	f000 80ba 	beq.w	8008488 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008318:	2b02      	cmp	r3, #2
 800831a:	f040 8095 	bne.w	8008448 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800831e:	4b57      	ldr	r3, [pc, #348]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a56      	ldr	r2, [pc, #344]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832a:	f7f9 fd95 	bl	8001e58 <HAL_GetTick>
 800832e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008330:	e008      	b.n	8008344 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008332:	f7f9 fd91 	bl	8001e58 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e10b      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008344:	4b4d      	ldr	r3, [pc, #308]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008350:	4b4a      	ldr	r3, [pc, #296]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008354:	4b4a      	ldr	r3, [pc, #296]	@ (8008480 <HAL_RCC_OscConfig+0x6c8>)
 8008356:	4013      	ands	r3, r2
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	430a      	orrs	r2, r1
 8008364:	4945      	ldr	r1, [pc, #276]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008366:	4313      	orrs	r3, r2
 8008368:	628b      	str	r3, [r1, #40]	@ 0x28
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836e:	3b01      	subs	r3, #1
 8008370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008378:	3b01      	subs	r3, #1
 800837a:	025b      	lsls	r3, r3, #9
 800837c:	b29b      	uxth	r3, r3
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	3b01      	subs	r3, #1
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	3b01      	subs	r3, #1
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800839a:	4938      	ldr	r1, [pc, #224]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800839c:	4313      	orrs	r3, r2
 800839e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083a0:	4b36      	ldr	r3, [pc, #216]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	4a35      	ldr	r2, [pc, #212]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083a6:	f023 0301 	bic.w	r3, r3, #1
 80083aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083ac:	4b33      	ldr	r3, [pc, #204]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b0:	4b34      	ldr	r3, [pc, #208]	@ (8008484 <HAL_RCC_OscConfig+0x6cc>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80083b8:	00d2      	lsls	r2, r2, #3
 80083ba:	4930      	ldr	r1, [pc, #192]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083c0:	4b2e      	ldr	r3, [pc, #184]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	f023 020c 	bic.w	r2, r3, #12
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	492b      	ldr	r1, [pc, #172]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083d2:	4b2a      	ldr	r3, [pc, #168]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	f023 0202 	bic.w	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083de:	4927      	ldr	r1, [pc, #156]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083e4:	4b25      	ldr	r3, [pc, #148]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	4a24      	ldr	r2, [pc, #144]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f0:	4b22      	ldr	r3, [pc, #136]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	4a21      	ldr	r2, [pc, #132]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083fc:	4b1f      	ldr	r3, [pc, #124]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	4a1e      	ldr	r2, [pc, #120]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008408:	4b1c      	ldr	r3, [pc, #112]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	4a1b      	ldr	r2, [pc, #108]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008414:	4b19      	ldr	r3, [pc, #100]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a18      	ldr	r2, [pc, #96]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800841a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800841e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008420:	f7f9 fd1a 	bl	8001e58 <HAL_GetTick>
 8008424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008428:	f7f9 fd16 	bl	8001e58 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e090      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800843a:	4b10      	ldr	r3, [pc, #64]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0x670>
 8008446:	e088      	b.n	800855a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008448:	4b0c      	ldr	r3, [pc, #48]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a0b      	ldr	r2, [pc, #44]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 800844e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7f9 fd00 	bl	8001e58 <HAL_GetTick>
 8008458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800845c:	f7f9 fcfc 	bl	8001e58 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e076      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800846e:	4b03      	ldr	r3, [pc, #12]	@ (800847c <HAL_RCC_OscConfig+0x6c4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f0      	bne.n	800845c <HAL_RCC_OscConfig+0x6a4>
 800847a:	e06e      	b.n	800855a <HAL_RCC_OscConfig+0x7a2>
 800847c:	58024400 	.word	0x58024400
 8008480:	fffffc0c 	.word	0xfffffc0c
 8008484:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008488:	4b36      	ldr	r3, [pc, #216]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800848e:	4b35      	ldr	r3, [pc, #212]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008492:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	2b01      	cmp	r3, #1
 800849a:	d031      	beq.n	8008500 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f003 0203 	and.w	r2, r3, #3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d12a      	bne.n	8008500 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	091b      	lsrs	r3, r3, #4
 80084ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d122      	bne.n	8008500 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d11a      	bne.n	8008500 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d111      	bne.n	8008500 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	0c1b      	lsrs	r3, r3, #16
 80084e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d108      	bne.n	8008500 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0e1b      	lsrs	r3, r3, #24
 80084f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d001      	beq.n	8008504 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e02b      	b.n	800855c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008504:	4b17      	ldr	r3, [pc, #92]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 8008506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800850e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	429a      	cmp	r2, r3
 8008518:	d01f      	beq.n	800855a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800851a:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	4a11      	ldr	r2, [pc, #68]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008526:	f7f9 fc97 	bl	8001e58 <HAL_GetTick>
 800852a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800852c:	bf00      	nop
 800852e:	f7f9 fc93 	bl	8001e58 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	4293      	cmp	r3, r2
 8008538:	d0f9      	beq.n	800852e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800853a:	4b0a      	ldr	r3, [pc, #40]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 800853c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800853e:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <HAL_RCC_OscConfig+0x7b0>)
 8008540:	4013      	ands	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008546:	00d2      	lsls	r2, r2, #3
 8008548:	4906      	ldr	r1, [pc, #24]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 800854a:	4313      	orrs	r3, r2
 800854c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800854e:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	4a04      	ldr	r2, [pc, #16]	@ (8008564 <HAL_RCC_OscConfig+0x7ac>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3730      	adds	r7, #48	@ 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	58024400 	.word	0x58024400
 8008568:	ffff0007 	.word	0xffff0007

0800856c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e19c      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008580:	4b8a      	ldr	r3, [pc, #552]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d910      	bls.n	80085b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b87      	ldr	r3, [pc, #540]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 020f 	bic.w	r2, r3, #15
 8008596:	4985      	ldr	r1, [pc, #532]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b83      	ldr	r3, [pc, #524]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d001      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e184      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	4b7b      	ldr	r3, [pc, #492]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d908      	bls.n	80085de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085cc:	4b78      	ldr	r3, [pc, #480]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	4975      	ldr	r1, [pc, #468]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	4b70      	ldr	r3, [pc, #448]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d908      	bls.n	800860c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085fa:	4b6d      	ldr	r3, [pc, #436]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	496a      	ldr	r1, [pc, #424]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008608:	4313      	orrs	r3, r2
 800860a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	4b64      	ldr	r3, [pc, #400]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008624:	429a      	cmp	r2, r3
 8008626:	d908      	bls.n	800863a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008628:	4b61      	ldr	r3, [pc, #388]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	495e      	ldr	r1, [pc, #376]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008636:	4313      	orrs	r3, r2
 8008638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d010      	beq.n	8008668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	69da      	ldr	r2, [r3, #28]
 800864a:	4b59      	ldr	r3, [pc, #356]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008652:	429a      	cmp	r2, r3
 8008654:	d908      	bls.n	8008668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008656:	4b56      	ldr	r3, [pc, #344]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	4953      	ldr	r1, [pc, #332]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008664:	4313      	orrs	r3, r2
 8008666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	4b4d      	ldr	r3, [pc, #308]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	429a      	cmp	r2, r3
 8008682:	d908      	bls.n	8008696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008684:	4b4a      	ldr	r3, [pc, #296]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	f023 020f 	bic.w	r2, r3, #15
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	4947      	ldr	r1, [pc, #284]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008692:	4313      	orrs	r3, r2
 8008694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d055      	beq.n	800874e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086a2:	4b43      	ldr	r3, [pc, #268]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	4940      	ldr	r1, [pc, #256]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d107      	bne.n	80086cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086bc:	4b3c      	ldr	r3, [pc, #240]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d121      	bne.n	800870c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0f6      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d107      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086d4:	4b36      	ldr	r3, [pc, #216]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d115      	bne.n	800870c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0ea      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d107      	bne.n	80086fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ec:	4b30      	ldr	r3, [pc, #192]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e0de      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086fc:	4b2c      	ldr	r3, [pc, #176]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0d6      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800870c:	4b28      	ldr	r3, [pc, #160]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f023 0207 	bic.w	r2, r3, #7
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4925      	ldr	r1, [pc, #148]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800871a:	4313      	orrs	r3, r2
 800871c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7f9 fb9b 	bl	8001e58 <HAL_GetTick>
 8008722:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008724:	e00a      	b.n	800873c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008726:	f7f9 fb97 	bl	8001e58 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008734:	4293      	cmp	r3, r2
 8008736:	d901      	bls.n	800873c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e0be      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800873c:	4b1c      	ldr	r3, [pc, #112]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	429a      	cmp	r2, r3
 800874c:	d1eb      	bne.n	8008726 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d010      	beq.n	800877c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	429a      	cmp	r2, r3
 8008768:	d208      	bcs.n	800877c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800876a:	4b11      	ldr	r3, [pc, #68]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f023 020f 	bic.w	r2, r3, #15
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	490e      	ldr	r1, [pc, #56]	@ (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008778:	4313      	orrs	r3, r2
 800877a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800877c:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d214      	bcs.n	80087b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800878a:	4b08      	ldr	r3, [pc, #32]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f023 020f 	bic.w	r2, r3, #15
 8008792:	4906      	ldr	r1, [pc, #24]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	4313      	orrs	r3, r2
 8008798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800879a:	4b04      	ldr	r3, [pc, #16]	@ (80087ac <HAL_RCC_ClockConfig+0x240>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d005      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e086      	b.n	80088ba <HAL_RCC_ClockConfig+0x34e>
 80087ac:	52002000 	.word	0x52002000
 80087b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	4b3f      	ldr	r3, [pc, #252]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d208      	bcs.n	80087e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087d0:	4b3c      	ldr	r3, [pc, #240]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	4939      	ldr	r1, [pc, #228]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d010      	beq.n	8008810 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695a      	ldr	r2, [r3, #20]
 80087f2:	4b34      	ldr	r3, [pc, #208]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d208      	bcs.n	8008810 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087fe:	4b31      	ldr	r3, [pc, #196]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	492e      	ldr	r1, [pc, #184]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 800880c:	4313      	orrs	r3, r2
 800880e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b00      	cmp	r3, #0
 800881a:	d010      	beq.n	800883e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	4b28      	ldr	r3, [pc, #160]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008828:	429a      	cmp	r2, r3
 800882a:	d208      	bcs.n	800883e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800882c:	4b25      	ldr	r3, [pc, #148]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	4922      	ldr	r1, [pc, #136]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 800883a:	4313      	orrs	r3, r2
 800883c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d010      	beq.n	800886c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69da      	ldr	r2, [r3, #28]
 800884e:	4b1d      	ldr	r3, [pc, #116]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008856:	429a      	cmp	r2, r3
 8008858:	d208      	bcs.n	800886c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800885a:	4b1a      	ldr	r3, [pc, #104]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	4917      	ldr	r1, [pc, #92]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 8008868:	4313      	orrs	r3, r2
 800886a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800886c:	f000 f834 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 8008870:	4602      	mov	r2, r0
 8008872:	4b14      	ldr	r3, [pc, #80]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	4912      	ldr	r1, [pc, #72]	@ (80088c8 <HAL_RCC_ClockConfig+0x35c>)
 800887e:	5ccb      	ldrb	r3, [r1, r3]
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800888a:	4b0e      	ldr	r3, [pc, #56]	@ (80088c4 <HAL_RCC_ClockConfig+0x358>)
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	4a0d      	ldr	r2, [pc, #52]	@ (80088c8 <HAL_RCC_ClockConfig+0x35c>)
 8008894:	5cd3      	ldrb	r3, [r2, r3]
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
 80088a0:	4a0a      	ldr	r2, [pc, #40]	@ (80088cc <HAL_RCC_ClockConfig+0x360>)
 80088a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088a4:	4a0a      	ldr	r2, [pc, #40]	@ (80088d0 <HAL_RCC_ClockConfig+0x364>)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088aa:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <HAL_RCC_ClockConfig+0x368>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f9 fa88 	bl	8001dc4 <HAL_InitTick>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
 80088c8:	08010514 	.word	0x08010514
 80088cc:	24000014 	.word	0x24000014
 80088d0:	24000010 	.word	0x24000010
 80088d4:	24000018 	.word	0x24000018

080088d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	b089      	sub	sp, #36	@ 0x24
 80088dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088de:	4bb3      	ldr	r3, [pc, #716]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088e6:	2b18      	cmp	r3, #24
 80088e8:	f200 8155 	bhi.w	8008b96 <HAL_RCC_GetSysClockFreq+0x2be>
 80088ec:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008b97 	.word	0x08008b97
 80088fc:	08008b97 	.word	0x08008b97
 8008900:	08008b97 	.word	0x08008b97
 8008904:	08008b97 	.word	0x08008b97
 8008908:	08008b97 	.word	0x08008b97
 800890c:	08008b97 	.word	0x08008b97
 8008910:	08008b97 	.word	0x08008b97
 8008914:	0800897f 	.word	0x0800897f
 8008918:	08008b97 	.word	0x08008b97
 800891c:	08008b97 	.word	0x08008b97
 8008920:	08008b97 	.word	0x08008b97
 8008924:	08008b97 	.word	0x08008b97
 8008928:	08008b97 	.word	0x08008b97
 800892c:	08008b97 	.word	0x08008b97
 8008930:	08008b97 	.word	0x08008b97
 8008934:	08008985 	.word	0x08008985
 8008938:	08008b97 	.word	0x08008b97
 800893c:	08008b97 	.word	0x08008b97
 8008940:	08008b97 	.word	0x08008b97
 8008944:	08008b97 	.word	0x08008b97
 8008948:	08008b97 	.word	0x08008b97
 800894c:	08008b97 	.word	0x08008b97
 8008950:	08008b97 	.word	0x08008b97
 8008954:	0800898b 	.word	0x0800898b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008958:	4b94      	ldr	r3, [pc, #592]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008964:	4b91      	ldr	r3, [pc, #580]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	4a90      	ldr	r2, [pc, #576]	@ (8008bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008976:	e111      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008978:	4b8d      	ldr	r3, [pc, #564]	@ (8008bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800897a:	61bb      	str	r3, [r7, #24]
      break;
 800897c:	e10e      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800897e:	4b8d      	ldr	r3, [pc, #564]	@ (8008bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008980:	61bb      	str	r3, [r7, #24]
      break;
 8008982:	e10b      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008984:	4b8c      	ldr	r3, [pc, #560]	@ (8008bb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008986:	61bb      	str	r3, [r7, #24]
      break;
 8008988:	e108      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800898a:	4b88      	ldr	r3, [pc, #544]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008994:	4b85      	ldr	r3, [pc, #532]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008998:	091b      	lsrs	r3, r3, #4
 800899a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800899e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089a0:	4b82      	ldr	r3, [pc, #520]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089aa:	4b80      	ldr	r3, [pc, #512]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ae:	08db      	lsrs	r3, r3, #3
 80089b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 80e1 	beq.w	8008b90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f000 8083 	beq.w	8008adc <HAL_RCC_GetSysClockFreq+0x204>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	f200 80a1 	bhi.w	8008b20 <HAL_RCC_GetSysClockFreq+0x248>
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_RCC_GetSysClockFreq+0x114>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d056      	beq.n	8008a98 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089ea:	e099      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089ec:	4b6f      	ldr	r3, [pc, #444]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d02d      	beq.n	8008a54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f8:	4b6c      	ldr	r3, [pc, #432]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	08db      	lsrs	r3, r3, #3
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	4a6b      	ldr	r2, [pc, #428]	@ (8008bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a04:	fa22 f303 	lsr.w	r3, r2, r3
 8008a08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a22:	4b62      	ldr	r3, [pc, #392]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a52:	e087      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008bc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b51      	ldr	r3, [pc, #324]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a96:	e065      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b40      	ldr	r3, [pc, #256]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008abe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ada:	e043      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008bc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b2f      	ldr	r3, [pc, #188]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b1e:	e021      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	4b1e      	ldr	r3, [pc, #120]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b64:	4b11      	ldr	r3, [pc, #68]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b68:	0a5b      	lsrs	r3, r3, #9
 8008b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6e:	3301      	adds	r3, #1
 8008b70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	ee07 3a90 	vmov	s15, r3
 8008b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 3a90 	vmov	r3, s15
 8008b8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b8e:	e005      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61bb      	str	r3, [r7, #24]
      break;
 8008b94:	e002      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b98:	61bb      	str	r3, [r7, #24]
      break;
 8008b9a:	bf00      	nop
  }

  return sysclockfreq;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3724      	adds	r7, #36	@ 0x24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	03d09000 	.word	0x03d09000
 8008bb4:	003d0900 	.word	0x003d0900
 8008bb8:	007a1200 	.word	0x007a1200
 8008bbc:	46000000 	.word	0x46000000
 8008bc0:	4c742400 	.word	0x4c742400
 8008bc4:	4a742400 	.word	0x4a742400
 8008bc8:	4af42400 	.word	0x4af42400

08008bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bd2:	f7ff fe81 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	0a1b      	lsrs	r3, r3, #8
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	490f      	ldr	r1, [pc, #60]	@ (8008c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8008be4:	5ccb      	ldrb	r3, [r1, r3]
 8008be6:	f003 031f 	and.w	r3, r3, #31
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	4a09      	ldr	r2, [pc, #36]	@ (8008c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8008bfa:	5cd3      	ldrb	r3, [r2, r3]
 8008bfc:	f003 031f 	and.w	r3, r3, #31
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	4a07      	ldr	r2, [pc, #28]	@ (8008c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c0a:	4a07      	ldr	r2, [pc, #28]	@ (8008c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c10:	4b04      	ldr	r3, [pc, #16]	@ (8008c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c12:	681b      	ldr	r3, [r3, #0]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	08010514 	.word	0x08010514
 8008c24:	24000014 	.word	0x24000014
 8008c28:	24000010 	.word	0x24000010

08008c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c30:	f7ff ffcc 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008c34:	4602      	mov	r2, r0
 8008c36:	4b06      	ldr	r3, [pc, #24]	@ (8008c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	4904      	ldr	r1, [pc, #16]	@ (8008c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c42:	5ccb      	ldrb	r3, [r1, r3]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	58024400 	.word	0x58024400
 8008c54:	08010514 	.word	0x08010514

08008c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c5c:	f7ff ffb6 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b06      	ldr	r3, [pc, #24]	@ (8008c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	0a1b      	lsrs	r3, r3, #8
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	08010514 	.word	0x08010514

08008c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c88:	b0c6      	sub	sp, #280	@ 0x118
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ca8:	2500      	movs	r5, #0
 8008caa:	ea54 0305 	orrs.w	r3, r4, r5
 8008cae:	d049      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cba:	d02f      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cc0:	d828      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cc6:	d01a      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ccc:	d822      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cd6:	d007      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cd8:	e01c      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cda:	4bab      	ldr	r3, [pc, #684]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	4aaa      	ldr	r2, [pc, #680]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ce6:	e01a      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cec:	3308      	adds	r3, #8
 8008cee:	2102      	movs	r1, #2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 fa49 	bl	800b188 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cfc:	e00f      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d02:	3328      	adds	r3, #40	@ 0x28
 8008d04:	2102      	movs	r1, #2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f002 faf0 	bl	800b2ec <RCCEx_PLL3_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d12:	e004      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d1a:	e000      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10a      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d26:	4b98      	ldr	r3, [pc, #608]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d34:	4a94      	ldr	r2, [pc, #592]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d36:	430b      	orrs	r3, r1
 8008d38:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d3a:	e003      	b.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d50:	f04f 0900 	mov.w	r9, #0
 8008d54:	ea58 0309 	orrs.w	r3, r8, r9
 8008d58:	d047      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d82a      	bhi.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d64:	a201      	add	r2, pc, #4	@ (adr r2, 8008d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d8f 	.word	0x08008d8f
 8008d74:	08008da5 	.word	0x08008da5
 8008d78:	08008dc3 	.word	0x08008dc3
 8008d7c:	08008dc3 	.word	0x08008dc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d80:	4b81      	ldr	r3, [pc, #516]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	4a80      	ldr	r2, [pc, #512]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d8c:	e01a      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d92:	3308      	adds	r3, #8
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f002 f9f6 	bl	800b188 <RCCEx_PLL2_Config>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008da2:	e00f      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	3328      	adds	r3, #40	@ 0x28
 8008daa:	2100      	movs	r1, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	f002 fa9d 	bl	800b2ec <RCCEx_PLL3_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db8:	e004      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dc0:	e000      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd0:	f023 0107 	bic.w	r1, r3, #7
 8008dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dda:	4a6b      	ldr	r2, [pc, #428]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6513      	str	r3, [r2, #80]	@ 0x50
 8008de0:	e003      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008de6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008df6:	f04f 0b00 	mov.w	fp, #0
 8008dfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8008dfe:	d05b      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e08:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e0c:	d03b      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e0e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e12:	d834      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e18:	d037      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e1e:	d82e      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e24:	d033      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e2a:	d828      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e30:	d01a      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e36:	d822      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e40:	d007      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e42:	e01c      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e44:	4b50      	ldr	r3, [pc, #320]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	4a4f      	ldr	r2, [pc, #316]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e50:	e01e      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e56:	3308      	adds	r3, #8
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f994 	bl	800b188 <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e66:	e013      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e6c:	3328      	adds	r3, #40	@ 0x28
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f002 fa3b 	bl	800b2ec <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e7c:	e008      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e84:	e004      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10b      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e98:	4b3b      	ldr	r3, [pc, #236]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ea8:	4a37      	ldr	r2, [pc, #220]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eae:	e003      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ece:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	d05d      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008edc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ee0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ee4:	d03b      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008ee6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008eea:	d834      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008eec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ef0:	d037      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008ef2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ef6:	d82e      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ef8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008efc:	d033      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008efe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f02:	d828      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f08:	d01a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f0e:	d822      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f18:	d007      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f1a:	e01c      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	4a19      	ldr	r2, [pc, #100]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f28:	e01e      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2e:	3308      	adds	r3, #8
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f002 f928 	bl	800b188 <RCCEx_PLL2_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f3e:	e013      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f44:	3328      	adds	r3, #40	@ 0x28
 8008f46:	2100      	movs	r1, #0
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 f9cf 	bl	800b2ec <RCCEx_PLL3_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f54:	e008      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f5c:	e004      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10d      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f80:	4a01      	ldr	r2, [pc, #4]	@ (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f82:	430b      	orrs	r3, r1
 8008f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f86:	e005      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008faa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d03a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fba:	2b30      	cmp	r3, #48	@ 0x30
 8008fbc:	d01f      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008fbe:	2b30      	cmp	r3, #48	@ 0x30
 8008fc0:	d819      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d00c      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d815      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d019      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008fce:	2b10      	cmp	r3, #16
 8008fd0:	d111      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd2:	4baa      	ldr	r3, [pc, #680]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	4aa9      	ldr	r2, [pc, #676]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008fde:	e011      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 f8cd 	bl	800b188 <RCCEx_PLL2_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ff4:	e006      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ffc:	e002      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008ffe:	bf00      	nop
 8009000:	e000      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800900c:	4b9b      	ldr	r3, [pc, #620]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800900e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009010:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	4a98      	ldr	r2, [pc, #608]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800901c:	430b      	orrs	r3, r1
 800901e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009020:	e003      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800903a:	2300      	movs	r3, #0
 800903c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009040:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009044:	460b      	mov	r3, r1
 8009046:	4313      	orrs	r3, r2
 8009048:	d051      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009054:	d035      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905a:	d82e      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800905c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009060:	d031      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009066:	d828      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906c:	d01a      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800906e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009072:	d822      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907c:	d007      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800907e:	e01c      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009080:	4b7e      	ldr	r3, [pc, #504]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009084:	4a7d      	ldr	r2, [pc, #500]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800908a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800908c:	e01c      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800908e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009092:	3308      	adds	r3, #8
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f002 f876 	bl	800b188 <RCCEx_PLL2_Config>
 800909c:	4603      	mov	r3, r0
 800909e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090a2:	e011      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a8:	3328      	adds	r3, #40	@ 0x28
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 f91d 	bl	800b2ec <RCCEx_PLL3_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b8:	e006      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090c0:	e002      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090c2:	bf00      	nop
 80090c4:	e000      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090d0:	4b6a      	ldr	r3, [pc, #424]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80090d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090de:	4a67      	ldr	r2, [pc, #412]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80090fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090fe:	2300      	movs	r3, #0
 8009100:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009104:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009108:	460b      	mov	r3, r1
 800910a:	4313      	orrs	r3, r2
 800910c:	d053      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009118:	d033      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800911a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800911e:	d82c      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009124:	d02f      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800912a:	d826      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800912c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009130:	d02b      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009136:	d820      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800913c:	d012      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800913e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009142:	d81a      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d022      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800914c:	d115      	bne.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009152:	3308      	adds	r3, #8
 8009154:	2101      	movs	r1, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f002 f816 	bl	800b188 <RCCEx_PLL2_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009162:	e015      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009168:	3328      	adds	r3, #40	@ 0x28
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f002 f8bd 	bl	800b2ec <RCCEx_PLL3_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009178:	e00a      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009180:	e006      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009182:	bf00      	nop
 8009184:	e004      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009186:	bf00      	nop
 8009188:	e002      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800918a:	bf00      	nop
 800918c:	e000      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800918e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009198:	4b38      	ldr	r3, [pc, #224]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800919a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a6:	4a35      	ldr	r2, [pc, #212]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091a8:	430b      	orrs	r3, r1
 80091aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ac:	e003      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091c6:	2300      	movs	r3, #0
 80091c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d058      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091e2:	d033      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80091e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091e8:	d82c      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ee:	d02f      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80091f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f4:	d826      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091fa:	d02b      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80091fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009200:	d820      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009206:	d012      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920c:	d81a      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d022      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009216:	d115      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800921c:	3308      	adds	r3, #8
 800921e:	2101      	movs	r1, #1
 8009220:	4618      	mov	r0, r3
 8009222:	f001 ffb1 	bl	800b188 <RCCEx_PLL2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800922c:	e015      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800922e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009232:	3328      	adds	r3, #40	@ 0x28
 8009234:	2101      	movs	r1, #1
 8009236:	4618      	mov	r0, r3
 8009238:	f002 f858 	bl	800b2ec <RCCEx_PLL3_Config>
 800923c:	4603      	mov	r3, r0
 800923e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009242:	e00a      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800924a:	e006      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800924c:	bf00      	nop
 800924e:	e004      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009250:	bf00      	nop
 8009252:	e002      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009254:	bf00      	nop
 8009256:	e000      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10e      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009266:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009272:	4a02      	ldr	r2, [pc, #8]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009274:	430b      	orrs	r3, r1
 8009276:	6593      	str	r3, [r2, #88]	@ 0x58
 8009278:	e006      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800927a:	bf00      	nop
 800927c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009298:	2300      	movs	r3, #0
 800929a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800929e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d037      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092b2:	d00e      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092b8:	d816      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d018      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c2:	d111      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c4:	4bc4      	ldr	r3, [pc, #784]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	4ac3      	ldr	r2, [pc, #780]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092d0:	e00f      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d6:	3308      	adds	r3, #8
 80092d8:	2101      	movs	r1, #1
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 ff54 	bl	800b188 <RCCEx_PLL2_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092e6:	e004      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092ee:	e000      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80092f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092fa:	4bb7      	ldr	r3, [pc, #732]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009308:	4ab3      	ldr	r2, [pc, #716]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800930a:	430b      	orrs	r3, r1
 800930c:	6513      	str	r3, [r2, #80]	@ 0x50
 800930e:	e003      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009324:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009328:	2300      	movs	r3, #0
 800932a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800932e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009332:	460b      	mov	r3, r1
 8009334:	4313      	orrs	r3, r2
 8009336:	d039      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800933e:	2b03      	cmp	r3, #3
 8009340:	d81c      	bhi.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009342:	a201      	add	r2, pc, #4	@ (adr r2, 8009348 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009385 	.word	0x08009385
 800934c:	08009359 	.word	0x08009359
 8009350:	08009367 	.word	0x08009367
 8009354:	08009385 	.word	0x08009385
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4b9f      	ldr	r3, [pc, #636]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	4a9e      	ldr	r2, [pc, #632]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009364:	e00f      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936a:	3308      	adds	r3, #8
 800936c:	2102      	movs	r1, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f001 ff0a 	bl	800b188 <RCCEx_PLL2_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800937a:	e004      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009382:	e000      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800938e:	4b92      	ldr	r3, [pc, #584]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009392:	f023 0103 	bic.w	r1, r3, #3
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800939c:	4a8e      	ldr	r2, [pc, #568]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800939e:	430b      	orrs	r3, r1
 80093a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093a2:	e003      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093bc:	2300      	movs	r3, #0
 80093be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f000 8099 	beq.w	8009500 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093ce:	4b83      	ldr	r3, [pc, #524]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a82      	ldr	r2, [pc, #520]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093da:	f7f8 fd3d 	bl	8001e58 <HAL_GetTick>
 80093de:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093e2:	e00b      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093e4:	f7f8 fd38 	bl	8001e58 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	2b64      	cmp	r3, #100	@ 0x64
 80093f2:	d903      	bls.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093fa:	e005      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093fc:	4b77      	ldr	r3, [pc, #476]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0ed      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800940c:	2b00      	cmp	r3, #0
 800940e:	d173      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009410:	4b71      	ldr	r3, [pc, #452]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009412:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800941c:	4053      	eors	r3, r2
 800941e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009422:	2b00      	cmp	r3, #0
 8009424:	d015      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009426:	4b6c      	ldr	r3, [pc, #432]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800942a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800942e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009432:	4b69      	ldr	r3, [pc, #420]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009436:	4a68      	ldr	r2, [pc, #416]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800943c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800943e:	4b66      	ldr	r3, [pc, #408]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009442:	4a65      	ldr	r2, [pc, #404]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009448:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800944a:	4a63      	ldr	r2, [pc, #396]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009450:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800945a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800945e:	d118      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009460:	f7f8 fcfa 	bl	8001e58 <HAL_GetTick>
 8009464:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009468:	e00d      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946a:	f7f8 fcf5 	bl	8001e58 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009474:	1ad2      	subs	r2, r2, r3
 8009476:	f241 3388 	movw	r3, #5000	@ 0x1388
 800947a:	429a      	cmp	r2, r3
 800947c:	d903      	bls.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009484:	e005      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009486:	4b54      	ldr	r3, [pc, #336]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0eb      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009496:	2b00      	cmp	r3, #0
 8009498:	d129      	bne.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094aa:	d10e      	bne.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094ac:	4b4a      	ldr	r3, [pc, #296]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094bc:	091a      	lsrs	r2, r3, #4
 80094be:	4b48      	ldr	r3, [pc, #288]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	4a45      	ldr	r2, [pc, #276]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094c4:	430b      	orrs	r3, r1
 80094c6:	6113      	str	r3, [r2, #16]
 80094c8:	e005      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094ca:	4b43      	ldr	r3, [pc, #268]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	4a42      	ldr	r2, [pc, #264]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094d4:	6113      	str	r3, [r2, #16]
 80094d6:	4b40      	ldr	r3, [pc, #256]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80094da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094e6:	4a3c      	ldr	r2, [pc, #240]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80094ec:	e008      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80094f6:	e003      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f002 0301 	and.w	r3, r2, #1
 800950c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009510:	2300      	movs	r3, #0
 8009512:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009516:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800951a:	460b      	mov	r3, r1
 800951c:	4313      	orrs	r3, r2
 800951e:	f000 808f 	beq.w	8009640 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009528:	2b28      	cmp	r3, #40	@ 0x28
 800952a:	d871      	bhi.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800952c:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800952e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009532:	bf00      	nop
 8009534:	08009619 	.word	0x08009619
 8009538:	08009611 	.word	0x08009611
 800953c:	08009611 	.word	0x08009611
 8009540:	08009611 	.word	0x08009611
 8009544:	08009611 	.word	0x08009611
 8009548:	08009611 	.word	0x08009611
 800954c:	08009611 	.word	0x08009611
 8009550:	08009611 	.word	0x08009611
 8009554:	080095e5 	.word	0x080095e5
 8009558:	08009611 	.word	0x08009611
 800955c:	08009611 	.word	0x08009611
 8009560:	08009611 	.word	0x08009611
 8009564:	08009611 	.word	0x08009611
 8009568:	08009611 	.word	0x08009611
 800956c:	08009611 	.word	0x08009611
 8009570:	08009611 	.word	0x08009611
 8009574:	080095fb 	.word	0x080095fb
 8009578:	08009611 	.word	0x08009611
 800957c:	08009611 	.word	0x08009611
 8009580:	08009611 	.word	0x08009611
 8009584:	08009611 	.word	0x08009611
 8009588:	08009611 	.word	0x08009611
 800958c:	08009611 	.word	0x08009611
 8009590:	08009611 	.word	0x08009611
 8009594:	08009619 	.word	0x08009619
 8009598:	08009611 	.word	0x08009611
 800959c:	08009611 	.word	0x08009611
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009611 	.word	0x08009611
 80095a8:	08009611 	.word	0x08009611
 80095ac:	08009611 	.word	0x08009611
 80095b0:	08009611 	.word	0x08009611
 80095b4:	08009619 	.word	0x08009619
 80095b8:	08009611 	.word	0x08009611
 80095bc:	08009611 	.word	0x08009611
 80095c0:	08009611 	.word	0x08009611
 80095c4:	08009611 	.word	0x08009611
 80095c8:	08009611 	.word	0x08009611
 80095cc:	08009611 	.word	0x08009611
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009619 	.word	0x08009619
 80095d8:	58024400 	.word	0x58024400
 80095dc:	58024800 	.word	0x58024800
 80095e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e8:	3308      	adds	r3, #8
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fdcb 	bl	800b188 <RCCEx_PLL2_Config>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095f8:	e00f      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fe:	3328      	adds	r3, #40	@ 0x28
 8009600:	2101      	movs	r1, #1
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fe72 	bl	800b2ec <RCCEx_PLL3_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800960e:	e004      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009616:	e000      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800961a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10a      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009622:	4bbf      	ldr	r3, [pc, #764]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009630:	4abb      	ldr	r2, [pc, #748]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009632:	430b      	orrs	r3, r1
 8009634:	6553      	str	r3, [r2, #84]	@ 0x54
 8009636:	e003      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800963c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f002 0302 	and.w	r3, r2, #2
 800964c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009650:	2300      	movs	r3, #0
 8009652:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009656:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800965a:	460b      	mov	r3, r1
 800965c:	4313      	orrs	r3, r2
 800965e:	d041      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009666:	2b05      	cmp	r3, #5
 8009668:	d824      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800966a:	a201      	add	r2, pc, #4	@ (adr r2, 8009670 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	080096bd 	.word	0x080096bd
 8009674:	08009689 	.word	0x08009689
 8009678:	0800969f 	.word	0x0800969f
 800967c:	080096bd 	.word	0x080096bd
 8009680:	080096bd 	.word	0x080096bd
 8009684:	080096bd 	.word	0x080096bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968c:	3308      	adds	r3, #8
 800968e:	2101      	movs	r1, #1
 8009690:	4618      	mov	r0, r3
 8009692:	f001 fd79 	bl	800b188 <RCCEx_PLL2_Config>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800969c:	e00f      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a2:	3328      	adds	r3, #40	@ 0x28
 80096a4:	2101      	movs	r1, #1
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fe20 	bl	800b2ec <RCCEx_PLL3_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096b2:	e004      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096ba:	e000      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096c6:	4b96      	ldr	r3, [pc, #600]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ca:	f023 0107 	bic.w	r1, r3, #7
 80096ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d4:	4a92      	ldr	r2, [pc, #584]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096d6:	430b      	orrs	r3, r1
 80096d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80096da:	e003      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f002 0304 	and.w	r3, r2, #4
 80096f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096f4:	2300      	movs	r3, #0
 80096f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096fe:	460b      	mov	r3, r1
 8009700:	4313      	orrs	r3, r2
 8009702:	d044      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970c:	2b05      	cmp	r3, #5
 800970e:	d825      	bhi.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009765 	.word	0x08009765
 800971c:	08009731 	.word	0x08009731
 8009720:	08009747 	.word	0x08009747
 8009724:	08009765 	.word	0x08009765
 8009728:	08009765 	.word	0x08009765
 800972c:	08009765 	.word	0x08009765
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009734:	3308      	adds	r3, #8
 8009736:	2101      	movs	r1, #1
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fd25 	bl	800b188 <RCCEx_PLL2_Config>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009744:	e00f      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974a:	3328      	adds	r3, #40	@ 0x28
 800974c:	2101      	movs	r1, #1
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fdcc 	bl	800b2ec <RCCEx_PLL3_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800976e:	4b6c      	ldr	r3, [pc, #432]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009772:	f023 0107 	bic.w	r1, r3, #7
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800977e:	4a68      	ldr	r2, [pc, #416]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6593      	str	r3, [r2, #88]	@ 0x58
 8009784:	e003      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800978a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f002 0320 	and.w	r3, r2, #32
 800979a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4313      	orrs	r3, r2
 80097ac:	d055      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ba:	d033      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097c0:	d82c      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c6:	d02f      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097cc:	d826      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097d2:	d02b      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80097d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097d8:	d820      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097de:	d012      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80097e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097e4:	d81a      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d022      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80097ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ee:	d115      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	3308      	adds	r3, #8
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 fcc5 	bl	800b188 <RCCEx_PLL2_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009804:	e015      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980a:	3328      	adds	r3, #40	@ 0x28
 800980c:	2102      	movs	r1, #2
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fd6c 	bl	800b2ec <RCCEx_PLL3_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800981a:	e00a      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009822:	e006      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10b      	bne.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800983a:	4b39      	ldr	r3, [pc, #228]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800984a:	4a35      	ldr	r2, [pc, #212]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800984c:	430b      	orrs	r3, r1
 800984e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009850:	e003      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009856:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800985a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800986a:	2300      	movs	r3, #0
 800986c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009870:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009874:	460b      	mov	r3, r1
 8009876:	4313      	orrs	r3, r2
 8009878:	d058      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800987a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009882:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009886:	d033      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009888:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800988c:	d82c      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009892:	d02f      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009898:	d826      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800989a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800989e:	d02b      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098a4:	d820      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098aa:	d012      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098b0:	d81a      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d022      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ba:	d115      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c0:	3308      	adds	r3, #8
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fc5f 	bl	800b188 <RCCEx_PLL2_Config>
 80098ca:	4603      	mov	r3, r0
 80098cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098d0:	e015      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d6:	3328      	adds	r3, #40	@ 0x28
 80098d8:	2102      	movs	r1, #2
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fd06 	bl	800b2ec <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098e6:	e00a      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098ee:	e006      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098f0:	bf00      	nop
 80098f2:	e004      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098f4:	bf00      	nop
 80098f6:	e002      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098f8:	bf00      	nop
 80098fa:	e000      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10e      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009906:	4b06      	ldr	r3, [pc, #24]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800990a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009916:	4a02      	ldr	r2, [pc, #8]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009918:	430b      	orrs	r3, r1
 800991a:	6593      	str	r3, [r2, #88]	@ 0x58
 800991c:	e006      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800991e:	bf00      	nop
 8009920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009938:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009942:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d055      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009954:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009958:	d033      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800995a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800995e:	d82c      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009964:	d02f      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800996a:	d826      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800996c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009970:	d02b      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009972:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009976:	d820      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800997c:	d012      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800997e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009982:	d81a      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d022      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800998c:	d115      	bne.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800998e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009992:	3308      	adds	r3, #8
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fbf6 	bl	800b188 <RCCEx_PLL2_Config>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099a2:	e015      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	3328      	adds	r3, #40	@ 0x28
 80099aa:	2102      	movs	r1, #2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fc9d 	bl	800b2ec <RCCEx_PLL3_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099b8:	e00a      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099c0:	e006      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099c2:	bf00      	nop
 80099c4:	e004      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10b      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099d8:	4ba0      	ldr	r3, [pc, #640]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099e8:	4a9c      	ldr	r2, [pc, #624]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099ea:	430b      	orrs	r3, r1
 80099ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ee:	e003      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f002 0308 	and.w	r3, r2, #8
 8009a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a0e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a12:	460b      	mov	r3, r1
 8009a14:	4313      	orrs	r3, r2
 8009a16:	d01e      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a24:	d10c      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	3328      	adds	r3, #40	@ 0x28
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 fc5c 	bl	800b2ec <RCCEx_PLL3_Config>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a40:	4b86      	ldr	r3, [pc, #536]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a50:	4a82      	ldr	r2, [pc, #520]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a52:	430b      	orrs	r3, r1
 8009a54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f002 0310 	and.w	r3, r2, #16
 8009a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a66:	2300      	movs	r3, #0
 8009a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a6c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a70:	460b      	mov	r3, r1
 8009a72:	4313      	orrs	r3, r2
 8009a74:	d01e      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a82:	d10c      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a88:	3328      	adds	r3, #40	@ 0x28
 8009a8a:	2102      	movs	r1, #2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 fc2d 	bl	800b2ec <RCCEx_PLL3_Config>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aae:	4a6b      	ldr	r2, [pc, #428]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ac6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d03e      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009adc:	d022      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ae2:	d81b      	bhi.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aec:	d00b      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009aee:	e015      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	3308      	adds	r3, #8
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fb45 	bl	800b188 <RCCEx_PLL2_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b04:	e00f      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0a:	3328      	adds	r3, #40	@ 0x28
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 fbec 	bl	800b2ec <RCCEx_PLL3_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b1a:	e004      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b22:	e000      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10b      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b3e:	4a47      	ldr	r2, [pc, #284]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b44:	e003      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b64:	460b      	mov	r3, r1
 8009b66:	4313      	orrs	r3, r2
 8009b68:	d03b      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b76:	d01f      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009b78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b7c:	d818      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b82:	d003      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b88:	d007      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009b8a:	e011      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8c:	4b33      	ldr	r3, [pc, #204]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b90:	4a32      	ldr	r2, [pc, #200]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b98:	e00f      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9e:	3328      	adds	r3, #40	@ 0x28
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fba2 	bl	800b2ec <RCCEx_PLL3_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bae:	e004      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bb6:	e000      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bc2:	4b26      	ldr	r3, [pc, #152]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bd2:	4a22      	ldr	r2, [pc, #136]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bd8:	e003      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009bee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bf4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	d034      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c0c:	d007      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c0e:	e011      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c10:	4b12      	ldr	r3, [pc, #72]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c14:	4a11      	ldr	r2, [pc, #68]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c1c:	e00e      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c22:	3308      	adds	r3, #8
 8009c24:	2102      	movs	r1, #2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f001 faae 	bl	800b188 <RCCEx_PLL2_Config>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10d      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c44:	4b05      	ldr	r3, [pc, #20]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c52:	4a02      	ldr	r2, [pc, #8]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c54:	430b      	orrs	r3, r1
 8009c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c5a:	bf00      	nop
 8009c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c76:	2300      	movs	r3, #0
 8009c78:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c7a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d00c      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c88:	3328      	adds	r3, #40	@ 0x28
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 fb2d 	bl	800b2ec <RCCEx_PLL3_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009caa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cac:	2300      	movs	r3, #0
 8009cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cb0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d036      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc4:	d018      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cca:	d811      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd0:	d014      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd6:	d80b      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d011      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce0:	d106      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce2:	4bb7      	ldr	r3, [pc, #732]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce6:	4ab6      	ldr	r2, [pc, #728]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009cee:	e008      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cf6:	e004      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cf8:	bf00      	nop
 8009cfa:	e002      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d0a:	4bad      	ldr	r3, [pc, #692]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d18:	4aa9      	ldr	r2, [pc, #676]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d1a:	430b      	orrs	r3, r1
 8009d1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d1e:	e003      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d36:	2300      	movs	r3, #0
 8009d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4313      	orrs	r3, r2
 8009d42:	d009      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d44:	4b9e      	ldr	r3, [pc, #632]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d52:	4a9b      	ldr	r2, [pc, #620]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d66:	2300      	movs	r3, #0
 8009d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4313      	orrs	r3, r2
 8009d72:	d009      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d74:	4b92      	ldr	r3, [pc, #584]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d78:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d82:	4a8f      	ldr	r2, [pc, #572]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d84:	430b      	orrs	r3, r1
 8009d86:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d96:	2300      	movs	r3, #0
 8009d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d9a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d00e      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009da4:	4b86      	ldr	r3, [pc, #536]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	4a85      	ldr	r2, [pc, #532]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009daa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009dae:	6113      	str	r3, [r2, #16]
 8009db0:	4b83      	ldr	r3, [pc, #524]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db2:	6919      	ldr	r1, [r3, #16]
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009dbc:	4a80      	ldr	r2, [pc, #512]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d009      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009dde:	4b78      	ldr	r3, [pc, #480]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dec:	4a74      	ldr	r2, [pc, #464]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dee:	430b      	orrs	r3, r1
 8009df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e00:	2300      	movs	r3, #0
 8009e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	d00a      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e12:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1e:	4a68      	ldr	r2, [pc, #416]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e20:	430b      	orrs	r3, r1
 8009e22:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e36:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	d011      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	3308      	adds	r3, #8
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 f99d 	bl	800b188 <RCCEx_PLL2_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6239      	str	r1, [r7, #32]
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	d011      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e84:	3308      	adds	r3, #8
 8009e86:	2101      	movs	r1, #1
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 f97d 	bl	800b188 <RCCEx_PLL2_Config>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	2100      	movs	r1, #0
 8009eae:	61b9      	str	r1, [r7, #24]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d011      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	2102      	movs	r1, #2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 f95d 	bl	800b188 <RCCEx_PLL2_Config>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	2100      	movs	r1, #0
 8009eee:	6139      	str	r1, [r7, #16]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009efa:	460b      	mov	r3, r1
 8009efc:	4313      	orrs	r3, r2
 8009efe:	d011      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f04:	3328      	adds	r3, #40	@ 0x28
 8009f06:	2100      	movs	r1, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 f9ef 	bl	800b2ec <RCCEx_PLL3_Config>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	d011      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	3328      	adds	r3, #40	@ 0x28
 8009f46:	2101      	movs	r1, #1
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 f9cf 	bl	800b2ec <RCCEx_PLL3_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6039      	str	r1, [r7, #0]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	607b      	str	r3, [r7, #4]
 8009f76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	d011      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f84:	3328      	adds	r3, #40	@ 0x28
 8009f86:	2102      	movs	r1, #2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 f9af 	bl	800b2ec <RCCEx_PLL3_Config>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009fa4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	e000      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fbe:	bf00      	nop
 8009fc0:	58024400 	.word	0x58024400

08009fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b090      	sub	sp, #64	@ 0x40
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	f040 8094 	bne.w	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	f200 8087 	bhi.w	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009fee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a009 	.word	0x0800a009
 8009ff8:	0800a031 	.word	0x0800a031
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a0f5 	.word	0x0800a0f5
 800a004:	0800a081 	.word	0x0800a081
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a008:	4b90      	ldr	r3, [pc, #576]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a014:	d108      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 ff62 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a024:	f000 bc93 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a02c:	f000 bc8f 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a030:	4b86      	ldr	r3, [pc, #536]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a03c:	d108      	bne.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a03e:	f107 0318 	add.w	r3, r7, #24
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fca6 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a04c:	f000 bc7f 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a054:	f000 bc7b 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a058:	4b7c      	ldr	r3, [pc, #496]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a064:	d108      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fde6 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a074:	f000 bc6b 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07c:	f000 bc67 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a080:	4b72      	ldr	r3, [pc, #456]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a088:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a08a:	4b70      	ldr	r3, [pc, #448]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d10c      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a09c:	4b6b      	ldr	r3, [pc, #428]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	08db      	lsrs	r3, r3, #3
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	4a6a      	ldr	r2, [pc, #424]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ae:	e01f      	b.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0b0:	4b66      	ldr	r3, [pc, #408]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0bc:	d106      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0c4:	d102      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0c6:	4b63      	ldr	r3, [pc, #396]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ca:	e011      	b.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0d8:	d106      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0e2:	4b5d      	ldr	r3, [pc, #372]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0e6:	e003      	b.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0ec:	f000 bc2f 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0f0:	f000 bc2d 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0f4:	4b59      	ldr	r3, [pc, #356]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f8:	f000 bc29 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a100:	f000 bc25 	b.w	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a108:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a10c:	430b      	orrs	r3, r1
 800a10e:	f040 80a7 	bne.w	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a112:	4b4e      	ldr	r3, [pc, #312]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a116:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a11a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a122:	d054      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a12a:	f200 808b 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a134:	f000 8083 	beq.w	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a13e:	f200 8081 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a148:	d02f      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a150:	d878      	bhi.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a15e:	d012      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a160:	e070      	b.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a162:	4b3a      	ldr	r3, [pc, #232]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a16a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a16e:	d107      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a174:	4618      	mov	r0, r3
 800a176:	f000 feb5 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a17e:	e3e6      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a184:	e3e3      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a186:	4b31      	ldr	r3, [pc, #196]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a18e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a192:	d107      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a194:	f107 0318 	add.w	r3, r7, #24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fbfb 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a2:	e3d4      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a8:	e3d1      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1aa:	4b28      	ldr	r3, [pc, #160]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1b8:	f107 030c 	add.w	r3, r7, #12
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fd3d 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c6:	e3c2      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1cc:	e3bf      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1ce:	4b1f      	ldr	r3, [pc, #124]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d10c      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ea:	4b18      	ldr	r3, [pc, #96]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	08db      	lsrs	r3, r3, #3
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	4a16      	ldr	r2, [pc, #88]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1fc:	e01e      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1fe:	4b13      	ldr	r3, [pc, #76]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20a:	d106      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a20e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a212:	d102      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a214:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a218:	e010      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a21a:	4b0c      	ldr	r3, [pc, #48]	@ (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a226:	d106      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22e:	d102      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a230:	4b09      	ldr	r3, [pc, #36]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a234:	e002      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a23a:	e388      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a23c:	e387      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a23e:	4b07      	ldr	r3, [pc, #28]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a242:	e384      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a248:	e381      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a24a:	bf00      	nop
 800a24c:	58024400 	.word	0x58024400
 800a250:	03d09000 	.word	0x03d09000
 800a254:	003d0900 	.word	0x003d0900
 800a258:	007a1200 	.word	0x007a1200
 800a25c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a264:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a268:	430b      	orrs	r3, r1
 800a26a:	f040 809c 	bne.w	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a26e:	4b9e      	ldr	r3, [pc, #632]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a272:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a276:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a27e:	d054      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a286:	f200 808b 	bhi.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a290:	f000 8083 	beq.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a29a:	f200 8081 	bhi.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2a4:	d02f      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ac:	d878      	bhi.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2ba:	d012      	beq.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a2bc:	e070      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2be:	4b8a      	ldr	r3, [pc, #552]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ca:	d107      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fe07 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2da:	e338      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e0:	e335      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2e2:	4b81      	ldr	r3, [pc, #516]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ee:	d107      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f0:	f107 0318 	add.w	r3, r7, #24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fb4d 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fe:	e326      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a304:	e323      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a306:	4b78      	ldr	r3, [pc, #480]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a30e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a312:	d107      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a314:	f107 030c 	add.w	r3, r7, #12
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fc8f 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a322:	e314      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e311      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a32a:	4b6f      	ldr	r3, [pc, #444]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a32e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a332:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a334:	4b6c      	ldr	r3, [pc, #432]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d10c      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a346:	4b68      	ldr	r3, [pc, #416]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	08db      	lsrs	r3, r3, #3
 800a34c:	f003 0303 	and.w	r3, r3, #3
 800a350:	4a66      	ldr	r2, [pc, #408]	@ (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a352:	fa22 f303 	lsr.w	r3, r2, r3
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a358:	e01e      	b.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a35a:	4b63      	ldr	r3, [pc, #396]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a366:	d106      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a36e:	d102      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a370:	4b5f      	ldr	r3, [pc, #380]	@ (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a374:	e010      	b.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a376:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a37e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a382:	d106      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a38a:	d102      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a38c:	4b59      	ldr	r3, [pc, #356]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a396:	e2da      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a398:	e2d9      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a39a:	4b57      	ldr	r3, [pc, #348]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39e:	e2d6      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a4:	e2d3      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3aa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	f040 80a7 	bne.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a3b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3c4:	d055      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3cc:	f200 8096 	bhi.w	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3d6:	f000 8084 	beq.w	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3e0:	f200 808c 	bhi.w	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ea:	d030      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3f2:	f200 8083 	bhi.w	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a402:	d012      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a404:	e07a      	b.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a406:	4b38      	ldr	r3, [pc, #224]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a40e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fd63 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a422:	e294      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e291      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a42a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a436:	d107      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a438:	f107 0318 	add.w	r3, r7, #24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 faa9 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	e282      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e27f      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44e:	4b26      	ldr	r3, [pc, #152]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45c:	f107 030c 	add.w	r3, r7, #12
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fbeb 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e270      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e26d      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a472:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a47a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a47c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b04      	cmp	r3, #4
 800a486:	d10c      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d109      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a48e:	4b16      	ldr	r3, [pc, #88]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	4a14      	ldr	r2, [pc, #80]	@ (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a0:	e01e      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a2:	4b11      	ldr	r3, [pc, #68]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ae:	d106      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4b6:	d102      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4bc:	e010      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4be:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ca:	d106      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d2:	d102      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d4:	4b07      	ldr	r3, [pc, #28]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4d8:	e002      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4de:	e236      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4e0:	e235      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4e2:	4b05      	ldr	r3, [pc, #20]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e6:	e232      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	003d0900 	.word	0x003d0900
 800a4f4:	007a1200 	.word	0x007a1200
 800a4f8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a500:	e225      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a506:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a50a:	430b      	orrs	r3, r1
 800a50c:	f040 8085 	bne.w	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a510:	4b9c      	ldr	r3, [pc, #624]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a514:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a518:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a520:	d06b      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a528:	d874      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a530:	d056      	beq.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a538:	d86c      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a540:	d03b      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a548:	d864      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a550:	d021      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a558:	d85c      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a566:	d004      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a568:	e054      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a56a:	f7fe fb5f 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800a56e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a570:	e1ed      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a572:	4b84      	ldr	r3, [pc, #528]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a57a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a57e:	d107      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a580:	f107 0318 	add.w	r3, r7, #24
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fa05 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58e:	e1de      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a594:	e1db      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a596:	4b7b      	ldr	r3, [pc, #492]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a59e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5a4:	f107 030c 	add.w	r3, r7, #12
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fb47 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b2:	e1cc      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e1c9      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5ba:	4b72      	ldr	r3, [pc, #456]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d109      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5c6:	4b6f      	ldr	r3, [pc, #444]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	08db      	lsrs	r3, r3, #3
 800a5cc:	f003 0303 	and.w	r3, r3, #3
 800a5d0:	4a6d      	ldr	r2, [pc, #436]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d8:	e1b9      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5de:	e1b6      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5e0:	4b68      	ldr	r3, [pc, #416]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ec:	d102      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a5ee:	4b67      	ldr	r3, [pc, #412]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f2:	e1ac      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f8:	e1a9      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5fa:	4b62      	ldr	r3, [pc, #392]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a606:	d102      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a608:	4b61      	ldr	r3, [pc, #388]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a60c:	e19f      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a612:	e19c      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a618:	e199      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a61e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a622:	430b      	orrs	r3, r1
 800a624:	d173      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a626:	4b57      	ldr	r3, [pc, #348]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a62a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a62e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a636:	d02f      	beq.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a63e:	d863      	bhi.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	d004      	beq.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a64c:	d012      	beq.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a64e:	e05b      	b.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a650:	4b4c      	ldr	r3, [pc, #304]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a65c:	d107      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65e:	f107 0318 	add.w	r3, r7, #24
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f996 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66c:	e16f      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e16c      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a674:	4b43      	ldr	r3, [pc, #268]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a67c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a680:	d107      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a682:	f107 030c 	add.w	r3, r7, #12
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fad8 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a690:	e15d      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a696:	e15a      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a698:	4b3a      	ldr	r3, [pc, #232]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a69a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a69c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a2:	4b38      	ldr	r3, [pc, #224]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d10c      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b4:	4b33      	ldr	r3, [pc, #204]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	08db      	lsrs	r3, r3, #3
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	4a32      	ldr	r2, [pc, #200]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c6:	e01e      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d4:	d106      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6dc:	d102      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6de:	4b2b      	ldr	r3, [pc, #172]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e2:	e010      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e4:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6f0:	d106      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f8:	d102      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6fa:	4b25      	ldr	r3, [pc, #148]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fe:	e002      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a704:	e123      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a706:	e122      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	e11f      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a70e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a712:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a716:	430b      	orrs	r3, r1
 800a718:	d13c      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a71a:	4b1a      	ldr	r3, [pc, #104]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a71e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a722:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a730:	d012      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a732:	e023      	b.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a734:	4b13      	ldr	r3, [pc, #76]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a73c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a740:	d107      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fbcc 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a750:	e0fd      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a756:	e0fa      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a758:	4b0a      	ldr	r3, [pc, #40]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a764:	d107      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a766:	f107 0318 	add.w	r3, r7, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f912 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a774:	e0eb      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77a:	e0e8      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	e0e5      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a782:	bf00      	nop
 800a784:	58024400 	.word	0x58024400
 800a788:	03d09000 	.word	0x03d09000
 800a78c:	003d0900 	.word	0x003d0900
 800a790:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a798:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a79c:	430b      	orrs	r3, r1
 800a79e:	f040 8085 	bne.w	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7a2:	4b6d      	ldr	r3, [pc, #436]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a7aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7b2:	d06b      	beq.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7ba:	d874      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7c2:	d056      	beq.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ca:	d86c      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7d2:	d03b      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7da:	d864      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e2:	d021      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ea:	d85c      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f8:	d004      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a7fa:	e054      	b.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7fc:	f000 f8b4 	bl	800a968 <HAL_RCCEx_GetD3PCLK1Freq>
 800a800:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a802:	e0a4      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a804:	4b54      	ldr	r3, [pc, #336]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a80c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a810:	d107      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a812:	f107 0318 	add.w	r3, r7, #24
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f8bc 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a820:	e095      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a826:	e092      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a828:	4b4b      	ldr	r3, [pc, #300]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a834:	d107      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f9fe 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a844:	e083      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e080      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a84c:	4b42      	ldr	r3, [pc, #264]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b04      	cmp	r3, #4
 800a856:	d109      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a858:	4b3f      	ldr	r3, [pc, #252]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	08db      	lsrs	r3, r3, #3
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	4a3e      	ldr	r2, [pc, #248]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a864:	fa22 f303 	lsr.w	r3, r2, r3
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86a:	e070      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a870:	e06d      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a872:	4b39      	ldr	r3, [pc, #228]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a87e:	d102      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a880:	4b37      	ldr	r3, [pc, #220]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a884:	e063      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88a:	e060      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a88c:	4b32      	ldr	r3, [pc, #200]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a898:	d102      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a89a:	4b32      	ldr	r3, [pc, #200]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89e:	e056      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e053      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e050      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a8ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	d148      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a8b8:	4b27      	ldr	r3, [pc, #156]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8c8:	d02a      	beq.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d0:	d838      	bhi.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8de:	d00d      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a8e0:	e030      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ee:	d102      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f4:	e02b      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fa:	e028      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8fc:	4b16      	ldr	r3, [pc, #88]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a908:	d107      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a90a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fae8 	bl	800aee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a918:	e019      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91e:	e016      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a920:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a92c:	d107      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92e:	f107 0318 	add.w	r3, r7, #24
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f82e 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93c:	e007      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a942:	e004      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e001      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a950:	4618      	mov	r0, r3
 800a952:	3740      	adds	r7, #64	@ 0x40
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	58024400 	.word	0x58024400
 800a95c:	03d09000 	.word	0x03d09000
 800a960:	003d0900 	.word	0x003d0900
 800a964:	007a1200 	.word	0x007a1200

0800a968 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a96c:	f7fe f92e 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 800a970:	4602      	mov	r2, r0
 800a972:	4b06      	ldr	r3, [pc, #24]	@ (800a98c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	091b      	lsrs	r3, r3, #4
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	4904      	ldr	r1, [pc, #16]	@ (800a990 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a97e:	5ccb      	ldrb	r3, [r1, r3]
 800a980:	f003 031f 	and.w	r3, r3, #31
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a988:	4618      	mov	r0, r3
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	58024400 	.word	0x58024400
 800a990:	08010514 	.word	0x08010514

0800a994 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a994:	b480      	push	{r7}
 800a996:	b089      	sub	sp, #36	@ 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a99c:	4ba1      	ldr	r3, [pc, #644]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f003 0303 	and.w	r3, r3, #3
 800a9a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9a6:	4b9f      	ldr	r3, [pc, #636]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9aa:	0b1b      	lsrs	r3, r3, #12
 800a9ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b6:	091b      	lsrs	r3, r3, #4
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9be:	4b99      	ldr	r3, [pc, #612]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c2:	08db      	lsrs	r3, r3, #3
 800a9c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 8111 	beq.w	800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	f000 8083 	beq.w	800aaf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	f200 80a1 	bhi.w	800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d056      	beq.n	800aaac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9fe:	e099      	b.n	800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa00:	4b88      	ldr	r3, [pc, #544]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0320 	and.w	r3, r3, #32
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d02d      	beq.n	800aa68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa0c:	4b85      	ldr	r3, [pc, #532]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	08db      	lsrs	r3, r3, #3
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	4a84      	ldr	r2, [pc, #528]	@ (800ac28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	ee07 3a90 	vmov	s15, r3
 800aa24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa36:	4b7b      	ldr	r3, [pc, #492]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa46:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa66:	e087      	b.n	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7a:	4b6a      	ldr	r3, [pc, #424]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaaa:	e065      	b.n	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabe:	4b59      	ldr	r3, [pc, #356]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aace:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaee:	e043      	b.n	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab02:	4b48      	ldr	r3, [pc, #288]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab32:	e021      	b.n	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab46:	4b37      	ldr	r3, [pc, #220]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab78:	4b2a      	ldr	r3, [pc, #168]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7c:	0a5b      	lsrs	r3, r3, #9
 800ab7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab92:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9e:	ee17 2a90 	vmov	r2, s15
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aba6:	4b1f      	ldr	r3, [pc, #124]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	0c1b      	lsrs	r3, r3, #16
 800abac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abb0:	ee07 3a90 	vmov	s15, r3
 800abb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abcc:	ee17 2a90 	vmov	r2, s15
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abd4:	4b13      	ldr	r3, [pc, #76]	@ (800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd8:	0e1b      	lsrs	r3, r3, #24
 800abda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abee:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfa:	ee17 2a90 	vmov	r2, s15
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac02:	e008      	b.n	800ac16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	609a      	str	r2, [r3, #8]
}
 800ac16:	bf00      	nop
 800ac18:	3724      	adds	r7, #36	@ 0x24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	58024400 	.word	0x58024400
 800ac28:	03d09000 	.word	0x03d09000
 800ac2c:	46000000 	.word	0x46000000
 800ac30:	4c742400 	.word	0x4c742400
 800ac34:	4a742400 	.word	0x4a742400
 800ac38:	4af42400 	.word	0x4af42400

0800ac3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b089      	sub	sp, #36	@ 0x24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac44:	4ba1      	ldr	r3, [pc, #644]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac48:	f003 0303 	and.w	r3, r3, #3
 800ac4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac4e:	4b9f      	ldr	r3, [pc, #636]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac52:	0d1b      	lsrs	r3, r3, #20
 800ac54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac5a:	4b9c      	ldr	r3, [pc, #624]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5e:	0a1b      	lsrs	r3, r3, #8
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac66:	4b99      	ldr	r3, [pc, #612]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	fb02 f303 	mul.w	r3, r2, r3
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8111 	beq.w	800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	f000 8083 	beq.w	800ad98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	f200 80a1 	bhi.w	800addc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d056      	beq.n	800ad54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aca6:	e099      	b.n	800addc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca8:	4b88      	ldr	r3, [pc, #544]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0320 	and.w	r3, r3, #32
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d02d      	beq.n	800ad10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acb4:	4b85      	ldr	r3, [pc, #532]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	08db      	lsrs	r3, r3, #3
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	4a84      	ldr	r2, [pc, #528]	@ (800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
 800acc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acde:	4b7b      	ldr	r3, [pc, #492]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acee:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad0e:	e087      	b.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad22:	4b6a      	ldr	r3, [pc, #424]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad52:	e065      	b.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad66:	4b59      	ldr	r3, [pc, #356]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad96:	e043      	b.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ada6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adaa:	4b48      	ldr	r3, [pc, #288]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adba:	ed97 6a03 	vldr	s12, [r7, #12]
 800adbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adda:	e021      	b.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adee:	4b37      	ldr	r3, [pc, #220]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae20:	4b2a      	ldr	r3, [pc, #168]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae24:	0a5b      	lsrs	r3, r3, #9
 800ae26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae46:	ee17 2a90 	vmov	r2, s15
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae4e:	4b1f      	ldr	r3, [pc, #124]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae52:	0c1b      	lsrs	r3, r3, #16
 800ae54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae74:	ee17 2a90 	vmov	r2, s15
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae7c:	4b13      	ldr	r3, [pc, #76]	@ (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae80:	0e1b      	lsrs	r3, r3, #24
 800ae82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea2:	ee17 2a90 	vmov	r2, s15
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aeaa:	e008      	b.n	800aebe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	609a      	str	r2, [r3, #8]
}
 800aebe:	bf00      	nop
 800aec0:	3724      	adds	r7, #36	@ 0x24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	46000000 	.word	0x46000000
 800aed8:	4c742400 	.word	0x4c742400
 800aedc:	4a742400 	.word	0x4a742400
 800aee0:	4af42400 	.word	0x4af42400

0800aee4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b089      	sub	sp, #36	@ 0x24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeec:	4ba0      	ldr	r3, [pc, #640]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aef6:	4b9e      	ldr	r3, [pc, #632]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefa:	091b      	lsrs	r3, r3, #4
 800aefc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af02:	4b9b      	ldr	r3, [pc, #620]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af0c:	4b98      	ldr	r3, [pc, #608]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af10:	08db      	lsrs	r3, r3, #3
 800af12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	fb02 f303 	mul.w	r3, r2, r3
 800af1c:	ee07 3a90 	vmov	s15, r3
 800af20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8111 	beq.w	800b152 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b02      	cmp	r3, #2
 800af34:	f000 8083 	beq.w	800b03e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	f200 80a1 	bhi.w	800b082 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d056      	beq.n	800affa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af4c:	e099      	b.n	800b082 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af4e:	4b88      	ldr	r3, [pc, #544]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d02d      	beq.n	800afb6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af5a:	4b85      	ldr	r3, [pc, #532]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	08db      	lsrs	r3, r3, #3
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	4a83      	ldr	r2, [pc, #524]	@ (800b174 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af66:	fa22 f303 	lsr.w	r3, r2, r3
 800af6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af84:	4b7a      	ldr	r3, [pc, #488]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8c:	ee07 3a90 	vmov	s15, r3
 800af90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af94:	ed97 6a03 	vldr	s12, [r7, #12]
 800af98:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afb4:	e087      	b.n	800b0c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afc8:	4b69      	ldr	r3, [pc, #420]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd0:	ee07 3a90 	vmov	s15, r3
 800afd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afdc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff8:	e065      	b.n	800b0c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b004:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b180 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b00c:	4b58      	ldr	r3, [pc, #352]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b020:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b02c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b038:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b03c:	e043      	b.n	800b0c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b048:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b04c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b050:	4b47      	ldr	r3, [pc, #284]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b058:	ee07 3a90 	vmov	s15, r3
 800b05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b060:	ed97 6a03 	vldr	s12, [r7, #12]
 800b064:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b06c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b07c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b080:	e021      	b.n	800b0c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	ee07 3a90 	vmov	s15, r3
 800b088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b094:	4b36      	ldr	r3, [pc, #216]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09c:	ee07 3a90 	vmov	s15, r3
 800b0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ca:	0a5b      	lsrs	r3, r3, #9
 800b0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0d0:	ee07 3a90 	vmov	s15, r3
 800b0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ec:	ee17 2a90 	vmov	r2, s15
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f8:	0c1b      	lsrs	r3, r3, #16
 800b0fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b10a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b10e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b11a:	ee17 2a90 	vmov	r2, s15
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b122:	4b13      	ldr	r3, [pc, #76]	@ (800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b126:	0e1b      	lsrs	r3, r3, #24
 800b128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b12c:	ee07 3a90 	vmov	s15, r3
 800b130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b134:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b13c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b148:	ee17 2a90 	vmov	r2, s15
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b150:	e008      	b.n	800b164 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	609a      	str	r2, [r3, #8]
}
 800b164:	bf00      	nop
 800b166:	3724      	adds	r7, #36	@ 0x24
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	58024400 	.word	0x58024400
 800b174:	03d09000 	.word	0x03d09000
 800b178:	46000000 	.word	0x46000000
 800b17c:	4c742400 	.word	0x4c742400
 800b180:	4a742400 	.word	0x4a742400
 800b184:	4af42400 	.word	0x4af42400

0800b188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b196:	4b53      	ldr	r3, [pc, #332]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b19a:	f003 0303 	and.w	r3, r3, #3
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d101      	bne.n	800b1a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e099      	b.n	800b2da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b1ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b2:	f7f6 fe51 	bl	8001e58 <HAL_GetTick>
 800b1b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1b8:	e008      	b.n	800b1cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1ba:	f7f6 fe4d 	bl	8001e58 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d901      	bls.n	800b1cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e086      	b.n	800b2da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1cc:	4b45      	ldr	r3, [pc, #276]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1f0      	bne.n	800b1ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1d8:	4b42      	ldr	r3, [pc, #264]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	031b      	lsls	r3, r3, #12
 800b1e6:	493f      	ldr	r1, [pc, #252]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	025b      	lsls	r3, r3, #9
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	3b01      	subs	r3, #1
 800b208:	041b      	lsls	r3, r3, #16
 800b20a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b20e:	431a      	orrs	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	3b01      	subs	r3, #1
 800b216:	061b      	lsls	r3, r3, #24
 800b218:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b21c:	4931      	ldr	r1, [pc, #196]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b222:	4b30      	ldr	r3, [pc, #192]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	492d      	ldr	r1, [pc, #180]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b230:	4313      	orrs	r3, r2
 800b232:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b234:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	f023 0220 	bic.w	r2, r3, #32
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	4928      	ldr	r1, [pc, #160]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b242:	4313      	orrs	r3, r2
 800b244:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b246:	4b27      	ldr	r3, [pc, #156]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24a:	4a26      	ldr	r2, [pc, #152]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b24c:	f023 0310 	bic.w	r3, r3, #16
 800b250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b252:	4b24      	ldr	r3, [pc, #144]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b256:	4b24      	ldr	r3, [pc, #144]	@ (800b2e8 <RCCEx_PLL2_Config+0x160>)
 800b258:	4013      	ands	r3, r2
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	69d2      	ldr	r2, [r2, #28]
 800b25e:	00d2      	lsls	r2, r2, #3
 800b260:	4920      	ldr	r1, [pc, #128]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b262:	4313      	orrs	r3, r2
 800b264:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b266:	4b1f      	ldr	r3, [pc, #124]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26a:	4a1e      	ldr	r2, [pc, #120]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	f043 0310 	orr.w	r3, r3, #16
 800b270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d106      	bne.n	800b286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b278:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	4a19      	ldr	r2, [pc, #100]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b27e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b284:	e00f      	b.n	800b2a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d106      	bne.n	800b29a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b28c:	4b15      	ldr	r3, [pc, #84]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b290:	4a14      	ldr	r2, [pc, #80]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b298:	e005      	b.n	800b2a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b29a:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	4a11      	ldr	r2, [pc, #68]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b2a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b2ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2b2:	f7f6 fdd1 	bl	8001e58 <HAL_GetTick>
 800b2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2b8:	e008      	b.n	800b2cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2ba:	f7f6 fdcd 	bl	8001e58 <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d901      	bls.n	800b2cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e006      	b.n	800b2da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2cc:	4b05      	ldr	r3, [pc, #20]	@ (800b2e4 <RCCEx_PLL2_Config+0x15c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0f0      	beq.n	800b2ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	58024400 	.word	0x58024400
 800b2e8:	ffff0007 	.word	0xffff0007

0800b2ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2fa:	4b53      	ldr	r3, [pc, #332]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fe:	f003 0303 	and.w	r3, r3, #3
 800b302:	2b03      	cmp	r3, #3
 800b304:	d101      	bne.n	800b30a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e099      	b.n	800b43e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b30a:	4b4f      	ldr	r3, [pc, #316]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a4e      	ldr	r2, [pc, #312]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b316:	f7f6 fd9f 	bl	8001e58 <HAL_GetTick>
 800b31a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b31c:	e008      	b.n	800b330 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b31e:	f7f6 fd9b 	bl	8001e58 <HAL_GetTick>
 800b322:	4602      	mov	r2, r0
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d901      	bls.n	800b330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e086      	b.n	800b43e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b330:	4b45      	ldr	r3, [pc, #276]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1f0      	bne.n	800b31e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b33c:	4b42      	ldr	r3, [pc, #264]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b340:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	051b      	lsls	r3, r3, #20
 800b34a:	493f      	ldr	r1, [pc, #252]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	3b01      	subs	r3, #1
 800b356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	3b01      	subs	r3, #1
 800b360:	025b      	lsls	r3, r3, #9
 800b362:	b29b      	uxth	r3, r3
 800b364:	431a      	orrs	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	041b      	lsls	r3, r3, #16
 800b36e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	3b01      	subs	r3, #1
 800b37a:	061b      	lsls	r3, r3, #24
 800b37c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b380:	4931      	ldr	r1, [pc, #196]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b382:	4313      	orrs	r3, r2
 800b384:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b386:	4b30      	ldr	r3, [pc, #192]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	492d      	ldr	r1, [pc, #180]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b394:	4313      	orrs	r3, r2
 800b396:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b398:	4b2b      	ldr	r3, [pc, #172]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	4928      	ldr	r1, [pc, #160]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3aa:	4b27      	ldr	r3, [pc, #156]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	4a26      	ldr	r2, [pc, #152]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3b6:	4b24      	ldr	r3, [pc, #144]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3ba:	4b24      	ldr	r3, [pc, #144]	@ (800b44c <RCCEx_PLL3_Config+0x160>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	69d2      	ldr	r2, [r2, #28]
 800b3c2:	00d2      	lsls	r2, r2, #3
 800b3c4:	4920      	ldr	r1, [pc, #128]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	4a19      	ldr	r2, [pc, #100]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3e8:	e00f      	b.n	800b40a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d106      	bne.n	800b3fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3f0:	4b15      	ldr	r3, [pc, #84]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f4:	4a14      	ldr	r2, [pc, #80]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3fc:	e005      	b.n	800b40a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3fe:	4b12      	ldr	r3, [pc, #72]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	4a11      	ldr	r2, [pc, #68]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b404:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b408:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b40a:	4b0f      	ldr	r3, [pc, #60]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a0e      	ldr	r2, [pc, #56]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b416:	f7f6 fd1f 	bl	8001e58 <HAL_GetTick>
 800b41a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b41c:	e008      	b.n	800b430 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b41e:	f7f6 fd1b 	bl	8001e58 <HAL_GetTick>
 800b422:	4602      	mov	r2, r0
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d901      	bls.n	800b430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e006      	b.n	800b43e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b430:	4b05      	ldr	r3, [pc, #20]	@ (800b448 <RCCEx_PLL3_Config+0x15c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0f0      	beq.n	800b41e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	58024400 	.word	0x58024400
 800b44c:	ffff0007 	.word	0xffff0007

0800b450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e049      	b.n	800b4f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d106      	bne.n	800b47c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7f6 fb58 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f000 fb20 	bl	800bad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d001      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e05e      	b.n	800b5d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0201 	orr.w	r2, r2, #1
 800b52e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a2b      	ldr	r2, [pc, #172]	@ (800b5e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d02c      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b542:	d027      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a27      	ldr	r2, [pc, #156]	@ (800b5e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d022      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a26      	ldr	r2, [pc, #152]	@ (800b5ec <HAL_TIM_Base_Start_IT+0xec>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d01d      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a24      	ldr	r2, [pc, #144]	@ (800b5f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d018      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a23      	ldr	r2, [pc, #140]	@ (800b5f4 <HAL_TIM_Base_Start_IT+0xf4>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d013      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a21      	ldr	r2, [pc, #132]	@ (800b5f8 <HAL_TIM_Base_Start_IT+0xf8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d00e      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a20      	ldr	r2, [pc, #128]	@ (800b5fc <HAL_TIM_Base_Start_IT+0xfc>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d009      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a1e      	ldr	r2, [pc, #120]	@ (800b600 <HAL_TIM_Base_Start_IT+0x100>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d004      	beq.n	800b594 <HAL_TIM_Base_Start_IT+0x94>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a1d      	ldr	r2, [pc, #116]	@ (800b604 <HAL_TIM_Base_Start_IT+0x104>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d115      	bne.n	800b5c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	689a      	ldr	r2, [r3, #8]
 800b59a:	4b1b      	ldr	r3, [pc, #108]	@ (800b608 <HAL_TIM_Base_Start_IT+0x108>)
 800b59c:	4013      	ands	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b06      	cmp	r3, #6
 800b5a4:	d015      	beq.n	800b5d2 <HAL_TIM_Base_Start_IT+0xd2>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ac:	d011      	beq.n	800b5d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f042 0201 	orr.w	r2, r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5be:	e008      	b.n	800b5d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f042 0201 	orr.w	r2, r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	e000      	b.n	800b5d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	40010000 	.word	0x40010000
 800b5e8:	40000400 	.word	0x40000400
 800b5ec:	40000800 	.word	0x40000800
 800b5f0:	40000c00 	.word	0x40000c00
 800b5f4:	40010400 	.word	0x40010400
 800b5f8:	40001800 	.word	0x40001800
 800b5fc:	40014000 	.word	0x40014000
 800b600:	4000e000 	.word	0x4000e000
 800b604:	4000e400 	.word	0x4000e400
 800b608:	00010007 	.word	0x00010007

0800b60c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e08f      	b.n	800b740 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7f6 fa2f 	bl	8001a98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2202      	movs	r2, #2
 800b63e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6899      	ldr	r1, [r3, #8]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	4b3e      	ldr	r3, [pc, #248]	@ (800b748 <HAL_TIM_Encoder_Init+0x13c>)
 800b64e:	400b      	ands	r3, r1
 800b650:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3304      	adds	r3, #4
 800b65a:	4619      	mov	r1, r3
 800b65c:	4610      	mov	r0, r2
 800b65e:	f000 fa39 	bl	800bad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6a1b      	ldr	r3, [r3, #32]
 800b678:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4b31      	ldr	r3, [pc, #196]	@ (800b74c <HAL_TIM_Encoder_Init+0x140>)
 800b688:	4013      	ands	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	4313      	orrs	r3, r2
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b750 <HAL_TIM_Encoder_Init+0x144>)
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b754 <HAL_TIM_Encoder_Init+0x148>)
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	011a      	lsls	r2, r3, #4
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	031b      	lsls	r3, r3, #12
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b6da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b6e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	fffebff8 	.word	0xfffebff8
 800b74c:	fffffcfc 	.word	0xfffffcfc
 800b750:	fffff3f3 	.word	0xfffff3f3
 800b754:	ffff0f0f 	.word	0xffff0f0f

0800b758 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b768:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b770:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b778:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b780:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d110      	bne.n	800b7aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d102      	bne.n	800b794 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b78e:	7b7b      	ldrb	r3, [r7, #13]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d001      	beq.n	800b798 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e069      	b.n	800b86c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7a8:	e031      	b.n	800b80e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b04      	cmp	r3, #4
 800b7ae:	d110      	bne.n	800b7d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d102      	bne.n	800b7bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b7b6:	7b3b      	ldrb	r3, [r7, #12]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d001      	beq.n	800b7c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e055      	b.n	800b86c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7d0:	e01d      	b.n	800b80e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d108      	bne.n	800b7ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d105      	bne.n	800b7ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7de:	7b7b      	ldrb	r3, [r7, #13]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d102      	bne.n	800b7ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b7e4:	7b3b      	ldrb	r3, [r7, #12]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d001      	beq.n	800b7ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e03e      	b.n	800b86c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2202      	movs	r2, #2
 800b802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2202      	movs	r2, #2
 800b80a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d003      	beq.n	800b81c <HAL_TIM_Encoder_Start+0xc4>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b04      	cmp	r3, #4
 800b818:	d008      	beq.n	800b82c <HAL_TIM_Encoder_Start+0xd4>
 800b81a:	e00f      	b.n	800b83c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2201      	movs	r2, #1
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fa07 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800b82a:	e016      	b.n	800b85a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2201      	movs	r2, #1
 800b832:	2104      	movs	r1, #4
 800b834:	4618      	mov	r0, r3
 800b836:	f000 f9ff 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800b83a:	e00e      	b.n	800b85a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2201      	movs	r2, #1
 800b842:	2100      	movs	r1, #0
 800b844:	4618      	mov	r0, r3
 800b846:	f000 f9f7 	bl	800bc38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2201      	movs	r2, #1
 800b850:	2104      	movs	r1, #4
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f9f0 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800b858:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f042 0201 	orr.w	r2, r2, #1
 800b868:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d020      	beq.n	800b8d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01b      	beq.n	800b8d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f06f 0202 	mvn.w	r2, #2
 800b8a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f8e9 	bl	800ba96 <HAL_TIM_IC_CaptureCallback>
 800b8c4:	e005      	b.n	800b8d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f8db 	bl	800ba82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f8ec 	bl	800baaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d020      	beq.n	800b924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f003 0304 	and.w	r3, r3, #4
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01b      	beq.n	800b924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f06f 0204 	mvn.w	r2, #4
 800b8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f8c3 	bl	800ba96 <HAL_TIM_IC_CaptureCallback>
 800b910:	e005      	b.n	800b91e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f8b5 	bl	800ba82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f8c6 	bl	800baaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f003 0308 	and.w	r3, r3, #8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d020      	beq.n	800b970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01b      	beq.n	800b970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f06f 0208 	mvn.w	r2, #8
 800b940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2204      	movs	r2, #4
 800b946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f89d 	bl	800ba96 <HAL_TIM_IC_CaptureCallback>
 800b95c:	e005      	b.n	800b96a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f88f 	bl	800ba82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f8a0 	bl	800baaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f003 0310 	and.w	r3, r3, #16
 800b976:	2b00      	cmp	r3, #0
 800b978:	d020      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01b      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f06f 0210 	mvn.w	r2, #16
 800b98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2208      	movs	r2, #8
 800b992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f877 	bl	800ba96 <HAL_TIM_IC_CaptureCallback>
 800b9a8:	e005      	b.n	800b9b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f869 	bl	800ba82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f87a 	bl	800baaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0201 	mvn.w	r2, #1
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7f5 fda8 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00c      	beq.n	800ba0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f9e1 	bl	800bdd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00c      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d007      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f9d9 	bl	800bde4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00c      	beq.n	800ba56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d007      	beq.n	800ba56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ba4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f834 	bl	800babe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f003 0320 	and.w	r3, r3, #32
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00c      	beq.n	800ba7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f06f 0220 	mvn.w	r2, #32
 800ba72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f9a1 	bl	800bdbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
	...

0800bad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a4a      	ldr	r2, [pc, #296]	@ (800bc10 <TIM_Base_SetConfig+0x13c>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d013      	beq.n	800bb14 <TIM_Base_SetConfig+0x40>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf2:	d00f      	beq.n	800bb14 <TIM_Base_SetConfig+0x40>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a47      	ldr	r2, [pc, #284]	@ (800bc14 <TIM_Base_SetConfig+0x140>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00b      	beq.n	800bb14 <TIM_Base_SetConfig+0x40>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a46      	ldr	r2, [pc, #280]	@ (800bc18 <TIM_Base_SetConfig+0x144>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d007      	beq.n	800bb14 <TIM_Base_SetConfig+0x40>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a45      	ldr	r2, [pc, #276]	@ (800bc1c <TIM_Base_SetConfig+0x148>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <TIM_Base_SetConfig+0x40>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a44      	ldr	r2, [pc, #272]	@ (800bc20 <TIM_Base_SetConfig+0x14c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d108      	bne.n	800bb26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a39      	ldr	r2, [pc, #228]	@ (800bc10 <TIM_Base_SetConfig+0x13c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d027      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb34:	d023      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a36      	ldr	r2, [pc, #216]	@ (800bc14 <TIM_Base_SetConfig+0x140>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d01f      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a35      	ldr	r2, [pc, #212]	@ (800bc18 <TIM_Base_SetConfig+0x144>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d01b      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a34      	ldr	r2, [pc, #208]	@ (800bc1c <TIM_Base_SetConfig+0x148>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d017      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a33      	ldr	r2, [pc, #204]	@ (800bc20 <TIM_Base_SetConfig+0x14c>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d013      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a32      	ldr	r2, [pc, #200]	@ (800bc24 <TIM_Base_SetConfig+0x150>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d00f      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a31      	ldr	r2, [pc, #196]	@ (800bc28 <TIM_Base_SetConfig+0x154>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d00b      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a30      	ldr	r2, [pc, #192]	@ (800bc2c <TIM_Base_SetConfig+0x158>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d007      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a2f      	ldr	r2, [pc, #188]	@ (800bc30 <TIM_Base_SetConfig+0x15c>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d003      	beq.n	800bb7e <TIM_Base_SetConfig+0xaa>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a2e      	ldr	r2, [pc, #184]	@ (800bc34 <TIM_Base_SetConfig+0x160>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d108      	bne.n	800bb90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a16      	ldr	r2, [pc, #88]	@ (800bc10 <TIM_Base_SetConfig+0x13c>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d00f      	beq.n	800bbdc <TIM_Base_SetConfig+0x108>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a18      	ldr	r2, [pc, #96]	@ (800bc20 <TIM_Base_SetConfig+0x14c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d00b      	beq.n	800bbdc <TIM_Base_SetConfig+0x108>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a17      	ldr	r2, [pc, #92]	@ (800bc24 <TIM_Base_SetConfig+0x150>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d007      	beq.n	800bbdc <TIM_Base_SetConfig+0x108>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a16      	ldr	r2, [pc, #88]	@ (800bc28 <TIM_Base_SetConfig+0x154>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d003      	beq.n	800bbdc <TIM_Base_SetConfig+0x108>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a15      	ldr	r2, [pc, #84]	@ (800bc2c <TIM_Base_SetConfig+0x158>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d103      	bne.n	800bbe4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	691a      	ldr	r2, [r3, #16]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d105      	bne.n	800bc02 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f023 0201 	bic.w	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	611a      	str	r2, [r3, #16]
  }
}
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	40010000 	.word	0x40010000
 800bc14:	40000400 	.word	0x40000400
 800bc18:	40000800 	.word	0x40000800
 800bc1c:	40000c00 	.word	0x40000c00
 800bc20:	40010400 	.word	0x40010400
 800bc24:	40014000 	.word	0x40014000
 800bc28:	40014400 	.word	0x40014400
 800bc2c:	40014800 	.word	0x40014800
 800bc30:	4000e000 	.word	0x4000e000
 800bc34:	4000e400 	.word	0x4000e400

0800bc38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f003 031f 	and.w	r3, r3, #31
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a1a      	ldr	r2, [r3, #32]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	43db      	mvns	r3, r3
 800bc5a:	401a      	ands	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1a      	ldr	r2, [r3, #32]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f003 031f 	and.w	r3, r3, #31
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc70:	431a      	orrs	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	621a      	str	r2, [r3, #32]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
	...

0800bc84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d101      	bne.n	800bc9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc98:	2302      	movs	r3, #2
 800bc9a:	e077      	b.n	800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2202      	movs	r2, #2
 800bca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a35      	ldr	r2, [pc, #212]	@ (800bd98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d004      	beq.n	800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a34      	ldr	r2, [pc, #208]	@ (800bd9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d108      	bne.n	800bce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a25      	ldr	r2, [pc, #148]	@ (800bd98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d02c      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd0e:	d027      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a22      	ldr	r2, [pc, #136]	@ (800bda0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d022      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a21      	ldr	r2, [pc, #132]	@ (800bda4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d01d      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a1f      	ldr	r2, [pc, #124]	@ (800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d018      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a1a      	ldr	r2, [pc, #104]	@ (800bd9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d013      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d00e      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a1a      	ldr	r2, [pc, #104]	@ (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d009      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a18      	ldr	r2, [pc, #96]	@ (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d004      	beq.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a17      	ldr	r2, [pc, #92]	@ (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d10c      	bne.n	800bd7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	40010000 	.word	0x40010000
 800bd9c:	40010400 	.word	0x40010400
 800bda0:	40000400 	.word	0x40000400
 800bda4:	40000800 	.word	0x40000800
 800bda8:	40000c00 	.word	0x40000c00
 800bdac:	40001800 	.word	0x40001800
 800bdb0:	40014000 	.word	0x40014000
 800bdb4:	4000e000 	.word	0x4000e000
 800bdb8:	4000e400 	.word	0x4000e400

0800bdbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e042      	b.n	800be90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7f5 fef9 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2224      	movs	r2, #36	@ 0x24
 800be26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0201 	bic.w	r2, r2, #1
 800be38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 fafc 	bl	800d440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fc8d 	bl	800c768 <UART_SetConfig>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b01      	cmp	r3, #1
 800be52:	d101      	bne.n	800be58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e01b      	b.n	800be90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0201 	orr.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 fb7b 	bl	800d584 <UART_CheckIdleState>
 800be8e:	4603      	mov	r3, r0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	@ 0x28
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	4613      	mov	r3, r2
 800bea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d17b      	bne.n	800bfaa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <HAL_UART_Transmit+0x26>
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e074      	b.n	800bfac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2221      	movs	r2, #33	@ 0x21
 800bece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bed2:	f7f5 ffc1 	bl	8001e58 <HAL_GetTick>
 800bed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	88fa      	ldrh	r2, [r7, #6]
 800bedc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	88fa      	ldrh	r2, [r7, #6]
 800bee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bef0:	d108      	bne.n	800bf04 <HAL_UART_Transmit+0x6c>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e003      	b.n	800bf0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf0c:	e030      	b.n	800bf70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2200      	movs	r2, #0
 800bf16:	2180      	movs	r1, #128	@ 0x80
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f001 fbdd 	bl	800d6d8 <UART_WaitOnFlagUntilTimeout>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e03d      	b.n	800bfac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10b      	bne.n	800bf4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	3302      	adds	r3, #2
 800bf4a:	61bb      	str	r3, [r7, #24]
 800bf4c:	e007      	b.n	800bf5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1c8      	bne.n	800bf0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2200      	movs	r2, #0
 800bf84:	2140      	movs	r1, #64	@ 0x40
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f001 fba6 	bl	800d6d8 <UART_WaitOnFlagUntilTimeout>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e006      	b.n	800bfac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2220      	movs	r2, #32
 800bfa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e000      	b.n	800bfac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfaa:	2302      	movs	r3, #2
  }
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3720      	adds	r7, #32
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b0ba      	sub	sp, #232	@ 0xe8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bfda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bfde:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bfe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d11b      	bne.n	800c028 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d015      	beq.n	800c028 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b00      	cmp	r3, #0
 800c006:	d105      	bne.n	800c014 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c00c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d009      	beq.n	800c028 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 8377 	beq.w	800c70c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	4798      	blx	r3
      }
      return;
 800c026:	e371      	b.n	800c70c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 8123 	beq.w	800c278 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c032:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c036:	4b8d      	ldr	r3, [pc, #564]	@ (800c26c <HAL_UART_IRQHandler+0x2b8>)
 800c038:	4013      	ands	r3, r2
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c03e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c042:	4b8b      	ldr	r3, [pc, #556]	@ (800c270 <HAL_UART_IRQHandler+0x2bc>)
 800c044:	4013      	ands	r3, r2
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 8116 	beq.w	800c278 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d011      	beq.n	800c07c <HAL_UART_IRQHandler+0xc8>
 800c058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c05c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00b      	beq.n	800c07c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2201      	movs	r2, #1
 800c06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c072:	f043 0201 	orr.w	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c080:	f003 0302 	and.w	r3, r3, #2
 800c084:	2b00      	cmp	r3, #0
 800c086:	d011      	beq.n	800c0ac <HAL_UART_IRQHandler+0xf8>
 800c088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00b      	beq.n	800c0ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2202      	movs	r2, #2
 800c09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a2:	f043 0204 	orr.w	r2, r3, #4
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0b0:	f003 0304 	and.w	r3, r3, #4
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d011      	beq.n	800c0dc <HAL_UART_IRQHandler+0x128>
 800c0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2204      	movs	r2, #4
 800c0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0d2:	f043 0202 	orr.w	r2, r3, #2
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e0:	f003 0308 	and.w	r3, r3, #8
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d017      	beq.n	800c118 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c0f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c0f8:	4b5c      	ldr	r3, [pc, #368]	@ (800c26c <HAL_UART_IRQHandler+0x2b8>)
 800c0fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2208      	movs	r2, #8
 800c106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c10e:	f043 0208 	orr.w	r2, r3, #8
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c11c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <HAL_UART_IRQHandler+0x196>
 800c124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00c      	beq.n	800c14a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c140:	f043 0220 	orr.w	r2, r3, #32
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 82dd 	beq.w	800c710 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c15a:	f003 0320 	and.w	r3, r3, #32
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c166:	f003 0320 	and.w	r3, r3, #32
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c190:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c19e:	2b40      	cmp	r3, #64	@ 0x40
 800c1a0:	d005      	beq.n	800c1ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d054      	beq.n	800c258 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f001 fb00 	bl	800d7b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1be:	2b40      	cmp	r3, #64	@ 0x40
 800c1c0:	d146      	bne.n	800c250 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3308      	adds	r3, #8
 800c1c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c1d0:	e853 3f00 	ldrex	r3, [r3]
 800c1d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c1d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c1ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c1f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c1fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1d9      	bne.n	800c1c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c214:	2b00      	cmp	r3, #0
 800c216:	d017      	beq.n	800c248 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c21e:	4a15      	ldr	r2, [pc, #84]	@ (800c274 <HAL_UART_IRQHandler+0x2c0>)
 800c220:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f9 f9f1 	bl	8005610 <HAL_DMA_Abort_IT>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d019      	beq.n	800c268 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c23a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c242:	4610      	mov	r0, r2
 800c244:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c246:	e00f      	b.n	800c268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fa77 	bl	800c73c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24e:	e00b      	b.n	800c268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fa73 	bl	800c73c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c256:	e007      	b.n	800c268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fa6f 	bl	800c73c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c266:	e253      	b.n	800c710 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c268:	bf00      	nop
    return;
 800c26a:	e251      	b.n	800c710 <HAL_UART_IRQHandler+0x75c>
 800c26c:	10000001 	.word	0x10000001
 800c270:	04000120 	.word	0x04000120
 800c274:	0800d881 	.word	0x0800d881

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	f040 81e7 	bne.w	800c650 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c286:	f003 0310 	and.w	r3, r3, #16
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 81e0 	beq.w	800c650 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 81d9 	beq.w	800c650 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2210      	movs	r2, #16
 800c2a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2b0:	2b40      	cmp	r3, #64	@ 0x40
 800c2b2:	f040 8151 	bne.w	800c558 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a96      	ldr	r2, [pc, #600]	@ (800c518 <HAL_UART_IRQHandler+0x564>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d068      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a93      	ldr	r2, [pc, #588]	@ (800c51c <HAL_UART_IRQHandler+0x568>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d061      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a91      	ldr	r2, [pc, #580]	@ (800c520 <HAL_UART_IRQHandler+0x56c>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d05a      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a8e      	ldr	r2, [pc, #568]	@ (800c524 <HAL_UART_IRQHandler+0x570>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d053      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a8c      	ldr	r2, [pc, #560]	@ (800c528 <HAL_UART_IRQHandler+0x574>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d04c      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a89      	ldr	r2, [pc, #548]	@ (800c52c <HAL_UART_IRQHandler+0x578>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d045      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a87      	ldr	r2, [pc, #540]	@ (800c530 <HAL_UART_IRQHandler+0x57c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d03e      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a84      	ldr	r2, [pc, #528]	@ (800c534 <HAL_UART_IRQHandler+0x580>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d037      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a82      	ldr	r2, [pc, #520]	@ (800c538 <HAL_UART_IRQHandler+0x584>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d030      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a7f      	ldr	r2, [pc, #508]	@ (800c53c <HAL_UART_IRQHandler+0x588>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d029      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a7d      	ldr	r2, [pc, #500]	@ (800c540 <HAL_UART_IRQHandler+0x58c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d022      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a7a      	ldr	r2, [pc, #488]	@ (800c544 <HAL_UART_IRQHandler+0x590>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d01b      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a78      	ldr	r2, [pc, #480]	@ (800c548 <HAL_UART_IRQHandler+0x594>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d014      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a75      	ldr	r2, [pc, #468]	@ (800c54c <HAL_UART_IRQHandler+0x598>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d00d      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a73      	ldr	r2, [pc, #460]	@ (800c550 <HAL_UART_IRQHandler+0x59c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d006      	beq.n	800c396 <HAL_UART_IRQHandler+0x3e2>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a70      	ldr	r2, [pc, #448]	@ (800c554 <HAL_UART_IRQHandler+0x5a0>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d106      	bne.n	800c3a4 <HAL_UART_IRQHandler+0x3f0>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	e005      	b.n	800c3b0 <HAL_UART_IRQHandler+0x3fc>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c3b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 81ab 	beq.w	800c714 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	f080 81a3 	bcs.w	800c714 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e4:	f000 8087 	beq.w	800c4f6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c3fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c416:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c41e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c422:	e841 2300 	strex	r3, r2, [r1]
 800c426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c42a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1da      	bne.n	800c3e8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3308      	adds	r3, #8
 800c438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c444:	f023 0301 	bic.w	r3, r3, #1
 800c448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3308      	adds	r3, #8
 800c452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c456:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c45a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c45e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c462:	e841 2300 	strex	r3, r2, [r1]
 800c466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e1      	bne.n	800c432 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3308      	adds	r3, #8
 800c48e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c4a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e3      	bne.n	800c46e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4bc:	e853 3f00 	ldrex	r3, [r3]
 800c4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4c4:	f023 0310 	bic.w	r3, r3, #16
 800c4c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4de:	e841 2300 	strex	r3, r2, [r1]
 800c4e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1e4      	bne.n	800c4b4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7f8 fd6f 	bl	8004fd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c508:	b29b      	uxth	r3, r3
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f91d 	bl	800c750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c516:	e0fd      	b.n	800c714 <HAL_UART_IRQHandler+0x760>
 800c518:	40020010 	.word	0x40020010
 800c51c:	40020028 	.word	0x40020028
 800c520:	40020040 	.word	0x40020040
 800c524:	40020058 	.word	0x40020058
 800c528:	40020070 	.word	0x40020070
 800c52c:	40020088 	.word	0x40020088
 800c530:	400200a0 	.word	0x400200a0
 800c534:	400200b8 	.word	0x400200b8
 800c538:	40020410 	.word	0x40020410
 800c53c:	40020428 	.word	0x40020428
 800c540:	40020440 	.word	0x40020440
 800c544:	40020458 	.word	0x40020458
 800c548:	40020470 	.word	0x40020470
 800c54c:	40020488 	.word	0x40020488
 800c550:	400204a0 	.word	0x400204a0
 800c554:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c564:	b29b      	uxth	r3, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c572:	b29b      	uxth	r3, r3
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 80cf 	beq.w	800c718 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c57a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80ca 	beq.w	800c718 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c5a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5a8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5ae:	e841 2300 	strex	r3, r2, [r1]
 800c5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1e4      	bne.n	800c584 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	623b      	str	r3, [r7, #32]
   return(result);
 800c5ca:	6a3a      	ldr	r2, [r7, #32]
 800c5cc:	4b55      	ldr	r3, [pc, #340]	@ (800c724 <HAL_UART_IRQHandler+0x770>)
 800c5ce:	4013      	ands	r3, r2
 800c5d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3308      	adds	r3, #8
 800c5da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c5de:	633a      	str	r2, [r7, #48]	@ 0x30
 800c5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e6:	e841 2300 	strex	r3, r2, [r1]
 800c5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e3      	bne.n	800c5ba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2220      	movs	r2, #32
 800c5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	60fb      	str	r3, [r7, #12]
   return(result);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 0310 	bic.w	r3, r3, #16
 800c61a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c628:	61fb      	str	r3, [r7, #28]
 800c62a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62c:	69b9      	ldr	r1, [r7, #24]
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	e841 2300 	strex	r3, r2, [r1]
 800c634:	617b      	str	r3, [r7, #20]
   return(result);
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e4      	bne.n	800c606 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c646:	4619      	mov	r1, r3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f881 	bl	800c750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c64e:	e063      	b.n	800c718 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00e      	beq.n	800c67a <HAL_UART_IRQHandler+0x6c6>
 800c65c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d008      	beq.n	800c67a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f001 f945 	bl	800d902 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c678:	e051      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c682:	2b00      	cmp	r3, #0
 800c684:	d014      	beq.n	800c6b0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d008      	beq.n	800c6b0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d03a      	beq.n	800c71c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
    }
    return;
 800c6ae:	e035      	b.n	800c71c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d009      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x71c>
 800c6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d003      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f8ef 	bl	800d8ac <UART_EndTransmit_IT>
    return;
 800c6ce:	e026      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d009      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x73c>
 800c6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d003      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f001 f91e 	bl	800d92a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6ee:	e016      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d010      	beq.n	800c71e <HAL_UART_IRQHandler+0x76a>
 800c6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c700:	2b00      	cmp	r3, #0
 800c702:	da0c      	bge.n	800c71e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 f906 	bl	800d916 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c70a:	e008      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
      return;
 800c70c:	bf00      	nop
 800c70e:	e006      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
    return;
 800c710:	bf00      	nop
 800c712:	e004      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
      return;
 800c714:	bf00      	nop
 800c716:	e002      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
      return;
 800c718:	bf00      	nop
 800c71a:	e000      	b.n	800c71e <HAL_UART_IRQHandler+0x76a>
    return;
 800c71c:	bf00      	nop
  }
}
 800c71e:	37e8      	adds	r7, #232	@ 0xe8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	effffffe 	.word	0xeffffffe

0800c728 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c76c:	b092      	sub	sp, #72	@ 0x48
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	431a      	orrs	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	431a      	orrs	r2, r3
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	69db      	ldr	r3, [r3, #28]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4bbe      	ldr	r3, [pc, #760]	@ (800ca90 <UART_SetConfig+0x328>)
 800c798:	4013      	ands	r3, r2
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	6812      	ldr	r2, [r2, #0]
 800c79e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c7a0:	430b      	orrs	r3, r1
 800c7a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4ab3      	ldr	r2, [pc, #716]	@ (800ca94 <UART_SetConfig+0x32c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d004      	beq.n	800c7d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	4baf      	ldr	r3, [pc, #700]	@ (800ca98 <UART_SetConfig+0x330>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	6812      	ldr	r2, [r2, #0]
 800c7e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ee:	f023 010f 	bic.w	r1, r3, #15
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4aa6      	ldr	r2, [pc, #664]	@ (800ca9c <UART_SetConfig+0x334>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d177      	bne.n	800c8f8 <UART_SetConfig+0x190>
 800c808:	4ba5      	ldr	r3, [pc, #660]	@ (800caa0 <UART_SetConfig+0x338>)
 800c80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c80c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c810:	2b28      	cmp	r3, #40	@ 0x28
 800c812:	d86d      	bhi.n	800c8f0 <UART_SetConfig+0x188>
 800c814:	a201      	add	r2, pc, #4	@ (adr r2, 800c81c <UART_SetConfig+0xb4>)
 800c816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81a:	bf00      	nop
 800c81c:	0800c8c1 	.word	0x0800c8c1
 800c820:	0800c8f1 	.word	0x0800c8f1
 800c824:	0800c8f1 	.word	0x0800c8f1
 800c828:	0800c8f1 	.word	0x0800c8f1
 800c82c:	0800c8f1 	.word	0x0800c8f1
 800c830:	0800c8f1 	.word	0x0800c8f1
 800c834:	0800c8f1 	.word	0x0800c8f1
 800c838:	0800c8f1 	.word	0x0800c8f1
 800c83c:	0800c8c9 	.word	0x0800c8c9
 800c840:	0800c8f1 	.word	0x0800c8f1
 800c844:	0800c8f1 	.word	0x0800c8f1
 800c848:	0800c8f1 	.word	0x0800c8f1
 800c84c:	0800c8f1 	.word	0x0800c8f1
 800c850:	0800c8f1 	.word	0x0800c8f1
 800c854:	0800c8f1 	.word	0x0800c8f1
 800c858:	0800c8f1 	.word	0x0800c8f1
 800c85c:	0800c8d1 	.word	0x0800c8d1
 800c860:	0800c8f1 	.word	0x0800c8f1
 800c864:	0800c8f1 	.word	0x0800c8f1
 800c868:	0800c8f1 	.word	0x0800c8f1
 800c86c:	0800c8f1 	.word	0x0800c8f1
 800c870:	0800c8f1 	.word	0x0800c8f1
 800c874:	0800c8f1 	.word	0x0800c8f1
 800c878:	0800c8f1 	.word	0x0800c8f1
 800c87c:	0800c8d9 	.word	0x0800c8d9
 800c880:	0800c8f1 	.word	0x0800c8f1
 800c884:	0800c8f1 	.word	0x0800c8f1
 800c888:	0800c8f1 	.word	0x0800c8f1
 800c88c:	0800c8f1 	.word	0x0800c8f1
 800c890:	0800c8f1 	.word	0x0800c8f1
 800c894:	0800c8f1 	.word	0x0800c8f1
 800c898:	0800c8f1 	.word	0x0800c8f1
 800c89c:	0800c8e1 	.word	0x0800c8e1
 800c8a0:	0800c8f1 	.word	0x0800c8f1
 800c8a4:	0800c8f1 	.word	0x0800c8f1
 800c8a8:	0800c8f1 	.word	0x0800c8f1
 800c8ac:	0800c8f1 	.word	0x0800c8f1
 800c8b0:	0800c8f1 	.word	0x0800c8f1
 800c8b4:	0800c8f1 	.word	0x0800c8f1
 800c8b8:	0800c8f1 	.word	0x0800c8f1
 800c8bc:	0800c8e9 	.word	0x0800c8e9
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c6:	e326      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ce:	e322      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8d0:	2308      	movs	r3, #8
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d6:	e31e      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8d8:	2310      	movs	r3, #16
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8de:	e31a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8e0:	2320      	movs	r3, #32
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e6:	e316      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8e8:	2340      	movs	r3, #64	@ 0x40
 800c8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ee:	e312      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8f0:	2380      	movs	r3, #128	@ 0x80
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f6:	e30e      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a69      	ldr	r2, [pc, #420]	@ (800caa4 <UART_SetConfig+0x33c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d130      	bne.n	800c964 <UART_SetConfig+0x1fc>
 800c902:	4b67      	ldr	r3, [pc, #412]	@ (800caa0 <UART_SetConfig+0x338>)
 800c904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b05      	cmp	r3, #5
 800c90c:	d826      	bhi.n	800c95c <UART_SetConfig+0x1f4>
 800c90e:	a201      	add	r2, pc, #4	@ (adr r2, 800c914 <UART_SetConfig+0x1ac>)
 800c910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c914:	0800c92d 	.word	0x0800c92d
 800c918:	0800c935 	.word	0x0800c935
 800c91c:	0800c93d 	.word	0x0800c93d
 800c920:	0800c945 	.word	0x0800c945
 800c924:	0800c94d 	.word	0x0800c94d
 800c928:	0800c955 	.word	0x0800c955
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c932:	e2f0      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c934:	2304      	movs	r3, #4
 800c936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93a:	e2ec      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c93c:	2308      	movs	r3, #8
 800c93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c942:	e2e8      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c944:	2310      	movs	r3, #16
 800c946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94a:	e2e4      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c94c:	2320      	movs	r3, #32
 800c94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c952:	e2e0      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c954:	2340      	movs	r3, #64	@ 0x40
 800c956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95a:	e2dc      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c95c:	2380      	movs	r3, #128	@ 0x80
 800c95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c962:	e2d8      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a4f      	ldr	r2, [pc, #316]	@ (800caa8 <UART_SetConfig+0x340>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d130      	bne.n	800c9d0 <UART_SetConfig+0x268>
 800c96e:	4b4c      	ldr	r3, [pc, #304]	@ (800caa0 <UART_SetConfig+0x338>)
 800c970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c972:	f003 0307 	and.w	r3, r3, #7
 800c976:	2b05      	cmp	r3, #5
 800c978:	d826      	bhi.n	800c9c8 <UART_SetConfig+0x260>
 800c97a:	a201      	add	r2, pc, #4	@ (adr r2, 800c980 <UART_SetConfig+0x218>)
 800c97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c980:	0800c999 	.word	0x0800c999
 800c984:	0800c9a1 	.word	0x0800c9a1
 800c988:	0800c9a9 	.word	0x0800c9a9
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9b9 	.word	0x0800c9b9
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99e:	e2ba      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9a6:	e2b6      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ae:	e2b2      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b6:	e2ae      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9be:	e2aa      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9c0:	2340      	movs	r3, #64	@ 0x40
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c6:	e2a6      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9c8:	2380      	movs	r3, #128	@ 0x80
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ce:	e2a2      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a35      	ldr	r2, [pc, #212]	@ (800caac <UART_SetConfig+0x344>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d130      	bne.n	800ca3c <UART_SetConfig+0x2d4>
 800c9da:	4b31      	ldr	r3, [pc, #196]	@ (800caa0 <UART_SetConfig+0x338>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d826      	bhi.n	800ca34 <UART_SetConfig+0x2cc>
 800c9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ec <UART_SetConfig+0x284>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca0d 	.word	0x0800ca0d
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca1d 	.word	0x0800ca1d
 800c9fc:	0800ca25 	.word	0x0800ca25
 800ca00:	0800ca2d 	.word	0x0800ca2d
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0a:	e284      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca0c:	2304      	movs	r3, #4
 800ca0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca12:	e280      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca14:	2308      	movs	r3, #8
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1a:	e27c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca22:	e278      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca24:	2320      	movs	r3, #32
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2a:	e274      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca2c:	2340      	movs	r3, #64	@ 0x40
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca32:	e270      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca34:	2380      	movs	r3, #128	@ 0x80
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3a:	e26c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1b      	ldr	r2, [pc, #108]	@ (800cab0 <UART_SetConfig+0x348>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d142      	bne.n	800cacc <UART_SetConfig+0x364>
 800ca46:	4b16      	ldr	r3, [pc, #88]	@ (800caa0 <UART_SetConfig+0x338>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d838      	bhi.n	800cac4 <UART_SetConfig+0x35c>
 800ca52:	a201      	add	r2, pc, #4	@ (adr r2, 800ca58 <UART_SetConfig+0x2f0>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca71 	.word	0x0800ca71
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cabd 	.word	0x0800cabd
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca76:	e24e      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7e:	e24a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca80:	2308      	movs	r3, #8
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca86:	e246      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8e:	e242      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ca90:	cfff69f3 	.word	0xcfff69f3
 800ca94:	58000c00 	.word	0x58000c00
 800ca98:	11fff4ff 	.word	0x11fff4ff
 800ca9c:	40011000 	.word	0x40011000
 800caa0:	58024400 	.word	0x58024400
 800caa4:	40004400 	.word	0x40004400
 800caa8:	40004800 	.word	0x40004800
 800caac:	40004c00 	.word	0x40004c00
 800cab0:	40005000 	.word	0x40005000
 800cab4:	2320      	movs	r3, #32
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caba:	e22c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cabc:	2340      	movs	r3, #64	@ 0x40
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac2:	e228      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cac4:	2380      	movs	r3, #128	@ 0x80
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caca:	e224      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4ab1      	ldr	r2, [pc, #708]	@ (800cd98 <UART_SetConfig+0x630>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d176      	bne.n	800cbc4 <UART_SetConfig+0x45c>
 800cad6:	4bb1      	ldr	r3, [pc, #708]	@ (800cd9c <UART_SetConfig+0x634>)
 800cad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cade:	2b28      	cmp	r3, #40	@ 0x28
 800cae0:	d86c      	bhi.n	800cbbc <UART_SetConfig+0x454>
 800cae2:	a201      	add	r2, pc, #4	@ (adr r2, 800cae8 <UART_SetConfig+0x380>)
 800cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae8:	0800cb8d 	.word	0x0800cb8d
 800caec:	0800cbbd 	.word	0x0800cbbd
 800caf0:	0800cbbd 	.word	0x0800cbbd
 800caf4:	0800cbbd 	.word	0x0800cbbd
 800caf8:	0800cbbd 	.word	0x0800cbbd
 800cafc:	0800cbbd 	.word	0x0800cbbd
 800cb00:	0800cbbd 	.word	0x0800cbbd
 800cb04:	0800cbbd 	.word	0x0800cbbd
 800cb08:	0800cb95 	.word	0x0800cb95
 800cb0c:	0800cbbd 	.word	0x0800cbbd
 800cb10:	0800cbbd 	.word	0x0800cbbd
 800cb14:	0800cbbd 	.word	0x0800cbbd
 800cb18:	0800cbbd 	.word	0x0800cbbd
 800cb1c:	0800cbbd 	.word	0x0800cbbd
 800cb20:	0800cbbd 	.word	0x0800cbbd
 800cb24:	0800cbbd 	.word	0x0800cbbd
 800cb28:	0800cb9d 	.word	0x0800cb9d
 800cb2c:	0800cbbd 	.word	0x0800cbbd
 800cb30:	0800cbbd 	.word	0x0800cbbd
 800cb34:	0800cbbd 	.word	0x0800cbbd
 800cb38:	0800cbbd 	.word	0x0800cbbd
 800cb3c:	0800cbbd 	.word	0x0800cbbd
 800cb40:	0800cbbd 	.word	0x0800cbbd
 800cb44:	0800cbbd 	.word	0x0800cbbd
 800cb48:	0800cba5 	.word	0x0800cba5
 800cb4c:	0800cbbd 	.word	0x0800cbbd
 800cb50:	0800cbbd 	.word	0x0800cbbd
 800cb54:	0800cbbd 	.word	0x0800cbbd
 800cb58:	0800cbbd 	.word	0x0800cbbd
 800cb5c:	0800cbbd 	.word	0x0800cbbd
 800cb60:	0800cbbd 	.word	0x0800cbbd
 800cb64:	0800cbbd 	.word	0x0800cbbd
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbbd 	.word	0x0800cbbd
 800cb74:	0800cbbd 	.word	0x0800cbbd
 800cb78:	0800cbbd 	.word	0x0800cbbd
 800cb7c:	0800cbbd 	.word	0x0800cbbd
 800cb80:	0800cbbd 	.word	0x0800cbbd
 800cb84:	0800cbbd 	.word	0x0800cbbd
 800cb88:	0800cbb5 	.word	0x0800cbb5
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e1c0      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cb94:	2304      	movs	r3, #4
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9a:	e1bc      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cb9c:	2308      	movs	r3, #8
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba2:	e1b8      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cba4:	2310      	movs	r3, #16
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbaa:	e1b4      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cbac:	2320      	movs	r3, #32
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb2:	e1b0      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cbb4:	2340      	movs	r3, #64	@ 0x40
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbba:	e1ac      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cbbc:	2380      	movs	r3, #128	@ 0x80
 800cbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbc2:	e1a8      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a75      	ldr	r2, [pc, #468]	@ (800cda0 <UART_SetConfig+0x638>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d130      	bne.n	800cc30 <UART_SetConfig+0x4c8>
 800cbce:	4b73      	ldr	r3, [pc, #460]	@ (800cd9c <UART_SetConfig+0x634>)
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	2b05      	cmp	r3, #5
 800cbd8:	d826      	bhi.n	800cc28 <UART_SetConfig+0x4c0>
 800cbda:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe0 <UART_SetConfig+0x478>)
 800cbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe0:	0800cbf9 	.word	0x0800cbf9
 800cbe4:	0800cc01 	.word	0x0800cc01
 800cbe8:	0800cc09 	.word	0x0800cc09
 800cbec:	0800cc11 	.word	0x0800cc11
 800cbf0:	0800cc19 	.word	0x0800cc19
 800cbf4:	0800cc21 	.word	0x0800cc21
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfe:	e18a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc00:	2304      	movs	r3, #4
 800cc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc06:	e186      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc08:	2308      	movs	r3, #8
 800cc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0e:	e182      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc10:	2310      	movs	r3, #16
 800cc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc16:	e17e      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc18:	2320      	movs	r3, #32
 800cc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1e:	e17a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc20:	2340      	movs	r3, #64	@ 0x40
 800cc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc26:	e176      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc28:	2380      	movs	r3, #128	@ 0x80
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2e:	e172      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a5b      	ldr	r2, [pc, #364]	@ (800cda4 <UART_SetConfig+0x63c>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d130      	bne.n	800cc9c <UART_SetConfig+0x534>
 800cc3a:	4b58      	ldr	r3, [pc, #352]	@ (800cd9c <UART_SetConfig+0x634>)
 800cc3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc3e:	f003 0307 	and.w	r3, r3, #7
 800cc42:	2b05      	cmp	r3, #5
 800cc44:	d826      	bhi.n	800cc94 <UART_SetConfig+0x52c>
 800cc46:	a201      	add	r2, pc, #4	@ (adr r2, 800cc4c <UART_SetConfig+0x4e4>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800cc65 	.word	0x0800cc65
 800cc50:	0800cc6d 	.word	0x0800cc6d
 800cc54:	0800cc75 	.word	0x0800cc75
 800cc58:	0800cc7d 	.word	0x0800cc7d
 800cc5c:	0800cc85 	.word	0x0800cc85
 800cc60:	0800cc8d 	.word	0x0800cc8d
 800cc64:	2300      	movs	r3, #0
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6a:	e154      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc72:	e150      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7a:	e14c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc82:	e148      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc84:	2320      	movs	r3, #32
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8a:	e144      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc8c:	2340      	movs	r3, #64	@ 0x40
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc92:	e140      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc94:	2380      	movs	r3, #128	@ 0x80
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9a:	e13c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a41      	ldr	r2, [pc, #260]	@ (800cda8 <UART_SetConfig+0x640>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	f040 8082 	bne.w	800cdac <UART_SetConfig+0x644>
 800cca8:	4b3c      	ldr	r3, [pc, #240]	@ (800cd9c <UART_SetConfig+0x634>)
 800ccaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccb0:	2b28      	cmp	r3, #40	@ 0x28
 800ccb2:	d86d      	bhi.n	800cd90 <UART_SetConfig+0x628>
 800ccb4:	a201      	add	r2, pc, #4	@ (adr r2, 800ccbc <UART_SetConfig+0x554>)
 800ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccba:	bf00      	nop
 800ccbc:	0800cd61 	.word	0x0800cd61
 800ccc0:	0800cd91 	.word	0x0800cd91
 800ccc4:	0800cd91 	.word	0x0800cd91
 800ccc8:	0800cd91 	.word	0x0800cd91
 800cccc:	0800cd91 	.word	0x0800cd91
 800ccd0:	0800cd91 	.word	0x0800cd91
 800ccd4:	0800cd91 	.word	0x0800cd91
 800ccd8:	0800cd91 	.word	0x0800cd91
 800ccdc:	0800cd69 	.word	0x0800cd69
 800cce0:	0800cd91 	.word	0x0800cd91
 800cce4:	0800cd91 	.word	0x0800cd91
 800cce8:	0800cd91 	.word	0x0800cd91
 800ccec:	0800cd91 	.word	0x0800cd91
 800ccf0:	0800cd91 	.word	0x0800cd91
 800ccf4:	0800cd91 	.word	0x0800cd91
 800ccf8:	0800cd91 	.word	0x0800cd91
 800ccfc:	0800cd71 	.word	0x0800cd71
 800cd00:	0800cd91 	.word	0x0800cd91
 800cd04:	0800cd91 	.word	0x0800cd91
 800cd08:	0800cd91 	.word	0x0800cd91
 800cd0c:	0800cd91 	.word	0x0800cd91
 800cd10:	0800cd91 	.word	0x0800cd91
 800cd14:	0800cd91 	.word	0x0800cd91
 800cd18:	0800cd91 	.word	0x0800cd91
 800cd1c:	0800cd79 	.word	0x0800cd79
 800cd20:	0800cd91 	.word	0x0800cd91
 800cd24:	0800cd91 	.word	0x0800cd91
 800cd28:	0800cd91 	.word	0x0800cd91
 800cd2c:	0800cd91 	.word	0x0800cd91
 800cd30:	0800cd91 	.word	0x0800cd91
 800cd34:	0800cd91 	.word	0x0800cd91
 800cd38:	0800cd91 	.word	0x0800cd91
 800cd3c:	0800cd81 	.word	0x0800cd81
 800cd40:	0800cd91 	.word	0x0800cd91
 800cd44:	0800cd91 	.word	0x0800cd91
 800cd48:	0800cd91 	.word	0x0800cd91
 800cd4c:	0800cd91 	.word	0x0800cd91
 800cd50:	0800cd91 	.word	0x0800cd91
 800cd54:	0800cd91 	.word	0x0800cd91
 800cd58:	0800cd91 	.word	0x0800cd91
 800cd5c:	0800cd89 	.word	0x0800cd89
 800cd60:	2301      	movs	r3, #1
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e0d6      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd68:	2304      	movs	r3, #4
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6e:	e0d2      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd70:	2308      	movs	r3, #8
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd76:	e0ce      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd78:	2310      	movs	r3, #16
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	e0ca      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd80:	2320      	movs	r3, #32
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e0c6      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd88:	2340      	movs	r3, #64	@ 0x40
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8e:	e0c2      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd90:	2380      	movs	r3, #128	@ 0x80
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd96:	e0be      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cd98:	40011400 	.word	0x40011400
 800cd9c:	58024400 	.word	0x58024400
 800cda0:	40007800 	.word	0x40007800
 800cda4:	40007c00 	.word	0x40007c00
 800cda8:	40011800 	.word	0x40011800
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4aad      	ldr	r2, [pc, #692]	@ (800d068 <UART_SetConfig+0x900>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d176      	bne.n	800cea4 <UART_SetConfig+0x73c>
 800cdb6:	4bad      	ldr	r3, [pc, #692]	@ (800d06c <UART_SetConfig+0x904>)
 800cdb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdbe:	2b28      	cmp	r3, #40	@ 0x28
 800cdc0:	d86c      	bhi.n	800ce9c <UART_SetConfig+0x734>
 800cdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc8 <UART_SetConfig+0x660>)
 800cdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc8:	0800ce6d 	.word	0x0800ce6d
 800cdcc:	0800ce9d 	.word	0x0800ce9d
 800cdd0:	0800ce9d 	.word	0x0800ce9d
 800cdd4:	0800ce9d 	.word	0x0800ce9d
 800cdd8:	0800ce9d 	.word	0x0800ce9d
 800cddc:	0800ce9d 	.word	0x0800ce9d
 800cde0:	0800ce9d 	.word	0x0800ce9d
 800cde4:	0800ce9d 	.word	0x0800ce9d
 800cde8:	0800ce75 	.word	0x0800ce75
 800cdec:	0800ce9d 	.word	0x0800ce9d
 800cdf0:	0800ce9d 	.word	0x0800ce9d
 800cdf4:	0800ce9d 	.word	0x0800ce9d
 800cdf8:	0800ce9d 	.word	0x0800ce9d
 800cdfc:	0800ce9d 	.word	0x0800ce9d
 800ce00:	0800ce9d 	.word	0x0800ce9d
 800ce04:	0800ce9d 	.word	0x0800ce9d
 800ce08:	0800ce7d 	.word	0x0800ce7d
 800ce0c:	0800ce9d 	.word	0x0800ce9d
 800ce10:	0800ce9d 	.word	0x0800ce9d
 800ce14:	0800ce9d 	.word	0x0800ce9d
 800ce18:	0800ce9d 	.word	0x0800ce9d
 800ce1c:	0800ce9d 	.word	0x0800ce9d
 800ce20:	0800ce9d 	.word	0x0800ce9d
 800ce24:	0800ce9d 	.word	0x0800ce9d
 800ce28:	0800ce85 	.word	0x0800ce85
 800ce2c:	0800ce9d 	.word	0x0800ce9d
 800ce30:	0800ce9d 	.word	0x0800ce9d
 800ce34:	0800ce9d 	.word	0x0800ce9d
 800ce38:	0800ce9d 	.word	0x0800ce9d
 800ce3c:	0800ce9d 	.word	0x0800ce9d
 800ce40:	0800ce9d 	.word	0x0800ce9d
 800ce44:	0800ce9d 	.word	0x0800ce9d
 800ce48:	0800ce8d 	.word	0x0800ce8d
 800ce4c:	0800ce9d 	.word	0x0800ce9d
 800ce50:	0800ce9d 	.word	0x0800ce9d
 800ce54:	0800ce9d 	.word	0x0800ce9d
 800ce58:	0800ce9d 	.word	0x0800ce9d
 800ce5c:	0800ce9d 	.word	0x0800ce9d
 800ce60:	0800ce9d 	.word	0x0800ce9d
 800ce64:	0800ce9d 	.word	0x0800ce9d
 800ce68:	0800ce95 	.word	0x0800ce95
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e050      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce74:	2304      	movs	r3, #4
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7a:	e04c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce7c:	2308      	movs	r3, #8
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce82:	e048      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce84:	2310      	movs	r3, #16
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce8a:	e044      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce8c:	2320      	movs	r3, #32
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce92:	e040      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce94:	2340      	movs	r3, #64	@ 0x40
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce9a:	e03c      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800ce9c:	2380      	movs	r3, #128	@ 0x80
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cea2:	e038      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a71      	ldr	r2, [pc, #452]	@ (800d070 <UART_SetConfig+0x908>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d130      	bne.n	800cf10 <UART_SetConfig+0x7a8>
 800ceae:	4b6f      	ldr	r3, [pc, #444]	@ (800d06c <UART_SetConfig+0x904>)
 800ceb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceb2:	f003 0307 	and.w	r3, r3, #7
 800ceb6:	2b05      	cmp	r3, #5
 800ceb8:	d826      	bhi.n	800cf08 <UART_SetConfig+0x7a0>
 800ceba:	a201      	add	r2, pc, #4	@ (adr r2, 800cec0 <UART_SetConfig+0x758>)
 800cebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec0:	0800ced9 	.word	0x0800ced9
 800cec4:	0800cee1 	.word	0x0800cee1
 800cec8:	0800cee9 	.word	0x0800cee9
 800cecc:	0800cef1 	.word	0x0800cef1
 800ced0:	0800cef9 	.word	0x0800cef9
 800ced4:	0800cf01 	.word	0x0800cf01
 800ced8:	2302      	movs	r3, #2
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e01a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cee0:	2304      	movs	r3, #4
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee6:	e016      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cee8:	2308      	movs	r3, #8
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceee:	e012      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cef0:	2310      	movs	r3, #16
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cef6:	e00e      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cef8:	2320      	movs	r3, #32
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cefe:	e00a      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cf00:	2340      	movs	r3, #64	@ 0x40
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf06:	e006      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cf08:	2380      	movs	r3, #128	@ 0x80
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e002      	b.n	800cf16 <UART_SetConfig+0x7ae>
 800cf10:	2380      	movs	r3, #128	@ 0x80
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a55      	ldr	r2, [pc, #340]	@ (800d070 <UART_SetConfig+0x908>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	f040 80f8 	bne.w	800d112 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	dc46      	bgt.n	800cfb8 <UART_SetConfig+0x850>
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	db75      	blt.n	800d01a <UART_SetConfig+0x8b2>
 800cf2e:	3b02      	subs	r3, #2
 800cf30:	2b1e      	cmp	r3, #30
 800cf32:	d872      	bhi.n	800d01a <UART_SetConfig+0x8b2>
 800cf34:	a201      	add	r2, pc, #4	@ (adr r2, 800cf3c <UART_SetConfig+0x7d4>)
 800cf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3a:	bf00      	nop
 800cf3c:	0800cfbf 	.word	0x0800cfbf
 800cf40:	0800d01b 	.word	0x0800d01b
 800cf44:	0800cfc7 	.word	0x0800cfc7
 800cf48:	0800d01b 	.word	0x0800d01b
 800cf4c:	0800d01b 	.word	0x0800d01b
 800cf50:	0800d01b 	.word	0x0800d01b
 800cf54:	0800cfd7 	.word	0x0800cfd7
 800cf58:	0800d01b 	.word	0x0800d01b
 800cf5c:	0800d01b 	.word	0x0800d01b
 800cf60:	0800d01b 	.word	0x0800d01b
 800cf64:	0800d01b 	.word	0x0800d01b
 800cf68:	0800d01b 	.word	0x0800d01b
 800cf6c:	0800d01b 	.word	0x0800d01b
 800cf70:	0800d01b 	.word	0x0800d01b
 800cf74:	0800cfe7 	.word	0x0800cfe7
 800cf78:	0800d01b 	.word	0x0800d01b
 800cf7c:	0800d01b 	.word	0x0800d01b
 800cf80:	0800d01b 	.word	0x0800d01b
 800cf84:	0800d01b 	.word	0x0800d01b
 800cf88:	0800d01b 	.word	0x0800d01b
 800cf8c:	0800d01b 	.word	0x0800d01b
 800cf90:	0800d01b 	.word	0x0800d01b
 800cf94:	0800d01b 	.word	0x0800d01b
 800cf98:	0800d01b 	.word	0x0800d01b
 800cf9c:	0800d01b 	.word	0x0800d01b
 800cfa0:	0800d01b 	.word	0x0800d01b
 800cfa4:	0800d01b 	.word	0x0800d01b
 800cfa8:	0800d01b 	.word	0x0800d01b
 800cfac:	0800d01b 	.word	0x0800d01b
 800cfb0:	0800d01b 	.word	0x0800d01b
 800cfb4:	0800d00d 	.word	0x0800d00d
 800cfb8:	2b40      	cmp	r3, #64	@ 0x40
 800cfba:	d02a      	beq.n	800d012 <UART_SetConfig+0x8aa>
 800cfbc:	e02d      	b.n	800d01a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cfbe:	f7fd fcd3 	bl	800a968 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfc4:	e02f      	b.n	800d026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fd fce2 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfd4:	e027      	b.n	800d026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfd6:	f107 0318 	add.w	r3, r7, #24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fd fe2e 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe4:	e01f      	b.n	800d026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfe6:	4b21      	ldr	r3, [pc, #132]	@ (800d06c <UART_SetConfig+0x904>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d009      	beq.n	800d006 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cff2:	4b1e      	ldr	r3, [pc, #120]	@ (800d06c <UART_SetConfig+0x904>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	08db      	lsrs	r3, r3, #3
 800cff8:	f003 0303 	and.w	r3, r3, #3
 800cffc:	4a1d      	ldr	r2, [pc, #116]	@ (800d074 <UART_SetConfig+0x90c>)
 800cffe:	fa22 f303 	lsr.w	r3, r2, r3
 800d002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d004:	e00f      	b.n	800d026 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d006:	4b1b      	ldr	r3, [pc, #108]	@ (800d074 <UART_SetConfig+0x90c>)
 800d008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d00a:	e00c      	b.n	800d026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d00c:	4b1a      	ldr	r3, [pc, #104]	@ (800d078 <UART_SetConfig+0x910>)
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d010:	e009      	b.n	800d026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d018:	e005      	b.n	800d026 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d01a:	2300      	movs	r3, #0
 800d01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 81ee 	beq.w	800d40a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d032:	4a12      	ldr	r2, [pc, #72]	@ (800d07c <UART_SetConfig+0x914>)
 800d034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d038:	461a      	mov	r2, r3
 800d03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d040:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	4613      	mov	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d04e:	429a      	cmp	r2, r3
 800d050:	d305      	bcc.n	800d05e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d910      	bls.n	800d080 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d064:	e1d1      	b.n	800d40a <UART_SetConfig+0xca2>
 800d066:	bf00      	nop
 800d068:	40011c00 	.word	0x40011c00
 800d06c:	58024400 	.word	0x58024400
 800d070:	58000c00 	.word	0x58000c00
 800d074:	03d09000 	.word	0x03d09000
 800d078:	003d0900 	.word	0x003d0900
 800d07c:	0801052c 	.word	0x0801052c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d082:	2200      	movs	r2, #0
 800d084:	60bb      	str	r3, [r7, #8]
 800d086:	60fa      	str	r2, [r7, #12]
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08c:	4ac0      	ldr	r2, [pc, #768]	@ (800d390 <UART_SetConfig+0xc28>)
 800d08e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d092:	b29b      	uxth	r3, r3
 800d094:	2200      	movs	r2, #0
 800d096:	603b      	str	r3, [r7, #0]
 800d098:	607a      	str	r2, [r7, #4]
 800d09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d09e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d0a2:	f7f3 f98d 	bl	80003c0 <__aeabi_uldivmod>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	f04f 0200 	mov.w	r2, #0
 800d0b2:	f04f 0300 	mov.w	r3, #0
 800d0b6:	020b      	lsls	r3, r1, #8
 800d0b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d0bc:	0202      	lsls	r2, r0, #8
 800d0be:	6979      	ldr	r1, [r7, #20]
 800d0c0:	6849      	ldr	r1, [r1, #4]
 800d0c2:	0849      	lsrs	r1, r1, #1
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	eb12 0804 	adds.w	r8, r2, r4
 800d0ce:	eb43 0905 	adc.w	r9, r3, r5
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	469a      	mov	sl, r3
 800d0da:	4693      	mov	fp, r2
 800d0dc:	4652      	mov	r2, sl
 800d0de:	465b      	mov	r3, fp
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 f96c 	bl	80003c0 <__aeabi_uldivmod>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0f6:	d308      	bcc.n	800d10a <UART_SetConfig+0x9a2>
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0fe:	d204      	bcs.n	800d10a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d106:	60da      	str	r2, [r3, #12]
 800d108:	e17f      	b.n	800d40a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d110:	e17b      	b.n	800d40a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d11a:	f040 80bd 	bne.w	800d298 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d11e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d122:	2b20      	cmp	r3, #32
 800d124:	dc48      	bgt.n	800d1b8 <UART_SetConfig+0xa50>
 800d126:	2b00      	cmp	r3, #0
 800d128:	db7b      	blt.n	800d222 <UART_SetConfig+0xaba>
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	d879      	bhi.n	800d222 <UART_SetConfig+0xaba>
 800d12e:	a201      	add	r2, pc, #4	@ (adr r2, 800d134 <UART_SetConfig+0x9cc>)
 800d130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d134:	0800d1bf 	.word	0x0800d1bf
 800d138:	0800d1c7 	.word	0x0800d1c7
 800d13c:	0800d223 	.word	0x0800d223
 800d140:	0800d223 	.word	0x0800d223
 800d144:	0800d1cf 	.word	0x0800d1cf
 800d148:	0800d223 	.word	0x0800d223
 800d14c:	0800d223 	.word	0x0800d223
 800d150:	0800d223 	.word	0x0800d223
 800d154:	0800d1df 	.word	0x0800d1df
 800d158:	0800d223 	.word	0x0800d223
 800d15c:	0800d223 	.word	0x0800d223
 800d160:	0800d223 	.word	0x0800d223
 800d164:	0800d223 	.word	0x0800d223
 800d168:	0800d223 	.word	0x0800d223
 800d16c:	0800d223 	.word	0x0800d223
 800d170:	0800d223 	.word	0x0800d223
 800d174:	0800d1ef 	.word	0x0800d1ef
 800d178:	0800d223 	.word	0x0800d223
 800d17c:	0800d223 	.word	0x0800d223
 800d180:	0800d223 	.word	0x0800d223
 800d184:	0800d223 	.word	0x0800d223
 800d188:	0800d223 	.word	0x0800d223
 800d18c:	0800d223 	.word	0x0800d223
 800d190:	0800d223 	.word	0x0800d223
 800d194:	0800d223 	.word	0x0800d223
 800d198:	0800d223 	.word	0x0800d223
 800d19c:	0800d223 	.word	0x0800d223
 800d1a0:	0800d223 	.word	0x0800d223
 800d1a4:	0800d223 	.word	0x0800d223
 800d1a8:	0800d223 	.word	0x0800d223
 800d1ac:	0800d223 	.word	0x0800d223
 800d1b0:	0800d223 	.word	0x0800d223
 800d1b4:	0800d215 	.word	0x0800d215
 800d1b8:	2b40      	cmp	r3, #64	@ 0x40
 800d1ba:	d02e      	beq.n	800d21a <UART_SetConfig+0xab2>
 800d1bc:	e031      	b.n	800d222 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1be:	f7fb fd35 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800d1c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1c4:	e033      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1c6:	f7fb fd47 	bl	8008c58 <HAL_RCC_GetPCLK2Freq>
 800d1ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1cc:	e02f      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fd fbde 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1dc:	e027      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1de:	f107 0318 	add.w	r3, r7, #24
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fd fd2a 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ec:	e01f      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1ee:	4b69      	ldr	r3, [pc, #420]	@ (800d394 <UART_SetConfig+0xc2c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d009      	beq.n	800d20e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1fa:	4b66      	ldr	r3, [pc, #408]	@ (800d394 <UART_SetConfig+0xc2c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	08db      	lsrs	r3, r3, #3
 800d200:	f003 0303 	and.w	r3, r3, #3
 800d204:	4a64      	ldr	r2, [pc, #400]	@ (800d398 <UART_SetConfig+0xc30>)
 800d206:	fa22 f303 	lsr.w	r3, r2, r3
 800d20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d20c:	e00f      	b.n	800d22e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d20e:	4b62      	ldr	r3, [pc, #392]	@ (800d398 <UART_SetConfig+0xc30>)
 800d210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d212:	e00c      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d214:	4b61      	ldr	r3, [pc, #388]	@ (800d39c <UART_SetConfig+0xc34>)
 800d216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d218:	e009      	b.n	800d22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d220:	e005      	b.n	800d22e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 80ea 	beq.w	800d40a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23a:	4a55      	ldr	r2, [pc, #340]	@ (800d390 <UART_SetConfig+0xc28>)
 800d23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d240:	461a      	mov	r2, r3
 800d242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d244:	fbb3 f3f2 	udiv	r3, r3, r2
 800d248:	005a      	lsls	r2, r3, #1
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	085b      	lsrs	r3, r3, #1
 800d250:	441a      	add	r2, r3
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25e:	2b0f      	cmp	r3, #15
 800d260:	d916      	bls.n	800d290 <UART_SetConfig+0xb28>
 800d262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d268:	d212      	bcs.n	800d290 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	f023 030f 	bic.w	r3, r3, #15
 800d272:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	b29b      	uxth	r3, r3
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	b29a      	uxth	r2, r3
 800d280:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d282:	4313      	orrs	r3, r2
 800d284:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d28c:	60da      	str	r2, [r3, #12]
 800d28e:	e0bc      	b.n	800d40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d296:	e0b8      	b.n	800d40a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d298:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	dc4b      	bgt.n	800d338 <UART_SetConfig+0xbd0>
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f2c0 8087 	blt.w	800d3b4 <UART_SetConfig+0xc4c>
 800d2a6:	2b20      	cmp	r3, #32
 800d2a8:	f200 8084 	bhi.w	800d3b4 <UART_SetConfig+0xc4c>
 800d2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <UART_SetConfig+0xb4c>)
 800d2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b2:	bf00      	nop
 800d2b4:	0800d33f 	.word	0x0800d33f
 800d2b8:	0800d347 	.word	0x0800d347
 800d2bc:	0800d3b5 	.word	0x0800d3b5
 800d2c0:	0800d3b5 	.word	0x0800d3b5
 800d2c4:	0800d34f 	.word	0x0800d34f
 800d2c8:	0800d3b5 	.word	0x0800d3b5
 800d2cc:	0800d3b5 	.word	0x0800d3b5
 800d2d0:	0800d3b5 	.word	0x0800d3b5
 800d2d4:	0800d35f 	.word	0x0800d35f
 800d2d8:	0800d3b5 	.word	0x0800d3b5
 800d2dc:	0800d3b5 	.word	0x0800d3b5
 800d2e0:	0800d3b5 	.word	0x0800d3b5
 800d2e4:	0800d3b5 	.word	0x0800d3b5
 800d2e8:	0800d3b5 	.word	0x0800d3b5
 800d2ec:	0800d3b5 	.word	0x0800d3b5
 800d2f0:	0800d3b5 	.word	0x0800d3b5
 800d2f4:	0800d36f 	.word	0x0800d36f
 800d2f8:	0800d3b5 	.word	0x0800d3b5
 800d2fc:	0800d3b5 	.word	0x0800d3b5
 800d300:	0800d3b5 	.word	0x0800d3b5
 800d304:	0800d3b5 	.word	0x0800d3b5
 800d308:	0800d3b5 	.word	0x0800d3b5
 800d30c:	0800d3b5 	.word	0x0800d3b5
 800d310:	0800d3b5 	.word	0x0800d3b5
 800d314:	0800d3b5 	.word	0x0800d3b5
 800d318:	0800d3b5 	.word	0x0800d3b5
 800d31c:	0800d3b5 	.word	0x0800d3b5
 800d320:	0800d3b5 	.word	0x0800d3b5
 800d324:	0800d3b5 	.word	0x0800d3b5
 800d328:	0800d3b5 	.word	0x0800d3b5
 800d32c:	0800d3b5 	.word	0x0800d3b5
 800d330:	0800d3b5 	.word	0x0800d3b5
 800d334:	0800d3a7 	.word	0x0800d3a7
 800d338:	2b40      	cmp	r3, #64	@ 0x40
 800d33a:	d037      	beq.n	800d3ac <UART_SetConfig+0xc44>
 800d33c:	e03a      	b.n	800d3b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d33e:	f7fb fc75 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800d342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d344:	e03c      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d346:	f7fb fc87 	bl	8008c58 <HAL_RCC_GetPCLK2Freq>
 800d34a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d34c:	e038      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d34e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d352:	4618      	mov	r0, r3
 800d354:	f7fd fb1e 	bl	800a994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d35c:	e030      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d35e:	f107 0318 	add.w	r3, r7, #24
 800d362:	4618      	mov	r0, r3
 800d364:	f7fd fc6a 	bl	800ac3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d36c:	e028      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d36e:	4b09      	ldr	r3, [pc, #36]	@ (800d394 <UART_SetConfig+0xc2c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f003 0320 	and.w	r3, r3, #32
 800d376:	2b00      	cmp	r3, #0
 800d378:	d012      	beq.n	800d3a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d37a:	4b06      	ldr	r3, [pc, #24]	@ (800d394 <UART_SetConfig+0xc2c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	08db      	lsrs	r3, r3, #3
 800d380:	f003 0303 	and.w	r3, r3, #3
 800d384:	4a04      	ldr	r2, [pc, #16]	@ (800d398 <UART_SetConfig+0xc30>)
 800d386:	fa22 f303 	lsr.w	r3, r2, r3
 800d38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d38c:	e018      	b.n	800d3c0 <UART_SetConfig+0xc58>
 800d38e:	bf00      	nop
 800d390:	0801052c 	.word	0x0801052c
 800d394:	58024400 	.word	0x58024400
 800d398:	03d09000 	.word	0x03d09000
 800d39c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d3a0:	4b24      	ldr	r3, [pc, #144]	@ (800d434 <UART_SetConfig+0xccc>)
 800d3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a4:	e00c      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3a6:	4b24      	ldr	r3, [pc, #144]	@ (800d438 <UART_SetConfig+0xcd0>)
 800d3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3aa:	e009      	b.n	800d3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b2:	e005      	b.n	800d3c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d3be:	bf00      	nop
    }

    if (pclk != 0U)
 800d3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d021      	beq.n	800d40a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d43c <UART_SetConfig+0xcd4>)
 800d3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	085b      	lsrs	r3, r3, #1
 800d3de:	441a      	add	r2, r3
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ec:	2b0f      	cmp	r3, #15
 800d3ee:	d909      	bls.n	800d404 <UART_SetConfig+0xc9c>
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f6:	d205      	bcs.n	800d404 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60da      	str	r2, [r3, #12]
 800d402:	e002      	b.n	800d40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2201      	movs	r2, #1
 800d416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2200      	movs	r2, #0
 800d41e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2200      	movs	r2, #0
 800d424:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d426:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3748      	adds	r7, #72	@ 0x48
 800d42e:	46bd      	mov	sp, r7
 800d430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d434:	03d09000 	.word	0x03d09000
 800d438:	003d0900 	.word	0x003d0900
 800d43c:	0801052c 	.word	0x0801052c

0800d440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44c:	f003 0308 	and.w	r3, r3, #8
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	f003 0301 	and.w	r3, r3, #1
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00a      	beq.n	800d4ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b2:	f003 0304 	and.w	r3, r3, #4
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00a      	beq.n	800d4f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f6:	f003 0320 	and.w	r3, r3, #32
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00a      	beq.n	800d514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	430a      	orrs	r2, r1
 800d512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d01a      	beq.n	800d556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d53a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d53e:	d10a      	bne.n	800d556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	430a      	orrs	r2, r1
 800d554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00a      	beq.n	800d578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	430a      	orrs	r2, r1
 800d576:	605a      	str	r2, [r3, #4]
  }
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b098      	sub	sp, #96	@ 0x60
 800d588:	af02      	add	r7, sp, #8
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d594:	f7f4 fc60 	bl	8001e58 <HAL_GetTick>
 800d598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d12f      	bne.n	800d608 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f88e 	bl	800d6d8 <UART_WaitOnFlagUntilTimeout>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d022      	beq.n	800d608 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ca:	e853 3f00 	ldrex	r3, [r3]
 800d5ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5e8:	e841 2300 	strex	r3, r2, [r1]
 800d5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1e6      	bne.n	800d5c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2220      	movs	r2, #32
 800d5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d604:	2303      	movs	r3, #3
 800d606:	e063      	b.n	800d6d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f003 0304 	and.w	r3, r3, #4
 800d612:	2b04      	cmp	r3, #4
 800d614:	d149      	bne.n	800d6aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d616:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d61e:	2200      	movs	r2, #0
 800d620:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f857 	bl	800d6d8 <UART_WaitOnFlagUntilTimeout>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d03c      	beq.n	800d6aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	e853 3f00 	ldrex	r3, [r3]
 800d63c:	623b      	str	r3, [r7, #32]
   return(result);
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d650:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d656:	e841 2300 	strex	r3, r2, [r1]
 800d65a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e6      	bne.n	800d630 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3308      	adds	r3, #8
 800d668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	60fb      	str	r3, [r7, #12]
   return(result);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3308      	adds	r3, #8
 800d680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d682:	61fa      	str	r2, [r7, #28]
 800d684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	69b9      	ldr	r1, [r7, #24]
 800d688:	69fa      	ldr	r2, [r7, #28]
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	617b      	str	r3, [r7, #20]
   return(result);
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e5      	bne.n	800d662 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2220      	movs	r2, #32
 800d69a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e012      	b.n	800d6d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3758      	adds	r7, #88	@ 0x58
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e8:	e04f      	b.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f0:	d04b      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6f2:	f7f4 fbb1 	bl	8001e58 <HAL_GetTick>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	69ba      	ldr	r2, [r7, #24]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d302      	bcc.n	800d708 <UART_WaitOnFlagUntilTimeout+0x30>
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d708:	2303      	movs	r3, #3
 800d70a:	e04e      	b.n	800d7aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 0304 	and.w	r3, r3, #4
 800d716:	2b00      	cmp	r3, #0
 800d718:	d037      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b80      	cmp	r3, #128	@ 0x80
 800d71e:	d034      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2b40      	cmp	r3, #64	@ 0x40
 800d724:	d031      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	f003 0308 	and.w	r3, r3, #8
 800d730:	2b08      	cmp	r3, #8
 800d732:	d110      	bne.n	800d756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2208      	movs	r2, #8
 800d73a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f000 f839 	bl	800d7b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2208      	movs	r2, #8
 800d746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e029      	b.n	800d7aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	69db      	ldr	r3, [r3, #28]
 800d75c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d764:	d111      	bne.n	800d78a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d76e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 f81f 	bl	800d7b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2220      	movs	r2, #32
 800d77a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d786:	2303      	movs	r3, #3
 800d788:	e00f      	b.n	800d7aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	69da      	ldr	r2, [r3, #28]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	4013      	ands	r3, r2
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	429a      	cmp	r2, r3
 800d798:	bf0c      	ite	eq
 800d79a:	2301      	moveq	r3, #1
 800d79c:	2300      	movne	r3, #0
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d0a0      	beq.n	800d6ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b095      	sub	sp, #84	@ 0x54
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c4:	e853 3f00 	ldrex	r3, [r3]
 800d7c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7da:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e6      	bne.n	800d7bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	e853 3f00 	ldrex	r3, [r3]
 800d7fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7fe:	69fa      	ldr	r2, [r7, #28]
 800d800:	4b1e      	ldr	r3, [pc, #120]	@ (800d87c <UART_EndRxTransfer+0xc8>)
 800d802:	4013      	ands	r3, r2
 800d804:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3308      	adds	r3, #8
 800d80c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d80e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d816:	e841 2300 	strex	r3, r2, [r1]
 800d81a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1e5      	bne.n	800d7ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d826:	2b01      	cmp	r3, #1
 800d828:	d118      	bne.n	800d85c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	e853 3f00 	ldrex	r3, [r3]
 800d836:	60bb      	str	r3, [r7, #8]
   return(result);
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	f023 0310 	bic.w	r3, r3, #16
 800d83e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d848:	61bb      	str	r3, [r7, #24]
 800d84a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84c:	6979      	ldr	r1, [r7, #20]
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	e841 2300 	strex	r3, r2, [r1]
 800d854:	613b      	str	r3, [r7, #16]
   return(result);
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e6      	bne.n	800d82a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2220      	movs	r2, #32
 800d860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d870:	bf00      	nop
 800d872:	3754      	adds	r7, #84	@ 0x54
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	effffffe 	.word	0xeffffffe

0800d880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d88c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7fe ff4c 	bl	800c73c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8c8:	61fb      	str	r3, [r7, #28]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	61bb      	str	r3, [r7, #24]
 800d8d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6979      	ldr	r1, [r7, #20]
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e6      	bne.n	800d8b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fe ff17 	bl	800c728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8fa:	bf00      	nop
 800d8fc:	3720      	adds	r7, #32
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d90a:	bf00      	nop
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d916:	b480      	push	{r7}
 800d918:	b083      	sub	sp, #12
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d932:	bf00      	nop
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d93e:	b480      	push	{r7}
 800d940:	b085      	sub	sp, #20
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d101      	bne.n	800d954 <HAL_UARTEx_DisableFifoMode+0x16>
 800d950:	2302      	movs	r3, #2
 800d952:	e027      	b.n	800d9a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2224      	movs	r2, #36	@ 0x24
 800d960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f022 0201 	bic.w	r2, r2, #1
 800d97a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d982:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2220      	movs	r2, #32
 800d996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e02d      	b.n	800da24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2224      	movs	r2, #36	@ 0x24
 800d9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f022 0201 	bic.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f84f 	bl	800daa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2220      	movs	r2, #32
 800da16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d101      	bne.n	800da44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da40:	2302      	movs	r3, #2
 800da42:	e02d      	b.n	800daa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2224      	movs	r2, #36	@ 0x24
 800da50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 0201 	bic.w	r2, r2, #1
 800da6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	430a      	orrs	r2, r1
 800da7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f811 	bl	800daa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d108      	bne.n	800daca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dac8:	e031      	b.n	800db2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800daca:	2310      	movs	r3, #16
 800dacc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dace:	2310      	movs	r3, #16
 800dad0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	0e5b      	lsrs	r3, r3, #25
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f003 0307 	and.w	r3, r3, #7
 800dae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	0f5b      	lsrs	r3, r3, #29
 800daea:	b2db      	uxtb	r3, r3
 800daec:	f003 0307 	and.w	r3, r3, #7
 800daf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
 800daf4:	7b3a      	ldrb	r2, [r7, #12]
 800daf6:	4911      	ldr	r1, [pc, #68]	@ (800db3c <UARTEx_SetNbDataToProcess+0x94>)
 800daf8:	5c8a      	ldrb	r2, [r1, r2]
 800dafa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dafe:	7b3a      	ldrb	r2, [r7, #12]
 800db00:	490f      	ldr	r1, [pc, #60]	@ (800db40 <UARTEx_SetNbDataToProcess+0x98>)
 800db02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db04:	fb93 f3f2 	sdiv	r3, r3, r2
 800db08:	b29a      	uxth	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	7b7a      	ldrb	r2, [r7, #13]
 800db14:	4909      	ldr	r1, [pc, #36]	@ (800db3c <UARTEx_SetNbDataToProcess+0x94>)
 800db16:	5c8a      	ldrb	r2, [r1, r2]
 800db18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db1c:	7b7a      	ldrb	r2, [r7, #13]
 800db1e:	4908      	ldr	r1, [pc, #32]	@ (800db40 <UARTEx_SetNbDataToProcess+0x98>)
 800db20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db22:	fb93 f3f2 	sdiv	r3, r3, r2
 800db26:	b29a      	uxth	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db2e:	bf00      	nop
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	08010544 	.word	0x08010544
 800db40:	0801054c 	.word	0x0801054c

0800db44 <__itoa>:
 800db44:	1e93      	subs	r3, r2, #2
 800db46:	2b22      	cmp	r3, #34	@ 0x22
 800db48:	b510      	push	{r4, lr}
 800db4a:	460c      	mov	r4, r1
 800db4c:	d904      	bls.n	800db58 <__itoa+0x14>
 800db4e:	2300      	movs	r3, #0
 800db50:	700b      	strb	r3, [r1, #0]
 800db52:	461c      	mov	r4, r3
 800db54:	4620      	mov	r0, r4
 800db56:	bd10      	pop	{r4, pc}
 800db58:	2a0a      	cmp	r2, #10
 800db5a:	d109      	bne.n	800db70 <__itoa+0x2c>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	da07      	bge.n	800db70 <__itoa+0x2c>
 800db60:	232d      	movs	r3, #45	@ 0x2d
 800db62:	700b      	strb	r3, [r1, #0]
 800db64:	4240      	negs	r0, r0
 800db66:	2101      	movs	r1, #1
 800db68:	4421      	add	r1, r4
 800db6a:	f000 f805 	bl	800db78 <__utoa>
 800db6e:	e7f1      	b.n	800db54 <__itoa+0x10>
 800db70:	2100      	movs	r1, #0
 800db72:	e7f9      	b.n	800db68 <__itoa+0x24>

0800db74 <itoa>:
 800db74:	f7ff bfe6 	b.w	800db44 <__itoa>

0800db78 <__utoa>:
 800db78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7a:	4c1f      	ldr	r4, [pc, #124]	@ (800dbf8 <__utoa+0x80>)
 800db7c:	b08b      	sub	sp, #44	@ 0x2c
 800db7e:	4605      	mov	r5, r0
 800db80:	460b      	mov	r3, r1
 800db82:	466e      	mov	r6, sp
 800db84:	f104 0c20 	add.w	ip, r4, #32
 800db88:	6820      	ldr	r0, [r4, #0]
 800db8a:	6861      	ldr	r1, [r4, #4]
 800db8c:	4637      	mov	r7, r6
 800db8e:	c703      	stmia	r7!, {r0, r1}
 800db90:	3408      	adds	r4, #8
 800db92:	4564      	cmp	r4, ip
 800db94:	463e      	mov	r6, r7
 800db96:	d1f7      	bne.n	800db88 <__utoa+0x10>
 800db98:	7921      	ldrb	r1, [r4, #4]
 800db9a:	7139      	strb	r1, [r7, #4]
 800db9c:	1e91      	subs	r1, r2, #2
 800db9e:	6820      	ldr	r0, [r4, #0]
 800dba0:	6038      	str	r0, [r7, #0]
 800dba2:	2922      	cmp	r1, #34	@ 0x22
 800dba4:	f04f 0100 	mov.w	r1, #0
 800dba8:	d904      	bls.n	800dbb4 <__utoa+0x3c>
 800dbaa:	7019      	strb	r1, [r3, #0]
 800dbac:	460b      	mov	r3, r1
 800dbae:	4618      	mov	r0, r3
 800dbb0:	b00b      	add	sp, #44	@ 0x2c
 800dbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb4:	1e58      	subs	r0, r3, #1
 800dbb6:	4684      	mov	ip, r0
 800dbb8:	fbb5 f7f2 	udiv	r7, r5, r2
 800dbbc:	fb02 5617 	mls	r6, r2, r7, r5
 800dbc0:	3628      	adds	r6, #40	@ 0x28
 800dbc2:	446e      	add	r6, sp
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800dbca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800dbce:	462e      	mov	r6, r5
 800dbd0:	42b2      	cmp	r2, r6
 800dbd2:	f101 0101 	add.w	r1, r1, #1
 800dbd6:	463d      	mov	r5, r7
 800dbd8:	d9ee      	bls.n	800dbb8 <__utoa+0x40>
 800dbda:	2200      	movs	r2, #0
 800dbdc:	545a      	strb	r2, [r3, r1]
 800dbde:	1919      	adds	r1, r3, r4
 800dbe0:	1aa5      	subs	r5, r4, r2
 800dbe2:	42aa      	cmp	r2, r5
 800dbe4:	dae3      	bge.n	800dbae <__utoa+0x36>
 800dbe6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800dbea:	780e      	ldrb	r6, [r1, #0]
 800dbec:	7006      	strb	r6, [r0, #0]
 800dbee:	3201      	adds	r2, #1
 800dbf0:	f801 5901 	strb.w	r5, [r1], #-1
 800dbf4:	e7f4      	b.n	800dbe0 <__utoa+0x68>
 800dbf6:	bf00      	nop
 800dbf8:	08010554 	.word	0x08010554

0800dbfc <__cvt>:
 800dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbfe:	ed2d 8b02 	vpush	{d8}
 800dc02:	eeb0 8b40 	vmov.f64	d8, d0
 800dc06:	b085      	sub	sp, #20
 800dc08:	4617      	mov	r7, r2
 800dc0a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dc0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc0e:	ee18 2a90 	vmov	r2, s17
 800dc12:	f025 0520 	bic.w	r5, r5, #32
 800dc16:	2a00      	cmp	r2, #0
 800dc18:	bfb6      	itet	lt
 800dc1a:	222d      	movlt	r2, #45	@ 0x2d
 800dc1c:	2200      	movge	r2, #0
 800dc1e:	eeb1 8b40 	vneglt.f64	d8, d0
 800dc22:	2d46      	cmp	r5, #70	@ 0x46
 800dc24:	460c      	mov	r4, r1
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	d004      	beq.n	800dc34 <__cvt+0x38>
 800dc2a:	2d45      	cmp	r5, #69	@ 0x45
 800dc2c:	d100      	bne.n	800dc30 <__cvt+0x34>
 800dc2e:	3401      	adds	r4, #1
 800dc30:	2102      	movs	r1, #2
 800dc32:	e000      	b.n	800dc36 <__cvt+0x3a>
 800dc34:	2103      	movs	r1, #3
 800dc36:	ab03      	add	r3, sp, #12
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	ab02      	add	r3, sp, #8
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	4622      	mov	r2, r4
 800dc40:	4633      	mov	r3, r6
 800dc42:	eeb0 0b48 	vmov.f64	d0, d8
 800dc46:	f000 ff0f 	bl	800ea68 <_dtoa_r>
 800dc4a:	2d47      	cmp	r5, #71	@ 0x47
 800dc4c:	d114      	bne.n	800dc78 <__cvt+0x7c>
 800dc4e:	07fb      	lsls	r3, r7, #31
 800dc50:	d50a      	bpl.n	800dc68 <__cvt+0x6c>
 800dc52:	1902      	adds	r2, r0, r4
 800dc54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5c:	bf08      	it	eq
 800dc5e:	9203      	streq	r2, [sp, #12]
 800dc60:	2130      	movs	r1, #48	@ 0x30
 800dc62:	9b03      	ldr	r3, [sp, #12]
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d319      	bcc.n	800dc9c <__cvt+0xa0>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc6c:	1a1b      	subs	r3, r3, r0
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	b005      	add	sp, #20
 800dc72:	ecbd 8b02 	vpop	{d8}
 800dc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc78:	2d46      	cmp	r5, #70	@ 0x46
 800dc7a:	eb00 0204 	add.w	r2, r0, r4
 800dc7e:	d1e9      	bne.n	800dc54 <__cvt+0x58>
 800dc80:	7803      	ldrb	r3, [r0, #0]
 800dc82:	2b30      	cmp	r3, #48	@ 0x30
 800dc84:	d107      	bne.n	800dc96 <__cvt+0x9a>
 800dc86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8e:	bf1c      	itt	ne
 800dc90:	f1c4 0401 	rsbne	r4, r4, #1
 800dc94:	6034      	strne	r4, [r6, #0]
 800dc96:	6833      	ldr	r3, [r6, #0]
 800dc98:	441a      	add	r2, r3
 800dc9a:	e7db      	b.n	800dc54 <__cvt+0x58>
 800dc9c:	1c5c      	adds	r4, r3, #1
 800dc9e:	9403      	str	r4, [sp, #12]
 800dca0:	7019      	strb	r1, [r3, #0]
 800dca2:	e7de      	b.n	800dc62 <__cvt+0x66>

0800dca4 <__exponent>:
 800dca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dca6:	2900      	cmp	r1, #0
 800dca8:	bfba      	itte	lt
 800dcaa:	4249      	neglt	r1, r1
 800dcac:	232d      	movlt	r3, #45	@ 0x2d
 800dcae:	232b      	movge	r3, #43	@ 0x2b
 800dcb0:	2909      	cmp	r1, #9
 800dcb2:	7002      	strb	r2, [r0, #0]
 800dcb4:	7043      	strb	r3, [r0, #1]
 800dcb6:	dd29      	ble.n	800dd0c <__exponent+0x68>
 800dcb8:	f10d 0307 	add.w	r3, sp, #7
 800dcbc:	461d      	mov	r5, r3
 800dcbe:	270a      	movs	r7, #10
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	fbb1 f6f7 	udiv	r6, r1, r7
 800dcc6:	fb07 1416 	mls	r4, r7, r6, r1
 800dcca:	3430      	adds	r4, #48	@ 0x30
 800dccc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	2c63      	cmp	r4, #99	@ 0x63
 800dcd4:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcd8:	4631      	mov	r1, r6
 800dcda:	dcf1      	bgt.n	800dcc0 <__exponent+0x1c>
 800dcdc:	3130      	adds	r1, #48	@ 0x30
 800dcde:	1e94      	subs	r4, r2, #2
 800dce0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dce4:	1c41      	adds	r1, r0, #1
 800dce6:	4623      	mov	r3, r4
 800dce8:	42ab      	cmp	r3, r5
 800dcea:	d30a      	bcc.n	800dd02 <__exponent+0x5e>
 800dcec:	f10d 0309 	add.w	r3, sp, #9
 800dcf0:	1a9b      	subs	r3, r3, r2
 800dcf2:	42ac      	cmp	r4, r5
 800dcf4:	bf88      	it	hi
 800dcf6:	2300      	movhi	r3, #0
 800dcf8:	3302      	adds	r3, #2
 800dcfa:	4403      	add	r3, r0
 800dcfc:	1a18      	subs	r0, r3, r0
 800dcfe:	b003      	add	sp, #12
 800dd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd02:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd06:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd0a:	e7ed      	b.n	800dce8 <__exponent+0x44>
 800dd0c:	2330      	movs	r3, #48	@ 0x30
 800dd0e:	3130      	adds	r1, #48	@ 0x30
 800dd10:	7083      	strb	r3, [r0, #2]
 800dd12:	70c1      	strb	r1, [r0, #3]
 800dd14:	1d03      	adds	r3, r0, #4
 800dd16:	e7f1      	b.n	800dcfc <__exponent+0x58>

0800dd18 <_printf_float>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	b08d      	sub	sp, #52	@ 0x34
 800dd1e:	460c      	mov	r4, r1
 800dd20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dd24:	4616      	mov	r6, r2
 800dd26:	461f      	mov	r7, r3
 800dd28:	4605      	mov	r5, r0
 800dd2a:	f000 fd9d 	bl	800e868 <_localeconv_r>
 800dd2e:	f8d0 b000 	ldr.w	fp, [r0]
 800dd32:	4658      	mov	r0, fp
 800dd34:	f7f2 fb3c 	bl	80003b0 <strlen>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd3c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd40:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dd44:	6822      	ldr	r2, [r4, #0]
 800dd46:	9005      	str	r0, [sp, #20]
 800dd48:	3307      	adds	r3, #7
 800dd4a:	f023 0307 	bic.w	r3, r3, #7
 800dd4e:	f103 0108 	add.w	r1, r3, #8
 800dd52:	f8c8 1000 	str.w	r1, [r8]
 800dd56:	ed93 0b00 	vldr	d0, [r3]
 800dd5a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800dfb8 <_printf_float+0x2a0>
 800dd5e:	eeb0 7bc0 	vabs.f64	d7, d0
 800dd62:	eeb4 7b46 	vcmp.f64	d7, d6
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dd6e:	dd24      	ble.n	800ddba <_printf_float+0xa2>
 800dd70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	d502      	bpl.n	800dd80 <_printf_float+0x68>
 800dd7a:	232d      	movs	r3, #45	@ 0x2d
 800dd7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd80:	498f      	ldr	r1, [pc, #572]	@ (800dfc0 <_printf_float+0x2a8>)
 800dd82:	4b90      	ldr	r3, [pc, #576]	@ (800dfc4 <_printf_float+0x2ac>)
 800dd84:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800dd88:	bf94      	ite	ls
 800dd8a:	4688      	movls	r8, r1
 800dd8c:	4698      	movhi	r8, r3
 800dd8e:	f022 0204 	bic.w	r2, r2, #4
 800dd92:	2303      	movs	r3, #3
 800dd94:	6123      	str	r3, [r4, #16]
 800dd96:	6022      	str	r2, [r4, #0]
 800dd98:	f04f 0a00 	mov.w	sl, #0
 800dd9c:	9700      	str	r7, [sp, #0]
 800dd9e:	4633      	mov	r3, r6
 800dda0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dda2:	4621      	mov	r1, r4
 800dda4:	4628      	mov	r0, r5
 800dda6:	f000 f9d1 	bl	800e14c <_printf_common>
 800ddaa:	3001      	adds	r0, #1
 800ddac:	f040 8089 	bne.w	800dec2 <_printf_float+0x1aa>
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	b00d      	add	sp, #52	@ 0x34
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	eeb4 0b40 	vcmp.f64	d0, d0
 800ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc2:	d709      	bvc.n	800ddd8 <_printf_float+0xc0>
 800ddc4:	ee10 3a90 	vmov	r3, s1
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	bfbc      	itt	lt
 800ddcc:	232d      	movlt	r3, #45	@ 0x2d
 800ddce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ddd2:	497d      	ldr	r1, [pc, #500]	@ (800dfc8 <_printf_float+0x2b0>)
 800ddd4:	4b7d      	ldr	r3, [pc, #500]	@ (800dfcc <_printf_float+0x2b4>)
 800ddd6:	e7d5      	b.n	800dd84 <_printf_float+0x6c>
 800ddd8:	6863      	ldr	r3, [r4, #4]
 800ddda:	1c59      	adds	r1, r3, #1
 800dddc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800dde0:	d139      	bne.n	800de56 <_printf_float+0x13e>
 800dde2:	2306      	movs	r3, #6
 800dde4:	6063      	str	r3, [r4, #4]
 800dde6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ddea:	2300      	movs	r3, #0
 800ddec:	6022      	str	r2, [r4, #0]
 800ddee:	9303      	str	r3, [sp, #12]
 800ddf0:	ab0a      	add	r3, sp, #40	@ 0x28
 800ddf2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ddf6:	ab09      	add	r3, sp, #36	@ 0x24
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	6861      	ldr	r1, [r4, #4]
 800ddfc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800de00:	4628      	mov	r0, r5
 800de02:	f7ff fefb 	bl	800dbfc <__cvt>
 800de06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de0c:	4680      	mov	r8, r0
 800de0e:	d129      	bne.n	800de64 <_printf_float+0x14c>
 800de10:	1cc8      	adds	r0, r1, #3
 800de12:	db02      	blt.n	800de1a <_printf_float+0x102>
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	4299      	cmp	r1, r3
 800de18:	dd41      	ble.n	800de9e <_printf_float+0x186>
 800de1a:	f1a9 0902 	sub.w	r9, r9, #2
 800de1e:	fa5f f989 	uxtb.w	r9, r9
 800de22:	3901      	subs	r1, #1
 800de24:	464a      	mov	r2, r9
 800de26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800de2c:	f7ff ff3a 	bl	800dca4 <__exponent>
 800de30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de32:	1813      	adds	r3, r2, r0
 800de34:	2a01      	cmp	r2, #1
 800de36:	4682      	mov	sl, r0
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	dc02      	bgt.n	800de42 <_printf_float+0x12a>
 800de3c:	6822      	ldr	r2, [r4, #0]
 800de3e:	07d2      	lsls	r2, r2, #31
 800de40:	d501      	bpl.n	800de46 <_printf_float+0x12e>
 800de42:	3301      	adds	r3, #1
 800de44:	6123      	str	r3, [r4, #16]
 800de46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d0a6      	beq.n	800dd9c <_printf_float+0x84>
 800de4e:	232d      	movs	r3, #45	@ 0x2d
 800de50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de54:	e7a2      	b.n	800dd9c <_printf_float+0x84>
 800de56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de5a:	d1c4      	bne.n	800dde6 <_printf_float+0xce>
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1c2      	bne.n	800dde6 <_printf_float+0xce>
 800de60:	2301      	movs	r3, #1
 800de62:	e7bf      	b.n	800dde4 <_printf_float+0xcc>
 800de64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800de68:	d9db      	bls.n	800de22 <_printf_float+0x10a>
 800de6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800de6e:	d118      	bne.n	800dea2 <_printf_float+0x18a>
 800de70:	2900      	cmp	r1, #0
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	dd0b      	ble.n	800de8e <_printf_float+0x176>
 800de76:	6121      	str	r1, [r4, #16]
 800de78:	b913      	cbnz	r3, 800de80 <_printf_float+0x168>
 800de7a:	6822      	ldr	r2, [r4, #0]
 800de7c:	07d0      	lsls	r0, r2, #31
 800de7e:	d502      	bpl.n	800de86 <_printf_float+0x16e>
 800de80:	3301      	adds	r3, #1
 800de82:	440b      	add	r3, r1
 800de84:	6123      	str	r3, [r4, #16]
 800de86:	65a1      	str	r1, [r4, #88]	@ 0x58
 800de88:	f04f 0a00 	mov.w	sl, #0
 800de8c:	e7db      	b.n	800de46 <_printf_float+0x12e>
 800de8e:	b913      	cbnz	r3, 800de96 <_printf_float+0x17e>
 800de90:	6822      	ldr	r2, [r4, #0]
 800de92:	07d2      	lsls	r2, r2, #31
 800de94:	d501      	bpl.n	800de9a <_printf_float+0x182>
 800de96:	3302      	adds	r3, #2
 800de98:	e7f4      	b.n	800de84 <_printf_float+0x16c>
 800de9a:	2301      	movs	r3, #1
 800de9c:	e7f2      	b.n	800de84 <_printf_float+0x16c>
 800de9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800dea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea4:	4299      	cmp	r1, r3
 800dea6:	db05      	blt.n	800deb4 <_printf_float+0x19c>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	6121      	str	r1, [r4, #16]
 800deac:	07d8      	lsls	r0, r3, #31
 800deae:	d5ea      	bpl.n	800de86 <_printf_float+0x16e>
 800deb0:	1c4b      	adds	r3, r1, #1
 800deb2:	e7e7      	b.n	800de84 <_printf_float+0x16c>
 800deb4:	2900      	cmp	r1, #0
 800deb6:	bfd4      	ite	le
 800deb8:	f1c1 0202 	rsble	r2, r1, #2
 800debc:	2201      	movgt	r2, #1
 800debe:	4413      	add	r3, r2
 800dec0:	e7e0      	b.n	800de84 <_printf_float+0x16c>
 800dec2:	6823      	ldr	r3, [r4, #0]
 800dec4:	055a      	lsls	r2, r3, #21
 800dec6:	d407      	bmi.n	800ded8 <_printf_float+0x1c0>
 800dec8:	6923      	ldr	r3, [r4, #16]
 800deca:	4642      	mov	r2, r8
 800decc:	4631      	mov	r1, r6
 800dece:	4628      	mov	r0, r5
 800ded0:	47b8      	blx	r7
 800ded2:	3001      	adds	r0, #1
 800ded4:	d12a      	bne.n	800df2c <_printf_float+0x214>
 800ded6:	e76b      	b.n	800ddb0 <_printf_float+0x98>
 800ded8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dedc:	f240 80e0 	bls.w	800e0a0 <_printf_float+0x388>
 800dee0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800dee4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	d133      	bne.n	800df56 <_printf_float+0x23e>
 800deee:	4a38      	ldr	r2, [pc, #224]	@ (800dfd0 <_printf_float+0x2b8>)
 800def0:	2301      	movs	r3, #1
 800def2:	4631      	mov	r1, r6
 800def4:	4628      	mov	r0, r5
 800def6:	47b8      	blx	r7
 800def8:	3001      	adds	r0, #1
 800defa:	f43f af59 	beq.w	800ddb0 <_printf_float+0x98>
 800defe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800df02:	4543      	cmp	r3, r8
 800df04:	db02      	blt.n	800df0c <_printf_float+0x1f4>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	07d8      	lsls	r0, r3, #31
 800df0a:	d50f      	bpl.n	800df2c <_printf_float+0x214>
 800df0c:	9b05      	ldr	r3, [sp, #20]
 800df0e:	465a      	mov	r2, fp
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	f43f af4a 	beq.w	800ddb0 <_printf_float+0x98>
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	f108 38ff 	add.w	r8, r8, #4294967295
 800df24:	f104 0a1a 	add.w	sl, r4, #26
 800df28:	45c8      	cmp	r8, r9
 800df2a:	dc09      	bgt.n	800df40 <_printf_float+0x228>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	079b      	lsls	r3, r3, #30
 800df30:	f100 8107 	bmi.w	800e142 <_printf_float+0x42a>
 800df34:	68e0      	ldr	r0, [r4, #12]
 800df36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df38:	4298      	cmp	r0, r3
 800df3a:	bfb8      	it	lt
 800df3c:	4618      	movlt	r0, r3
 800df3e:	e739      	b.n	800ddb4 <_printf_float+0x9c>
 800df40:	2301      	movs	r3, #1
 800df42:	4652      	mov	r2, sl
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	47b8      	blx	r7
 800df4a:	3001      	adds	r0, #1
 800df4c:	f43f af30 	beq.w	800ddb0 <_printf_float+0x98>
 800df50:	f109 0901 	add.w	r9, r9, #1
 800df54:	e7e8      	b.n	800df28 <_printf_float+0x210>
 800df56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df58:	2b00      	cmp	r3, #0
 800df5a:	dc3b      	bgt.n	800dfd4 <_printf_float+0x2bc>
 800df5c:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd0 <_printf_float+0x2b8>)
 800df5e:	2301      	movs	r3, #1
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	47b8      	blx	r7
 800df66:	3001      	adds	r0, #1
 800df68:	f43f af22 	beq.w	800ddb0 <_printf_float+0x98>
 800df6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800df70:	ea59 0303 	orrs.w	r3, r9, r3
 800df74:	d102      	bne.n	800df7c <_printf_float+0x264>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	07d9      	lsls	r1, r3, #31
 800df7a:	d5d7      	bpl.n	800df2c <_printf_float+0x214>
 800df7c:	9b05      	ldr	r3, [sp, #20]
 800df7e:	465a      	mov	r2, fp
 800df80:	4631      	mov	r1, r6
 800df82:	4628      	mov	r0, r5
 800df84:	47b8      	blx	r7
 800df86:	3001      	adds	r0, #1
 800df88:	f43f af12 	beq.w	800ddb0 <_printf_float+0x98>
 800df8c:	f04f 0a00 	mov.w	sl, #0
 800df90:	f104 0b1a 	add.w	fp, r4, #26
 800df94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df96:	425b      	negs	r3, r3
 800df98:	4553      	cmp	r3, sl
 800df9a:	dc01      	bgt.n	800dfa0 <_printf_float+0x288>
 800df9c:	464b      	mov	r3, r9
 800df9e:	e794      	b.n	800deca <_printf_float+0x1b2>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	465a      	mov	r2, fp
 800dfa4:	4631      	mov	r1, r6
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	47b8      	blx	r7
 800dfaa:	3001      	adds	r0, #1
 800dfac:	f43f af00 	beq.w	800ddb0 <_printf_float+0x98>
 800dfb0:	f10a 0a01 	add.w	sl, sl, #1
 800dfb4:	e7ee      	b.n	800df94 <_printf_float+0x27c>
 800dfb6:	bf00      	nop
 800dfb8:	ffffffff 	.word	0xffffffff
 800dfbc:	7fefffff 	.word	0x7fefffff
 800dfc0:	08010579 	.word	0x08010579
 800dfc4:	0801057d 	.word	0x0801057d
 800dfc8:	08010581 	.word	0x08010581
 800dfcc:	08010585 	.word	0x08010585
 800dfd0:	08010589 	.word	0x08010589
 800dfd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dfd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dfda:	4553      	cmp	r3, sl
 800dfdc:	bfa8      	it	ge
 800dfde:	4653      	movge	r3, sl
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	4699      	mov	r9, r3
 800dfe4:	dc37      	bgt.n	800e056 <_printf_float+0x33e>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9307      	str	r3, [sp, #28]
 800dfea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfee:	f104 021a 	add.w	r2, r4, #26
 800dff2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dff4:	9907      	ldr	r1, [sp, #28]
 800dff6:	9306      	str	r3, [sp, #24]
 800dff8:	eba3 0309 	sub.w	r3, r3, r9
 800dffc:	428b      	cmp	r3, r1
 800dffe:	dc31      	bgt.n	800e064 <_printf_float+0x34c>
 800e000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e002:	459a      	cmp	sl, r3
 800e004:	dc3b      	bgt.n	800e07e <_printf_float+0x366>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	07da      	lsls	r2, r3, #31
 800e00a:	d438      	bmi.n	800e07e <_printf_float+0x366>
 800e00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e00e:	ebaa 0903 	sub.w	r9, sl, r3
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	ebaa 0303 	sub.w	r3, sl, r3
 800e018:	4599      	cmp	r9, r3
 800e01a:	bfa8      	it	ge
 800e01c:	4699      	movge	r9, r3
 800e01e:	f1b9 0f00 	cmp.w	r9, #0
 800e022:	dc34      	bgt.n	800e08e <_printf_float+0x376>
 800e024:	f04f 0800 	mov.w	r8, #0
 800e028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e02c:	f104 0b1a 	add.w	fp, r4, #26
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	ebaa 0303 	sub.w	r3, sl, r3
 800e036:	eba3 0309 	sub.w	r3, r3, r9
 800e03a:	4543      	cmp	r3, r8
 800e03c:	f77f af76 	ble.w	800df2c <_printf_float+0x214>
 800e040:	2301      	movs	r3, #1
 800e042:	465a      	mov	r2, fp
 800e044:	4631      	mov	r1, r6
 800e046:	4628      	mov	r0, r5
 800e048:	47b8      	blx	r7
 800e04a:	3001      	adds	r0, #1
 800e04c:	f43f aeb0 	beq.w	800ddb0 <_printf_float+0x98>
 800e050:	f108 0801 	add.w	r8, r8, #1
 800e054:	e7ec      	b.n	800e030 <_printf_float+0x318>
 800e056:	4642      	mov	r2, r8
 800e058:	4631      	mov	r1, r6
 800e05a:	4628      	mov	r0, r5
 800e05c:	47b8      	blx	r7
 800e05e:	3001      	adds	r0, #1
 800e060:	d1c1      	bne.n	800dfe6 <_printf_float+0x2ce>
 800e062:	e6a5      	b.n	800ddb0 <_printf_float+0x98>
 800e064:	2301      	movs	r3, #1
 800e066:	4631      	mov	r1, r6
 800e068:	4628      	mov	r0, r5
 800e06a:	9206      	str	r2, [sp, #24]
 800e06c:	47b8      	blx	r7
 800e06e:	3001      	adds	r0, #1
 800e070:	f43f ae9e 	beq.w	800ddb0 <_printf_float+0x98>
 800e074:	9b07      	ldr	r3, [sp, #28]
 800e076:	9a06      	ldr	r2, [sp, #24]
 800e078:	3301      	adds	r3, #1
 800e07a:	9307      	str	r3, [sp, #28]
 800e07c:	e7b9      	b.n	800dff2 <_printf_float+0x2da>
 800e07e:	9b05      	ldr	r3, [sp, #20]
 800e080:	465a      	mov	r2, fp
 800e082:	4631      	mov	r1, r6
 800e084:	4628      	mov	r0, r5
 800e086:	47b8      	blx	r7
 800e088:	3001      	adds	r0, #1
 800e08a:	d1bf      	bne.n	800e00c <_printf_float+0x2f4>
 800e08c:	e690      	b.n	800ddb0 <_printf_float+0x98>
 800e08e:	9a06      	ldr	r2, [sp, #24]
 800e090:	464b      	mov	r3, r9
 800e092:	4442      	add	r2, r8
 800e094:	4631      	mov	r1, r6
 800e096:	4628      	mov	r0, r5
 800e098:	47b8      	blx	r7
 800e09a:	3001      	adds	r0, #1
 800e09c:	d1c2      	bne.n	800e024 <_printf_float+0x30c>
 800e09e:	e687      	b.n	800ddb0 <_printf_float+0x98>
 800e0a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e0a4:	f1b9 0f01 	cmp.w	r9, #1
 800e0a8:	dc01      	bgt.n	800e0ae <_printf_float+0x396>
 800e0aa:	07db      	lsls	r3, r3, #31
 800e0ac:	d536      	bpl.n	800e11c <_printf_float+0x404>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	47b8      	blx	r7
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	f43f ae79 	beq.w	800ddb0 <_printf_float+0x98>
 800e0be:	9b05      	ldr	r3, [sp, #20]
 800e0c0:	465a      	mov	r2, fp
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	47b8      	blx	r7
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	f43f ae71 	beq.w	800ddb0 <_printf_float+0x98>
 800e0ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e0d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0da:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0de:	d018      	beq.n	800e112 <_printf_float+0x3fa>
 800e0e0:	464b      	mov	r3, r9
 800e0e2:	f108 0201 	add.w	r2, r8, #1
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	47b8      	blx	r7
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	d10c      	bne.n	800e10a <_printf_float+0x3f2>
 800e0f0:	e65e      	b.n	800ddb0 <_printf_float+0x98>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	465a      	mov	r2, fp
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	47b8      	blx	r7
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	f43f ae57 	beq.w	800ddb0 <_printf_float+0x98>
 800e102:	f108 0801 	add.w	r8, r8, #1
 800e106:	45c8      	cmp	r8, r9
 800e108:	dbf3      	blt.n	800e0f2 <_printf_float+0x3da>
 800e10a:	4653      	mov	r3, sl
 800e10c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e110:	e6dc      	b.n	800decc <_printf_float+0x1b4>
 800e112:	f04f 0800 	mov.w	r8, #0
 800e116:	f104 0b1a 	add.w	fp, r4, #26
 800e11a:	e7f4      	b.n	800e106 <_printf_float+0x3ee>
 800e11c:	2301      	movs	r3, #1
 800e11e:	4642      	mov	r2, r8
 800e120:	e7e1      	b.n	800e0e6 <_printf_float+0x3ce>
 800e122:	2301      	movs	r3, #1
 800e124:	464a      	mov	r2, r9
 800e126:	4631      	mov	r1, r6
 800e128:	4628      	mov	r0, r5
 800e12a:	47b8      	blx	r7
 800e12c:	3001      	adds	r0, #1
 800e12e:	f43f ae3f 	beq.w	800ddb0 <_printf_float+0x98>
 800e132:	f108 0801 	add.w	r8, r8, #1
 800e136:	68e3      	ldr	r3, [r4, #12]
 800e138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e13a:	1a5b      	subs	r3, r3, r1
 800e13c:	4543      	cmp	r3, r8
 800e13e:	dcf0      	bgt.n	800e122 <_printf_float+0x40a>
 800e140:	e6f8      	b.n	800df34 <_printf_float+0x21c>
 800e142:	f04f 0800 	mov.w	r8, #0
 800e146:	f104 0919 	add.w	r9, r4, #25
 800e14a:	e7f4      	b.n	800e136 <_printf_float+0x41e>

0800e14c <_printf_common>:
 800e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e150:	4616      	mov	r6, r2
 800e152:	4698      	mov	r8, r3
 800e154:	688a      	ldr	r2, [r1, #8]
 800e156:	690b      	ldr	r3, [r1, #16]
 800e158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	bfb8      	it	lt
 800e160:	4613      	movlt	r3, r2
 800e162:	6033      	str	r3, [r6, #0]
 800e164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e168:	4607      	mov	r7, r0
 800e16a:	460c      	mov	r4, r1
 800e16c:	b10a      	cbz	r2, 800e172 <_printf_common+0x26>
 800e16e:	3301      	adds	r3, #1
 800e170:	6033      	str	r3, [r6, #0]
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	0699      	lsls	r1, r3, #26
 800e176:	bf42      	ittt	mi
 800e178:	6833      	ldrmi	r3, [r6, #0]
 800e17a:	3302      	addmi	r3, #2
 800e17c:	6033      	strmi	r3, [r6, #0]
 800e17e:	6825      	ldr	r5, [r4, #0]
 800e180:	f015 0506 	ands.w	r5, r5, #6
 800e184:	d106      	bne.n	800e194 <_printf_common+0x48>
 800e186:	f104 0a19 	add.w	sl, r4, #25
 800e18a:	68e3      	ldr	r3, [r4, #12]
 800e18c:	6832      	ldr	r2, [r6, #0]
 800e18e:	1a9b      	subs	r3, r3, r2
 800e190:	42ab      	cmp	r3, r5
 800e192:	dc26      	bgt.n	800e1e2 <_printf_common+0x96>
 800e194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e198:	6822      	ldr	r2, [r4, #0]
 800e19a:	3b00      	subs	r3, #0
 800e19c:	bf18      	it	ne
 800e19e:	2301      	movne	r3, #1
 800e1a0:	0692      	lsls	r2, r2, #26
 800e1a2:	d42b      	bmi.n	800e1fc <_printf_common+0xb0>
 800e1a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1a8:	4641      	mov	r1, r8
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	47c8      	blx	r9
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	d01e      	beq.n	800e1f0 <_printf_common+0xa4>
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	6922      	ldr	r2, [r4, #16]
 800e1b6:	f003 0306 	and.w	r3, r3, #6
 800e1ba:	2b04      	cmp	r3, #4
 800e1bc:	bf02      	ittt	eq
 800e1be:	68e5      	ldreq	r5, [r4, #12]
 800e1c0:	6833      	ldreq	r3, [r6, #0]
 800e1c2:	1aed      	subeq	r5, r5, r3
 800e1c4:	68a3      	ldr	r3, [r4, #8]
 800e1c6:	bf0c      	ite	eq
 800e1c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1cc:	2500      	movne	r5, #0
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	bfc4      	itt	gt
 800e1d2:	1a9b      	subgt	r3, r3, r2
 800e1d4:	18ed      	addgt	r5, r5, r3
 800e1d6:	2600      	movs	r6, #0
 800e1d8:	341a      	adds	r4, #26
 800e1da:	42b5      	cmp	r5, r6
 800e1dc:	d11a      	bne.n	800e214 <_printf_common+0xc8>
 800e1de:	2000      	movs	r0, #0
 800e1e0:	e008      	b.n	800e1f4 <_printf_common+0xa8>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4652      	mov	r2, sl
 800e1e6:	4641      	mov	r1, r8
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	47c8      	blx	r9
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	d103      	bne.n	800e1f8 <_printf_common+0xac>
 800e1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f8:	3501      	adds	r5, #1
 800e1fa:	e7c6      	b.n	800e18a <_printf_common+0x3e>
 800e1fc:	18e1      	adds	r1, r4, r3
 800e1fe:	1c5a      	adds	r2, r3, #1
 800e200:	2030      	movs	r0, #48	@ 0x30
 800e202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e206:	4422      	add	r2, r4
 800e208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e20c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e210:	3302      	adds	r3, #2
 800e212:	e7c7      	b.n	800e1a4 <_printf_common+0x58>
 800e214:	2301      	movs	r3, #1
 800e216:	4622      	mov	r2, r4
 800e218:	4641      	mov	r1, r8
 800e21a:	4638      	mov	r0, r7
 800e21c:	47c8      	blx	r9
 800e21e:	3001      	adds	r0, #1
 800e220:	d0e6      	beq.n	800e1f0 <_printf_common+0xa4>
 800e222:	3601      	adds	r6, #1
 800e224:	e7d9      	b.n	800e1da <_printf_common+0x8e>
	...

0800e228 <_printf_i>:
 800e228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e22c:	7e0f      	ldrb	r7, [r1, #24]
 800e22e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e230:	2f78      	cmp	r7, #120	@ 0x78
 800e232:	4691      	mov	r9, r2
 800e234:	4680      	mov	r8, r0
 800e236:	460c      	mov	r4, r1
 800e238:	469a      	mov	sl, r3
 800e23a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e23e:	d807      	bhi.n	800e250 <_printf_i+0x28>
 800e240:	2f62      	cmp	r7, #98	@ 0x62
 800e242:	d80a      	bhi.n	800e25a <_printf_i+0x32>
 800e244:	2f00      	cmp	r7, #0
 800e246:	f000 80d2 	beq.w	800e3ee <_printf_i+0x1c6>
 800e24a:	2f58      	cmp	r7, #88	@ 0x58
 800e24c:	f000 80b9 	beq.w	800e3c2 <_printf_i+0x19a>
 800e250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e258:	e03a      	b.n	800e2d0 <_printf_i+0xa8>
 800e25a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e25e:	2b15      	cmp	r3, #21
 800e260:	d8f6      	bhi.n	800e250 <_printf_i+0x28>
 800e262:	a101      	add	r1, pc, #4	@ (adr r1, 800e268 <_printf_i+0x40>)
 800e264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e268:	0800e2c1 	.word	0x0800e2c1
 800e26c:	0800e2d5 	.word	0x0800e2d5
 800e270:	0800e251 	.word	0x0800e251
 800e274:	0800e251 	.word	0x0800e251
 800e278:	0800e251 	.word	0x0800e251
 800e27c:	0800e251 	.word	0x0800e251
 800e280:	0800e2d5 	.word	0x0800e2d5
 800e284:	0800e251 	.word	0x0800e251
 800e288:	0800e251 	.word	0x0800e251
 800e28c:	0800e251 	.word	0x0800e251
 800e290:	0800e251 	.word	0x0800e251
 800e294:	0800e3d5 	.word	0x0800e3d5
 800e298:	0800e2ff 	.word	0x0800e2ff
 800e29c:	0800e38f 	.word	0x0800e38f
 800e2a0:	0800e251 	.word	0x0800e251
 800e2a4:	0800e251 	.word	0x0800e251
 800e2a8:	0800e3f7 	.word	0x0800e3f7
 800e2ac:	0800e251 	.word	0x0800e251
 800e2b0:	0800e2ff 	.word	0x0800e2ff
 800e2b4:	0800e251 	.word	0x0800e251
 800e2b8:	0800e251 	.word	0x0800e251
 800e2bc:	0800e397 	.word	0x0800e397
 800e2c0:	6833      	ldr	r3, [r6, #0]
 800e2c2:	1d1a      	adds	r2, r3, #4
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6032      	str	r2, [r6, #0]
 800e2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	e09d      	b.n	800e410 <_printf_i+0x1e8>
 800e2d4:	6833      	ldr	r3, [r6, #0]
 800e2d6:	6820      	ldr	r0, [r4, #0]
 800e2d8:	1d19      	adds	r1, r3, #4
 800e2da:	6031      	str	r1, [r6, #0]
 800e2dc:	0606      	lsls	r6, r0, #24
 800e2de:	d501      	bpl.n	800e2e4 <_printf_i+0xbc>
 800e2e0:	681d      	ldr	r5, [r3, #0]
 800e2e2:	e003      	b.n	800e2ec <_printf_i+0xc4>
 800e2e4:	0645      	lsls	r5, r0, #25
 800e2e6:	d5fb      	bpl.n	800e2e0 <_printf_i+0xb8>
 800e2e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2ec:	2d00      	cmp	r5, #0
 800e2ee:	da03      	bge.n	800e2f8 <_printf_i+0xd0>
 800e2f0:	232d      	movs	r3, #45	@ 0x2d
 800e2f2:	426d      	negs	r5, r5
 800e2f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2f8:	4859      	ldr	r0, [pc, #356]	@ (800e460 <_printf_i+0x238>)
 800e2fa:	230a      	movs	r3, #10
 800e2fc:	e011      	b.n	800e322 <_printf_i+0xfa>
 800e2fe:	6821      	ldr	r1, [r4, #0]
 800e300:	6833      	ldr	r3, [r6, #0]
 800e302:	0608      	lsls	r0, r1, #24
 800e304:	f853 5b04 	ldr.w	r5, [r3], #4
 800e308:	d402      	bmi.n	800e310 <_printf_i+0xe8>
 800e30a:	0649      	lsls	r1, r1, #25
 800e30c:	bf48      	it	mi
 800e30e:	b2ad      	uxthmi	r5, r5
 800e310:	2f6f      	cmp	r7, #111	@ 0x6f
 800e312:	4853      	ldr	r0, [pc, #332]	@ (800e460 <_printf_i+0x238>)
 800e314:	6033      	str	r3, [r6, #0]
 800e316:	bf14      	ite	ne
 800e318:	230a      	movne	r3, #10
 800e31a:	2308      	moveq	r3, #8
 800e31c:	2100      	movs	r1, #0
 800e31e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e322:	6866      	ldr	r6, [r4, #4]
 800e324:	60a6      	str	r6, [r4, #8]
 800e326:	2e00      	cmp	r6, #0
 800e328:	bfa2      	ittt	ge
 800e32a:	6821      	ldrge	r1, [r4, #0]
 800e32c:	f021 0104 	bicge.w	r1, r1, #4
 800e330:	6021      	strge	r1, [r4, #0]
 800e332:	b90d      	cbnz	r5, 800e338 <_printf_i+0x110>
 800e334:	2e00      	cmp	r6, #0
 800e336:	d04b      	beq.n	800e3d0 <_printf_i+0x1a8>
 800e338:	4616      	mov	r6, r2
 800e33a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e33e:	fb03 5711 	mls	r7, r3, r1, r5
 800e342:	5dc7      	ldrb	r7, [r0, r7]
 800e344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e348:	462f      	mov	r7, r5
 800e34a:	42bb      	cmp	r3, r7
 800e34c:	460d      	mov	r5, r1
 800e34e:	d9f4      	bls.n	800e33a <_printf_i+0x112>
 800e350:	2b08      	cmp	r3, #8
 800e352:	d10b      	bne.n	800e36c <_printf_i+0x144>
 800e354:	6823      	ldr	r3, [r4, #0]
 800e356:	07df      	lsls	r7, r3, #31
 800e358:	d508      	bpl.n	800e36c <_printf_i+0x144>
 800e35a:	6923      	ldr	r3, [r4, #16]
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	4299      	cmp	r1, r3
 800e360:	bfde      	ittt	le
 800e362:	2330      	movle	r3, #48	@ 0x30
 800e364:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e368:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e36c:	1b92      	subs	r2, r2, r6
 800e36e:	6122      	str	r2, [r4, #16]
 800e370:	f8cd a000 	str.w	sl, [sp]
 800e374:	464b      	mov	r3, r9
 800e376:	aa03      	add	r2, sp, #12
 800e378:	4621      	mov	r1, r4
 800e37a:	4640      	mov	r0, r8
 800e37c:	f7ff fee6 	bl	800e14c <_printf_common>
 800e380:	3001      	adds	r0, #1
 800e382:	d14a      	bne.n	800e41a <_printf_i+0x1f2>
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	b004      	add	sp, #16
 800e38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	f043 0320 	orr.w	r3, r3, #32
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	4833      	ldr	r0, [pc, #204]	@ (800e464 <_printf_i+0x23c>)
 800e398:	2778      	movs	r7, #120	@ 0x78
 800e39a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	6831      	ldr	r1, [r6, #0]
 800e3a2:	061f      	lsls	r7, r3, #24
 800e3a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3a8:	d402      	bmi.n	800e3b0 <_printf_i+0x188>
 800e3aa:	065f      	lsls	r7, r3, #25
 800e3ac:	bf48      	it	mi
 800e3ae:	b2ad      	uxthmi	r5, r5
 800e3b0:	6031      	str	r1, [r6, #0]
 800e3b2:	07d9      	lsls	r1, r3, #31
 800e3b4:	bf44      	itt	mi
 800e3b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e3ba:	6023      	strmi	r3, [r4, #0]
 800e3bc:	b11d      	cbz	r5, 800e3c6 <_printf_i+0x19e>
 800e3be:	2310      	movs	r3, #16
 800e3c0:	e7ac      	b.n	800e31c <_printf_i+0xf4>
 800e3c2:	4827      	ldr	r0, [pc, #156]	@ (800e460 <_printf_i+0x238>)
 800e3c4:	e7e9      	b.n	800e39a <_printf_i+0x172>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	f023 0320 	bic.w	r3, r3, #32
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	e7f6      	b.n	800e3be <_printf_i+0x196>
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	e7bd      	b.n	800e350 <_printf_i+0x128>
 800e3d4:	6833      	ldr	r3, [r6, #0]
 800e3d6:	6825      	ldr	r5, [r4, #0]
 800e3d8:	6961      	ldr	r1, [r4, #20]
 800e3da:	1d18      	adds	r0, r3, #4
 800e3dc:	6030      	str	r0, [r6, #0]
 800e3de:	062e      	lsls	r6, r5, #24
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	d501      	bpl.n	800e3e8 <_printf_i+0x1c0>
 800e3e4:	6019      	str	r1, [r3, #0]
 800e3e6:	e002      	b.n	800e3ee <_printf_i+0x1c6>
 800e3e8:	0668      	lsls	r0, r5, #25
 800e3ea:	d5fb      	bpl.n	800e3e4 <_printf_i+0x1bc>
 800e3ec:	8019      	strh	r1, [r3, #0]
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6123      	str	r3, [r4, #16]
 800e3f2:	4616      	mov	r6, r2
 800e3f4:	e7bc      	b.n	800e370 <_printf_i+0x148>
 800e3f6:	6833      	ldr	r3, [r6, #0]
 800e3f8:	1d1a      	adds	r2, r3, #4
 800e3fa:	6032      	str	r2, [r6, #0]
 800e3fc:	681e      	ldr	r6, [r3, #0]
 800e3fe:	6862      	ldr	r2, [r4, #4]
 800e400:	2100      	movs	r1, #0
 800e402:	4630      	mov	r0, r6
 800e404:	f7f1 ff84 	bl	8000310 <memchr>
 800e408:	b108      	cbz	r0, 800e40e <_printf_i+0x1e6>
 800e40a:	1b80      	subs	r0, r0, r6
 800e40c:	6060      	str	r0, [r4, #4]
 800e40e:	6863      	ldr	r3, [r4, #4]
 800e410:	6123      	str	r3, [r4, #16]
 800e412:	2300      	movs	r3, #0
 800e414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e418:	e7aa      	b.n	800e370 <_printf_i+0x148>
 800e41a:	6923      	ldr	r3, [r4, #16]
 800e41c:	4632      	mov	r2, r6
 800e41e:	4649      	mov	r1, r9
 800e420:	4640      	mov	r0, r8
 800e422:	47d0      	blx	sl
 800e424:	3001      	adds	r0, #1
 800e426:	d0ad      	beq.n	800e384 <_printf_i+0x15c>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	079b      	lsls	r3, r3, #30
 800e42c:	d413      	bmi.n	800e456 <_printf_i+0x22e>
 800e42e:	68e0      	ldr	r0, [r4, #12]
 800e430:	9b03      	ldr	r3, [sp, #12]
 800e432:	4298      	cmp	r0, r3
 800e434:	bfb8      	it	lt
 800e436:	4618      	movlt	r0, r3
 800e438:	e7a6      	b.n	800e388 <_printf_i+0x160>
 800e43a:	2301      	movs	r3, #1
 800e43c:	4632      	mov	r2, r6
 800e43e:	4649      	mov	r1, r9
 800e440:	4640      	mov	r0, r8
 800e442:	47d0      	blx	sl
 800e444:	3001      	adds	r0, #1
 800e446:	d09d      	beq.n	800e384 <_printf_i+0x15c>
 800e448:	3501      	adds	r5, #1
 800e44a:	68e3      	ldr	r3, [r4, #12]
 800e44c:	9903      	ldr	r1, [sp, #12]
 800e44e:	1a5b      	subs	r3, r3, r1
 800e450:	42ab      	cmp	r3, r5
 800e452:	dcf2      	bgt.n	800e43a <_printf_i+0x212>
 800e454:	e7eb      	b.n	800e42e <_printf_i+0x206>
 800e456:	2500      	movs	r5, #0
 800e458:	f104 0619 	add.w	r6, r4, #25
 800e45c:	e7f5      	b.n	800e44a <_printf_i+0x222>
 800e45e:	bf00      	nop
 800e460:	0801058b 	.word	0x0801058b
 800e464:	0801059c 	.word	0x0801059c

0800e468 <std>:
 800e468:	2300      	movs	r3, #0
 800e46a:	b510      	push	{r4, lr}
 800e46c:	4604      	mov	r4, r0
 800e46e:	e9c0 3300 	strd	r3, r3, [r0]
 800e472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e476:	6083      	str	r3, [r0, #8]
 800e478:	8181      	strh	r1, [r0, #12]
 800e47a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e47c:	81c2      	strh	r2, [r0, #14]
 800e47e:	6183      	str	r3, [r0, #24]
 800e480:	4619      	mov	r1, r3
 800e482:	2208      	movs	r2, #8
 800e484:	305c      	adds	r0, #92	@ 0x5c
 800e486:	f000 f9e7 	bl	800e858 <memset>
 800e48a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c0 <std+0x58>)
 800e48c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e48e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c4 <std+0x5c>)
 800e490:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e492:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c8 <std+0x60>)
 800e494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e496:	4b0d      	ldr	r3, [pc, #52]	@ (800e4cc <std+0x64>)
 800e498:	6323      	str	r3, [r4, #48]	@ 0x30
 800e49a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d0 <std+0x68>)
 800e49c:	6224      	str	r4, [r4, #32]
 800e49e:	429c      	cmp	r4, r3
 800e4a0:	d006      	beq.n	800e4b0 <std+0x48>
 800e4a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4a6:	4294      	cmp	r4, r2
 800e4a8:	d002      	beq.n	800e4b0 <std+0x48>
 800e4aa:	33d0      	adds	r3, #208	@ 0xd0
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	d105      	bne.n	800e4bc <std+0x54>
 800e4b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b8:	f000 ba4a 	b.w	800e950 <__retarget_lock_init_recursive>
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop
 800e4c0:	0800e6a9 	.word	0x0800e6a9
 800e4c4:	0800e6cb 	.word	0x0800e6cb
 800e4c8:	0800e703 	.word	0x0800e703
 800e4cc:	0800e727 	.word	0x0800e727
 800e4d0:	240004f8 	.word	0x240004f8

0800e4d4 <stdio_exit_handler>:
 800e4d4:	4a02      	ldr	r2, [pc, #8]	@ (800e4e0 <stdio_exit_handler+0xc>)
 800e4d6:	4903      	ldr	r1, [pc, #12]	@ (800e4e4 <stdio_exit_handler+0x10>)
 800e4d8:	4803      	ldr	r0, [pc, #12]	@ (800e4e8 <stdio_exit_handler+0x14>)
 800e4da:	f000 b869 	b.w	800e5b0 <_fwalk_sglue>
 800e4de:	bf00      	nop
 800e4e0:	24000020 	.word	0x24000020
 800e4e4:	0800ff21 	.word	0x0800ff21
 800e4e8:	24000030 	.word	0x24000030

0800e4ec <cleanup_stdio>:
 800e4ec:	6841      	ldr	r1, [r0, #4]
 800e4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e520 <cleanup_stdio+0x34>)
 800e4f0:	4299      	cmp	r1, r3
 800e4f2:	b510      	push	{r4, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	d001      	beq.n	800e4fc <cleanup_stdio+0x10>
 800e4f8:	f001 fd12 	bl	800ff20 <_fflush_r>
 800e4fc:	68a1      	ldr	r1, [r4, #8]
 800e4fe:	4b09      	ldr	r3, [pc, #36]	@ (800e524 <cleanup_stdio+0x38>)
 800e500:	4299      	cmp	r1, r3
 800e502:	d002      	beq.n	800e50a <cleanup_stdio+0x1e>
 800e504:	4620      	mov	r0, r4
 800e506:	f001 fd0b 	bl	800ff20 <_fflush_r>
 800e50a:	68e1      	ldr	r1, [r4, #12]
 800e50c:	4b06      	ldr	r3, [pc, #24]	@ (800e528 <cleanup_stdio+0x3c>)
 800e50e:	4299      	cmp	r1, r3
 800e510:	d004      	beq.n	800e51c <cleanup_stdio+0x30>
 800e512:	4620      	mov	r0, r4
 800e514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e518:	f001 bd02 	b.w	800ff20 <_fflush_r>
 800e51c:	bd10      	pop	{r4, pc}
 800e51e:	bf00      	nop
 800e520:	240004f8 	.word	0x240004f8
 800e524:	24000560 	.word	0x24000560
 800e528:	240005c8 	.word	0x240005c8

0800e52c <global_stdio_init.part.0>:
 800e52c:	b510      	push	{r4, lr}
 800e52e:	4b0b      	ldr	r3, [pc, #44]	@ (800e55c <global_stdio_init.part.0+0x30>)
 800e530:	4c0b      	ldr	r4, [pc, #44]	@ (800e560 <global_stdio_init.part.0+0x34>)
 800e532:	4a0c      	ldr	r2, [pc, #48]	@ (800e564 <global_stdio_init.part.0+0x38>)
 800e534:	601a      	str	r2, [r3, #0]
 800e536:	4620      	mov	r0, r4
 800e538:	2200      	movs	r2, #0
 800e53a:	2104      	movs	r1, #4
 800e53c:	f7ff ff94 	bl	800e468 <std>
 800e540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e544:	2201      	movs	r2, #1
 800e546:	2109      	movs	r1, #9
 800e548:	f7ff ff8e 	bl	800e468 <std>
 800e54c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e550:	2202      	movs	r2, #2
 800e552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e556:	2112      	movs	r1, #18
 800e558:	f7ff bf86 	b.w	800e468 <std>
 800e55c:	24000630 	.word	0x24000630
 800e560:	240004f8 	.word	0x240004f8
 800e564:	0800e4d5 	.word	0x0800e4d5

0800e568 <__sfp_lock_acquire>:
 800e568:	4801      	ldr	r0, [pc, #4]	@ (800e570 <__sfp_lock_acquire+0x8>)
 800e56a:	f000 b9f2 	b.w	800e952 <__retarget_lock_acquire_recursive>
 800e56e:	bf00      	nop
 800e570:	24000639 	.word	0x24000639

0800e574 <__sfp_lock_release>:
 800e574:	4801      	ldr	r0, [pc, #4]	@ (800e57c <__sfp_lock_release+0x8>)
 800e576:	f000 b9ed 	b.w	800e954 <__retarget_lock_release_recursive>
 800e57a:	bf00      	nop
 800e57c:	24000639 	.word	0x24000639

0800e580 <__sinit>:
 800e580:	b510      	push	{r4, lr}
 800e582:	4604      	mov	r4, r0
 800e584:	f7ff fff0 	bl	800e568 <__sfp_lock_acquire>
 800e588:	6a23      	ldr	r3, [r4, #32]
 800e58a:	b11b      	cbz	r3, 800e594 <__sinit+0x14>
 800e58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e590:	f7ff bff0 	b.w	800e574 <__sfp_lock_release>
 800e594:	4b04      	ldr	r3, [pc, #16]	@ (800e5a8 <__sinit+0x28>)
 800e596:	6223      	str	r3, [r4, #32]
 800e598:	4b04      	ldr	r3, [pc, #16]	@ (800e5ac <__sinit+0x2c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1f5      	bne.n	800e58c <__sinit+0xc>
 800e5a0:	f7ff ffc4 	bl	800e52c <global_stdio_init.part.0>
 800e5a4:	e7f2      	b.n	800e58c <__sinit+0xc>
 800e5a6:	bf00      	nop
 800e5a8:	0800e4ed 	.word	0x0800e4ed
 800e5ac:	24000630 	.word	0x24000630

0800e5b0 <_fwalk_sglue>:
 800e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	4688      	mov	r8, r1
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	2600      	movs	r6, #0
 800e5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e5c4:	d505      	bpl.n	800e5d2 <_fwalk_sglue+0x22>
 800e5c6:	6824      	ldr	r4, [r4, #0]
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	d1f7      	bne.n	800e5bc <_fwalk_sglue+0xc>
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d2:	89ab      	ldrh	r3, [r5, #12]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d907      	bls.n	800e5e8 <_fwalk_sglue+0x38>
 800e5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	d003      	beq.n	800e5e8 <_fwalk_sglue+0x38>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	47c0      	blx	r8
 800e5e6:	4306      	orrs	r6, r0
 800e5e8:	3568      	adds	r5, #104	@ 0x68
 800e5ea:	e7e9      	b.n	800e5c0 <_fwalk_sglue+0x10>

0800e5ec <_puts_r>:
 800e5ec:	6a03      	ldr	r3, [r0, #32]
 800e5ee:	b570      	push	{r4, r5, r6, lr}
 800e5f0:	6884      	ldr	r4, [r0, #8]
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	b90b      	cbnz	r3, 800e5fc <_puts_r+0x10>
 800e5f8:	f7ff ffc2 	bl	800e580 <__sinit>
 800e5fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5fe:	07db      	lsls	r3, r3, #31
 800e600:	d405      	bmi.n	800e60e <_puts_r+0x22>
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	0598      	lsls	r0, r3, #22
 800e606:	d402      	bmi.n	800e60e <_puts_r+0x22>
 800e608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e60a:	f000 f9a2 	bl	800e952 <__retarget_lock_acquire_recursive>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	0719      	lsls	r1, r3, #28
 800e612:	d502      	bpl.n	800e61a <_puts_r+0x2e>
 800e614:	6923      	ldr	r3, [r4, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d135      	bne.n	800e686 <_puts_r+0x9a>
 800e61a:	4621      	mov	r1, r4
 800e61c:	4628      	mov	r0, r5
 800e61e:	f000 f8c5 	bl	800e7ac <__swsetup_r>
 800e622:	b380      	cbz	r0, 800e686 <_puts_r+0x9a>
 800e624:	f04f 35ff 	mov.w	r5, #4294967295
 800e628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e62a:	07da      	lsls	r2, r3, #31
 800e62c:	d405      	bmi.n	800e63a <_puts_r+0x4e>
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	059b      	lsls	r3, r3, #22
 800e632:	d402      	bmi.n	800e63a <_puts_r+0x4e>
 800e634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e636:	f000 f98d 	bl	800e954 <__retarget_lock_release_recursive>
 800e63a:	4628      	mov	r0, r5
 800e63c:	bd70      	pop	{r4, r5, r6, pc}
 800e63e:	2b00      	cmp	r3, #0
 800e640:	da04      	bge.n	800e64c <_puts_r+0x60>
 800e642:	69a2      	ldr	r2, [r4, #24]
 800e644:	429a      	cmp	r2, r3
 800e646:	dc17      	bgt.n	800e678 <_puts_r+0x8c>
 800e648:	290a      	cmp	r1, #10
 800e64a:	d015      	beq.n	800e678 <_puts_r+0x8c>
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	6022      	str	r2, [r4, #0]
 800e652:	7019      	strb	r1, [r3, #0]
 800e654:	68a3      	ldr	r3, [r4, #8]
 800e656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e65a:	3b01      	subs	r3, #1
 800e65c:	60a3      	str	r3, [r4, #8]
 800e65e:	2900      	cmp	r1, #0
 800e660:	d1ed      	bne.n	800e63e <_puts_r+0x52>
 800e662:	2b00      	cmp	r3, #0
 800e664:	da11      	bge.n	800e68a <_puts_r+0x9e>
 800e666:	4622      	mov	r2, r4
 800e668:	210a      	movs	r1, #10
 800e66a:	4628      	mov	r0, r5
 800e66c:	f000 f85f 	bl	800e72e <__swbuf_r>
 800e670:	3001      	adds	r0, #1
 800e672:	d0d7      	beq.n	800e624 <_puts_r+0x38>
 800e674:	250a      	movs	r5, #10
 800e676:	e7d7      	b.n	800e628 <_puts_r+0x3c>
 800e678:	4622      	mov	r2, r4
 800e67a:	4628      	mov	r0, r5
 800e67c:	f000 f857 	bl	800e72e <__swbuf_r>
 800e680:	3001      	adds	r0, #1
 800e682:	d1e7      	bne.n	800e654 <_puts_r+0x68>
 800e684:	e7ce      	b.n	800e624 <_puts_r+0x38>
 800e686:	3e01      	subs	r6, #1
 800e688:	e7e4      	b.n	800e654 <_puts_r+0x68>
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	6022      	str	r2, [r4, #0]
 800e690:	220a      	movs	r2, #10
 800e692:	701a      	strb	r2, [r3, #0]
 800e694:	e7ee      	b.n	800e674 <_puts_r+0x88>
	...

0800e698 <puts>:
 800e698:	4b02      	ldr	r3, [pc, #8]	@ (800e6a4 <puts+0xc>)
 800e69a:	4601      	mov	r1, r0
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	f7ff bfa5 	b.w	800e5ec <_puts_r>
 800e6a2:	bf00      	nop
 800e6a4:	2400002c 	.word	0x2400002c

0800e6a8 <__sread>:
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b0:	f000 f900 	bl	800e8b4 <_read_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	bfab      	itete	ge
 800e6b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e6bc:	181b      	addge	r3, r3, r0
 800e6be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6c2:	bfac      	ite	ge
 800e6c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6c6:	81a3      	strhlt	r3, [r4, #12]
 800e6c8:	bd10      	pop	{r4, pc}

0800e6ca <__swrite>:
 800e6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ce:	461f      	mov	r7, r3
 800e6d0:	898b      	ldrh	r3, [r1, #12]
 800e6d2:	05db      	lsls	r3, r3, #23
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	4616      	mov	r6, r2
 800e6da:	d505      	bpl.n	800e6e8 <__swrite+0x1e>
 800e6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f000 f8d4 	bl	800e890 <_lseek_r>
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fe:	f000 b8eb 	b.w	800e8d8 <_write_r>

0800e702 <__sseek>:
 800e702:	b510      	push	{r4, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e70a:	f000 f8c1 	bl	800e890 <_lseek_r>
 800e70e:	1c43      	adds	r3, r0, #1
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	bf15      	itete	ne
 800e714:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e71a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e71e:	81a3      	strheq	r3, [r4, #12]
 800e720:	bf18      	it	ne
 800e722:	81a3      	strhne	r3, [r4, #12]
 800e724:	bd10      	pop	{r4, pc}

0800e726 <__sclose>:
 800e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72a:	f000 b8a1 	b.w	800e870 <_close_r>

0800e72e <__swbuf_r>:
 800e72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e730:	460e      	mov	r6, r1
 800e732:	4614      	mov	r4, r2
 800e734:	4605      	mov	r5, r0
 800e736:	b118      	cbz	r0, 800e740 <__swbuf_r+0x12>
 800e738:	6a03      	ldr	r3, [r0, #32]
 800e73a:	b90b      	cbnz	r3, 800e740 <__swbuf_r+0x12>
 800e73c:	f7ff ff20 	bl	800e580 <__sinit>
 800e740:	69a3      	ldr	r3, [r4, #24]
 800e742:	60a3      	str	r3, [r4, #8]
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	071a      	lsls	r2, r3, #28
 800e748:	d501      	bpl.n	800e74e <__swbuf_r+0x20>
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	b943      	cbnz	r3, 800e760 <__swbuf_r+0x32>
 800e74e:	4621      	mov	r1, r4
 800e750:	4628      	mov	r0, r5
 800e752:	f000 f82b 	bl	800e7ac <__swsetup_r>
 800e756:	b118      	cbz	r0, 800e760 <__swbuf_r+0x32>
 800e758:	f04f 37ff 	mov.w	r7, #4294967295
 800e75c:	4638      	mov	r0, r7
 800e75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	6922      	ldr	r2, [r4, #16]
 800e764:	1a98      	subs	r0, r3, r2
 800e766:	6963      	ldr	r3, [r4, #20]
 800e768:	b2f6      	uxtb	r6, r6
 800e76a:	4283      	cmp	r3, r0
 800e76c:	4637      	mov	r7, r6
 800e76e:	dc05      	bgt.n	800e77c <__swbuf_r+0x4e>
 800e770:	4621      	mov	r1, r4
 800e772:	4628      	mov	r0, r5
 800e774:	f001 fbd4 	bl	800ff20 <_fflush_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d1ed      	bne.n	800e758 <__swbuf_r+0x2a>
 800e77c:	68a3      	ldr	r3, [r4, #8]
 800e77e:	3b01      	subs	r3, #1
 800e780:	60a3      	str	r3, [r4, #8]
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	1c5a      	adds	r2, r3, #1
 800e786:	6022      	str	r2, [r4, #0]
 800e788:	701e      	strb	r6, [r3, #0]
 800e78a:	6962      	ldr	r2, [r4, #20]
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	429a      	cmp	r2, r3
 800e790:	d004      	beq.n	800e79c <__swbuf_r+0x6e>
 800e792:	89a3      	ldrh	r3, [r4, #12]
 800e794:	07db      	lsls	r3, r3, #31
 800e796:	d5e1      	bpl.n	800e75c <__swbuf_r+0x2e>
 800e798:	2e0a      	cmp	r6, #10
 800e79a:	d1df      	bne.n	800e75c <__swbuf_r+0x2e>
 800e79c:	4621      	mov	r1, r4
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f001 fbbe 	bl	800ff20 <_fflush_r>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d0d9      	beq.n	800e75c <__swbuf_r+0x2e>
 800e7a8:	e7d6      	b.n	800e758 <__swbuf_r+0x2a>
	...

0800e7ac <__swsetup_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4b29      	ldr	r3, [pc, #164]	@ (800e854 <__swsetup_r+0xa8>)
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	6818      	ldr	r0, [r3, #0]
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	b118      	cbz	r0, 800e7c0 <__swsetup_r+0x14>
 800e7b8:	6a03      	ldr	r3, [r0, #32]
 800e7ba:	b90b      	cbnz	r3, 800e7c0 <__swsetup_r+0x14>
 800e7bc:	f7ff fee0 	bl	800e580 <__sinit>
 800e7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c4:	0719      	lsls	r1, r3, #28
 800e7c6:	d422      	bmi.n	800e80e <__swsetup_r+0x62>
 800e7c8:	06da      	lsls	r2, r3, #27
 800e7ca:	d407      	bmi.n	800e7dc <__swsetup_r+0x30>
 800e7cc:	2209      	movs	r2, #9
 800e7ce:	602a      	str	r2, [r5, #0]
 800e7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d4:	81a3      	strh	r3, [r4, #12]
 800e7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7da:	e033      	b.n	800e844 <__swsetup_r+0x98>
 800e7dc:	0758      	lsls	r0, r3, #29
 800e7de:	d512      	bpl.n	800e806 <__swsetup_r+0x5a>
 800e7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7e2:	b141      	cbz	r1, 800e7f6 <__swsetup_r+0x4a>
 800e7e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d002      	beq.n	800e7f2 <__swsetup_r+0x46>
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f000 fe91 	bl	800f514 <_free_r>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	2300      	movs	r3, #0
 800e800:	6063      	str	r3, [r4, #4]
 800e802:	6923      	ldr	r3, [r4, #16]
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	f043 0308 	orr.w	r3, r3, #8
 800e80c:	81a3      	strh	r3, [r4, #12]
 800e80e:	6923      	ldr	r3, [r4, #16]
 800e810:	b94b      	cbnz	r3, 800e826 <__swsetup_r+0x7a>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e81c:	d003      	beq.n	800e826 <__swsetup_r+0x7a>
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f001 fbcb 	bl	800ffbc <__smakebuf_r>
 800e826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82a:	f013 0201 	ands.w	r2, r3, #1
 800e82e:	d00a      	beq.n	800e846 <__swsetup_r+0x9a>
 800e830:	2200      	movs	r2, #0
 800e832:	60a2      	str	r2, [r4, #8]
 800e834:	6962      	ldr	r2, [r4, #20]
 800e836:	4252      	negs	r2, r2
 800e838:	61a2      	str	r2, [r4, #24]
 800e83a:	6922      	ldr	r2, [r4, #16]
 800e83c:	b942      	cbnz	r2, 800e850 <__swsetup_r+0xa4>
 800e83e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e842:	d1c5      	bne.n	800e7d0 <__swsetup_r+0x24>
 800e844:	bd38      	pop	{r3, r4, r5, pc}
 800e846:	0799      	lsls	r1, r3, #30
 800e848:	bf58      	it	pl
 800e84a:	6962      	ldrpl	r2, [r4, #20]
 800e84c:	60a2      	str	r2, [r4, #8]
 800e84e:	e7f4      	b.n	800e83a <__swsetup_r+0x8e>
 800e850:	2000      	movs	r0, #0
 800e852:	e7f7      	b.n	800e844 <__swsetup_r+0x98>
 800e854:	2400002c 	.word	0x2400002c

0800e858 <memset>:
 800e858:	4402      	add	r2, r0
 800e85a:	4603      	mov	r3, r0
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d100      	bne.n	800e862 <memset+0xa>
 800e860:	4770      	bx	lr
 800e862:	f803 1b01 	strb.w	r1, [r3], #1
 800e866:	e7f9      	b.n	800e85c <memset+0x4>

0800e868 <_localeconv_r>:
 800e868:	4800      	ldr	r0, [pc, #0]	@ (800e86c <_localeconv_r+0x4>)
 800e86a:	4770      	bx	lr
 800e86c:	2400016c 	.word	0x2400016c

0800e870 <_close_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d06      	ldr	r5, [pc, #24]	@ (800e88c <_close_r+0x1c>)
 800e874:	2300      	movs	r3, #0
 800e876:	4604      	mov	r4, r0
 800e878:	4608      	mov	r0, r1
 800e87a:	602b      	str	r3, [r5, #0]
 800e87c:	f7f2 ff9b 	bl	80017b6 <_close>
 800e880:	1c43      	adds	r3, r0, #1
 800e882:	d102      	bne.n	800e88a <_close_r+0x1a>
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	b103      	cbz	r3, 800e88a <_close_r+0x1a>
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	24000634 	.word	0x24000634

0800e890 <_lseek_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d07      	ldr	r5, [pc, #28]	@ (800e8b0 <_lseek_r+0x20>)
 800e894:	4604      	mov	r4, r0
 800e896:	4608      	mov	r0, r1
 800e898:	4611      	mov	r1, r2
 800e89a:	2200      	movs	r2, #0
 800e89c:	602a      	str	r2, [r5, #0]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	f7f2 ffb0 	bl	8001804 <_lseek>
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	d102      	bne.n	800e8ae <_lseek_r+0x1e>
 800e8a8:	682b      	ldr	r3, [r5, #0]
 800e8aa:	b103      	cbz	r3, 800e8ae <_lseek_r+0x1e>
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	bd38      	pop	{r3, r4, r5, pc}
 800e8b0:	24000634 	.word	0x24000634

0800e8b4 <_read_r>:
 800e8b4:	b538      	push	{r3, r4, r5, lr}
 800e8b6:	4d07      	ldr	r5, [pc, #28]	@ (800e8d4 <_read_r+0x20>)
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	4608      	mov	r0, r1
 800e8bc:	4611      	mov	r1, r2
 800e8be:	2200      	movs	r2, #0
 800e8c0:	602a      	str	r2, [r5, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	f7f2 ff3e 	bl	8001744 <_read>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d102      	bne.n	800e8d2 <_read_r+0x1e>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	b103      	cbz	r3, 800e8d2 <_read_r+0x1e>
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	bd38      	pop	{r3, r4, r5, pc}
 800e8d4:	24000634 	.word	0x24000634

0800e8d8 <_write_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d07      	ldr	r5, [pc, #28]	@ (800e8f8 <_write_r+0x20>)
 800e8dc:	4604      	mov	r4, r0
 800e8de:	4608      	mov	r0, r1
 800e8e0:	4611      	mov	r1, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	602a      	str	r2, [r5, #0]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f7f2 ff49 	bl	800177e <_write>
 800e8ec:	1c43      	adds	r3, r0, #1
 800e8ee:	d102      	bne.n	800e8f6 <_write_r+0x1e>
 800e8f0:	682b      	ldr	r3, [r5, #0]
 800e8f2:	b103      	cbz	r3, 800e8f6 <_write_r+0x1e>
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}
 800e8f8:	24000634 	.word	0x24000634

0800e8fc <__errno>:
 800e8fc:	4b01      	ldr	r3, [pc, #4]	@ (800e904 <__errno+0x8>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2400002c 	.word	0x2400002c

0800e908 <__libc_init_array>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4d0d      	ldr	r5, [pc, #52]	@ (800e940 <__libc_init_array+0x38>)
 800e90c:	4c0d      	ldr	r4, [pc, #52]	@ (800e944 <__libc_init_array+0x3c>)
 800e90e:	1b64      	subs	r4, r4, r5
 800e910:	10a4      	asrs	r4, r4, #2
 800e912:	2600      	movs	r6, #0
 800e914:	42a6      	cmp	r6, r4
 800e916:	d109      	bne.n	800e92c <__libc_init_array+0x24>
 800e918:	4d0b      	ldr	r5, [pc, #44]	@ (800e948 <__libc_init_array+0x40>)
 800e91a:	4c0c      	ldr	r4, [pc, #48]	@ (800e94c <__libc_init_array+0x44>)
 800e91c:	f001 fdba 	bl	8010494 <_init>
 800e920:	1b64      	subs	r4, r4, r5
 800e922:	10a4      	asrs	r4, r4, #2
 800e924:	2600      	movs	r6, #0
 800e926:	42a6      	cmp	r6, r4
 800e928:	d105      	bne.n	800e936 <__libc_init_array+0x2e>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e930:	4798      	blx	r3
 800e932:	3601      	adds	r6, #1
 800e934:	e7ee      	b.n	800e914 <__libc_init_array+0xc>
 800e936:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93a:	4798      	blx	r3
 800e93c:	3601      	adds	r6, #1
 800e93e:	e7f2      	b.n	800e926 <__libc_init_array+0x1e>
 800e940:	080108f0 	.word	0x080108f0
 800e944:	080108f0 	.word	0x080108f0
 800e948:	080108f0 	.word	0x080108f0
 800e94c:	080108f4 	.word	0x080108f4

0800e950 <__retarget_lock_init_recursive>:
 800e950:	4770      	bx	lr

0800e952 <__retarget_lock_acquire_recursive>:
 800e952:	4770      	bx	lr

0800e954 <__retarget_lock_release_recursive>:
 800e954:	4770      	bx	lr

0800e956 <quorem>:
 800e956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95a:	6903      	ldr	r3, [r0, #16]
 800e95c:	690c      	ldr	r4, [r1, #16]
 800e95e:	42a3      	cmp	r3, r4
 800e960:	4607      	mov	r7, r0
 800e962:	db7e      	blt.n	800ea62 <quorem+0x10c>
 800e964:	3c01      	subs	r4, #1
 800e966:	f101 0814 	add.w	r8, r1, #20
 800e96a:	00a3      	lsls	r3, r4, #2
 800e96c:	f100 0514 	add.w	r5, r0, #20
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e97c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e980:	3301      	adds	r3, #1
 800e982:	429a      	cmp	r2, r3
 800e984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e988:	fbb2 f6f3 	udiv	r6, r2, r3
 800e98c:	d32e      	bcc.n	800e9ec <quorem+0x96>
 800e98e:	f04f 0a00 	mov.w	sl, #0
 800e992:	46c4      	mov	ip, r8
 800e994:	46ae      	mov	lr, r5
 800e996:	46d3      	mov	fp, sl
 800e998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e99c:	b298      	uxth	r0, r3
 800e99e:	fb06 a000 	mla	r0, r6, r0, sl
 800e9a2:	0c02      	lsrs	r2, r0, #16
 800e9a4:	0c1b      	lsrs	r3, r3, #16
 800e9a6:	fb06 2303 	mla	r3, r6, r3, r2
 800e9aa:	f8de 2000 	ldr.w	r2, [lr]
 800e9ae:	b280      	uxth	r0, r0
 800e9b0:	b292      	uxth	r2, r2
 800e9b2:	1a12      	subs	r2, r2, r0
 800e9b4:	445a      	add	r2, fp
 800e9b6:	f8de 0000 	ldr.w	r0, [lr]
 800e9ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e9c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e9c8:	b292      	uxth	r2, r2
 800e9ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e9ce:	45e1      	cmp	r9, ip
 800e9d0:	f84e 2b04 	str.w	r2, [lr], #4
 800e9d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e9d8:	d2de      	bcs.n	800e998 <quorem+0x42>
 800e9da:	9b00      	ldr	r3, [sp, #0]
 800e9dc:	58eb      	ldr	r3, [r5, r3]
 800e9de:	b92b      	cbnz	r3, 800e9ec <quorem+0x96>
 800e9e0:	9b01      	ldr	r3, [sp, #4]
 800e9e2:	3b04      	subs	r3, #4
 800e9e4:	429d      	cmp	r5, r3
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	d32f      	bcc.n	800ea4a <quorem+0xf4>
 800e9ea:	613c      	str	r4, [r7, #16]
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	f001 f90b 	bl	800fc08 <__mcmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	db25      	blt.n	800ea42 <quorem+0xec>
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9fe:	f8d1 c000 	ldr.w	ip, [r1]
 800ea02:	fa1f fe82 	uxth.w	lr, r2
 800ea06:	fa1f f38c 	uxth.w	r3, ip
 800ea0a:	eba3 030e 	sub.w	r3, r3, lr
 800ea0e:	4403      	add	r3, r0
 800ea10:	0c12      	lsrs	r2, r2, #16
 800ea12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ea16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea20:	45c1      	cmp	r9, r8
 800ea22:	f841 3b04 	str.w	r3, [r1], #4
 800ea26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea2a:	d2e6      	bcs.n	800e9fa <quorem+0xa4>
 800ea2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea34:	b922      	cbnz	r2, 800ea40 <quorem+0xea>
 800ea36:	3b04      	subs	r3, #4
 800ea38:	429d      	cmp	r5, r3
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	d30b      	bcc.n	800ea56 <quorem+0x100>
 800ea3e:	613c      	str	r4, [r7, #16]
 800ea40:	3601      	adds	r6, #1
 800ea42:	4630      	mov	r0, r6
 800ea44:	b003      	add	sp, #12
 800ea46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	3b04      	subs	r3, #4
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	d1cb      	bne.n	800e9ea <quorem+0x94>
 800ea52:	3c01      	subs	r4, #1
 800ea54:	e7c6      	b.n	800e9e4 <quorem+0x8e>
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	3b04      	subs	r3, #4
 800ea5a:	2a00      	cmp	r2, #0
 800ea5c:	d1ef      	bne.n	800ea3e <quorem+0xe8>
 800ea5e:	3c01      	subs	r4, #1
 800ea60:	e7ea      	b.n	800ea38 <quorem+0xe2>
 800ea62:	2000      	movs	r0, #0
 800ea64:	e7ee      	b.n	800ea44 <quorem+0xee>
	...

0800ea68 <_dtoa_r>:
 800ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	ed2d 8b02 	vpush	{d8}
 800ea70:	69c7      	ldr	r7, [r0, #28]
 800ea72:	b091      	sub	sp, #68	@ 0x44
 800ea74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea78:	ec55 4b10 	vmov	r4, r5, d0
 800ea7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ea7e:	9107      	str	r1, [sp, #28]
 800ea80:	4681      	mov	r9, r0
 800ea82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea84:	930d      	str	r3, [sp, #52]	@ 0x34
 800ea86:	b97f      	cbnz	r7, 800eaa8 <_dtoa_r+0x40>
 800ea88:	2010      	movs	r0, #16
 800ea8a:	f000 fd8d 	bl	800f5a8 <malloc>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	f8c9 001c 	str.w	r0, [r9, #28]
 800ea94:	b920      	cbnz	r0, 800eaa0 <_dtoa_r+0x38>
 800ea96:	4ba0      	ldr	r3, [pc, #640]	@ (800ed18 <_dtoa_r+0x2b0>)
 800ea98:	21ef      	movs	r1, #239	@ 0xef
 800ea9a:	48a0      	ldr	r0, [pc, #640]	@ (800ed1c <_dtoa_r+0x2b4>)
 800ea9c:	f001 fb0a 	bl	80100b4 <__assert_func>
 800eaa0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eaa4:	6007      	str	r7, [r0, #0]
 800eaa6:	60c7      	str	r7, [r0, #12]
 800eaa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eaac:	6819      	ldr	r1, [r3, #0]
 800eaae:	b159      	cbz	r1, 800eac8 <_dtoa_r+0x60>
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	604a      	str	r2, [r1, #4]
 800eab4:	2301      	movs	r3, #1
 800eab6:	4093      	lsls	r3, r2
 800eab8:	608b      	str	r3, [r1, #8]
 800eaba:	4648      	mov	r0, r9
 800eabc:	f000 fe6a 	bl	800f794 <_Bfree>
 800eac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eac4:	2200      	movs	r2, #0
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	1e2b      	subs	r3, r5, #0
 800eaca:	bfbb      	ittet	lt
 800eacc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ead0:	9303      	strlt	r3, [sp, #12]
 800ead2:	2300      	movge	r3, #0
 800ead4:	2201      	movlt	r2, #1
 800ead6:	bfac      	ite	ge
 800ead8:	6033      	strge	r3, [r6, #0]
 800eada:	6032      	strlt	r2, [r6, #0]
 800eadc:	4b90      	ldr	r3, [pc, #576]	@ (800ed20 <_dtoa_r+0x2b8>)
 800eade:	9e03      	ldr	r6, [sp, #12]
 800eae0:	43b3      	bics	r3, r6
 800eae2:	d110      	bne.n	800eb06 <_dtoa_r+0x9e>
 800eae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eae6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800eaf0:	4323      	orrs	r3, r4
 800eaf2:	f000 84de 	beq.w	800f4b2 <_dtoa_r+0xa4a>
 800eaf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eaf8:	4f8a      	ldr	r7, [pc, #552]	@ (800ed24 <_dtoa_r+0x2bc>)
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 84e0 	beq.w	800f4c0 <_dtoa_r+0xa58>
 800eb00:	1cfb      	adds	r3, r7, #3
 800eb02:	f000 bcdb 	b.w	800f4bc <_dtoa_r+0xa54>
 800eb06:	ed9d 8b02 	vldr	d8, [sp, #8]
 800eb0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb12:	d10a      	bne.n	800eb2a <_dtoa_r+0xc2>
 800eb14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb16:	2301      	movs	r3, #1
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb1c:	b113      	cbz	r3, 800eb24 <_dtoa_r+0xbc>
 800eb1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800eb20:	4b81      	ldr	r3, [pc, #516]	@ (800ed28 <_dtoa_r+0x2c0>)
 800eb22:	6013      	str	r3, [r2, #0]
 800eb24:	4f81      	ldr	r7, [pc, #516]	@ (800ed2c <_dtoa_r+0x2c4>)
 800eb26:	f000 bccb 	b.w	800f4c0 <_dtoa_r+0xa58>
 800eb2a:	aa0e      	add	r2, sp, #56	@ 0x38
 800eb2c:	a90f      	add	r1, sp, #60	@ 0x3c
 800eb2e:	4648      	mov	r0, r9
 800eb30:	eeb0 0b48 	vmov.f64	d0, d8
 800eb34:	f001 f918 	bl	800fd68 <__d2b>
 800eb38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800eb3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb3e:	9001      	str	r0, [sp, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d045      	beq.n	800ebd0 <_dtoa_r+0x168>
 800eb44:	eeb0 7b48 	vmov.f64	d7, d8
 800eb48:	ee18 1a90 	vmov	r1, s17
 800eb4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800eb50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800eb54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800eb58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800eb5c:	2500      	movs	r5, #0
 800eb5e:	ee07 1a90 	vmov	s15, r1
 800eb62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800eb66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ed00 <_dtoa_r+0x298>
 800eb6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ed08 <_dtoa_r+0x2a0>
 800eb72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eb76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ed10 <_dtoa_r+0x2a8>
 800eb7a:	ee07 3a90 	vmov	s15, r3
 800eb7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800eb82:	eeb0 7b46 	vmov.f64	d7, d6
 800eb86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800eb8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800eb8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb96:	ee16 8a90 	vmov	r8, s13
 800eb9a:	d508      	bpl.n	800ebae <_dtoa_r+0x146>
 800eb9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800eba0:	eeb4 6b47 	vcmp.f64	d6, d7
 800eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba8:	bf18      	it	ne
 800ebaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ebae:	f1b8 0f16 	cmp.w	r8, #22
 800ebb2:	d82b      	bhi.n	800ec0c <_dtoa_r+0x1a4>
 800ebb4:	495e      	ldr	r1, [pc, #376]	@ (800ed30 <_dtoa_r+0x2c8>)
 800ebb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ebba:	ed91 7b00 	vldr	d7, [r1]
 800ebbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ebc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc6:	d501      	bpl.n	800ebcc <_dtoa_r+0x164>
 800ebc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebcc:	2100      	movs	r1, #0
 800ebce:	e01e      	b.n	800ec0e <_dtoa_r+0x1a6>
 800ebd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ebd8:	2920      	cmp	r1, #32
 800ebda:	bfc1      	itttt	gt
 800ebdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ebe0:	408e      	lslgt	r6, r1
 800ebe2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ebe6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ebea:	bfd6      	itet	le
 800ebec:	f1c1 0120 	rsble	r1, r1, #32
 800ebf0:	4331      	orrgt	r1, r6
 800ebf2:	fa04 f101 	lslle.w	r1, r4, r1
 800ebf6:	ee07 1a90 	vmov	s15, r1
 800ebfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	ee17 1a90 	vmov	r1, s15
 800ec04:	2501      	movs	r5, #1
 800ec06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ec0a:	e7a8      	b.n	800eb5e <_dtoa_r+0xf6>
 800ec0c:	2101      	movs	r1, #1
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	1e53      	subs	r3, r2, #1
 800ec12:	9306      	str	r3, [sp, #24]
 800ec14:	bf45      	ittet	mi
 800ec16:	f1c2 0301 	rsbmi	r3, r2, #1
 800ec1a:	9305      	strmi	r3, [sp, #20]
 800ec1c:	2300      	movpl	r3, #0
 800ec1e:	2300      	movmi	r3, #0
 800ec20:	bf4c      	ite	mi
 800ec22:	9306      	strmi	r3, [sp, #24]
 800ec24:	9305      	strpl	r3, [sp, #20]
 800ec26:	f1b8 0f00 	cmp.w	r8, #0
 800ec2a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ec2c:	db18      	blt.n	800ec60 <_dtoa_r+0x1f8>
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ec34:	4443      	add	r3, r8
 800ec36:	9306      	str	r3, [sp, #24]
 800ec38:	2300      	movs	r3, #0
 800ec3a:	9a07      	ldr	r2, [sp, #28]
 800ec3c:	2a09      	cmp	r2, #9
 800ec3e:	d849      	bhi.n	800ecd4 <_dtoa_r+0x26c>
 800ec40:	2a05      	cmp	r2, #5
 800ec42:	bfc4      	itt	gt
 800ec44:	3a04      	subgt	r2, #4
 800ec46:	9207      	strgt	r2, [sp, #28]
 800ec48:	9a07      	ldr	r2, [sp, #28]
 800ec4a:	f1a2 0202 	sub.w	r2, r2, #2
 800ec4e:	bfcc      	ite	gt
 800ec50:	2400      	movgt	r4, #0
 800ec52:	2401      	movle	r4, #1
 800ec54:	2a03      	cmp	r2, #3
 800ec56:	d848      	bhi.n	800ecea <_dtoa_r+0x282>
 800ec58:	e8df f002 	tbb	[pc, r2]
 800ec5c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ec60:	9b05      	ldr	r3, [sp, #20]
 800ec62:	2200      	movs	r2, #0
 800ec64:	eba3 0308 	sub.w	r3, r3, r8
 800ec68:	9305      	str	r3, [sp, #20]
 800ec6a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ec6c:	f1c8 0300 	rsb	r3, r8, #0
 800ec70:	e7e3      	b.n	800ec3a <_dtoa_r+0x1d2>
 800ec72:	2200      	movs	r2, #0
 800ec74:	9208      	str	r2, [sp, #32]
 800ec76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	dc39      	bgt.n	800ecf0 <_dtoa_r+0x288>
 800ec7c:	f04f 0b01 	mov.w	fp, #1
 800ec80:	46da      	mov	sl, fp
 800ec82:	465a      	mov	r2, fp
 800ec84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ec88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	2004      	movs	r0, #4
 800ec90:	f100 0614 	add.w	r6, r0, #20
 800ec94:	4296      	cmp	r6, r2
 800ec96:	d930      	bls.n	800ecfa <_dtoa_r+0x292>
 800ec98:	6079      	str	r1, [r7, #4]
 800ec9a:	4648      	mov	r0, r9
 800ec9c:	9304      	str	r3, [sp, #16]
 800ec9e:	f000 fd39 	bl	800f714 <_Balloc>
 800eca2:	9b04      	ldr	r3, [sp, #16]
 800eca4:	4607      	mov	r7, r0
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d146      	bne.n	800ed38 <_dtoa_r+0x2d0>
 800ecaa:	4b22      	ldr	r3, [pc, #136]	@ (800ed34 <_dtoa_r+0x2cc>)
 800ecac:	4602      	mov	r2, r0
 800ecae:	f240 11af 	movw	r1, #431	@ 0x1af
 800ecb2:	e6f2      	b.n	800ea9a <_dtoa_r+0x32>
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	e7dd      	b.n	800ec74 <_dtoa_r+0x20c>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	9208      	str	r2, [sp, #32]
 800ecbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecbe:	eb08 0b02 	add.w	fp, r8, r2
 800ecc2:	f10b 0a01 	add.w	sl, fp, #1
 800ecc6:	4652      	mov	r2, sl
 800ecc8:	2a01      	cmp	r2, #1
 800ecca:	bfb8      	it	lt
 800eccc:	2201      	movlt	r2, #1
 800ecce:	e7db      	b.n	800ec88 <_dtoa_r+0x220>
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	e7f2      	b.n	800ecba <_dtoa_r+0x252>
 800ecd4:	2401      	movs	r4, #1
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ecdc:	f04f 3bff 	mov.w	fp, #4294967295
 800ece0:	2100      	movs	r1, #0
 800ece2:	46da      	mov	sl, fp
 800ece4:	2212      	movs	r2, #18
 800ece6:	9109      	str	r1, [sp, #36]	@ 0x24
 800ece8:	e7ce      	b.n	800ec88 <_dtoa_r+0x220>
 800ecea:	2201      	movs	r2, #1
 800ecec:	9208      	str	r2, [sp, #32]
 800ecee:	e7f5      	b.n	800ecdc <_dtoa_r+0x274>
 800ecf0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ecf4:	46da      	mov	sl, fp
 800ecf6:	465a      	mov	r2, fp
 800ecf8:	e7c6      	b.n	800ec88 <_dtoa_r+0x220>
 800ecfa:	3101      	adds	r1, #1
 800ecfc:	0040      	lsls	r0, r0, #1
 800ecfe:	e7c7      	b.n	800ec90 <_dtoa_r+0x228>
 800ed00:	636f4361 	.word	0x636f4361
 800ed04:	3fd287a7 	.word	0x3fd287a7
 800ed08:	8b60c8b3 	.word	0x8b60c8b3
 800ed0c:	3fc68a28 	.word	0x3fc68a28
 800ed10:	509f79fb 	.word	0x509f79fb
 800ed14:	3fd34413 	.word	0x3fd34413
 800ed18:	080105ba 	.word	0x080105ba
 800ed1c:	080105d1 	.word	0x080105d1
 800ed20:	7ff00000 	.word	0x7ff00000
 800ed24:	080105b6 	.word	0x080105b6
 800ed28:	0801058a 	.word	0x0801058a
 800ed2c:	08010589 	.word	0x08010589
 800ed30:	080106c8 	.word	0x080106c8
 800ed34:	08010629 	.word	0x08010629
 800ed38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ed3c:	f1ba 0f0e 	cmp.w	sl, #14
 800ed40:	6010      	str	r0, [r2, #0]
 800ed42:	d86f      	bhi.n	800ee24 <_dtoa_r+0x3bc>
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d06d      	beq.n	800ee24 <_dtoa_r+0x3bc>
 800ed48:	f1b8 0f00 	cmp.w	r8, #0
 800ed4c:	f340 80c2 	ble.w	800eed4 <_dtoa_r+0x46c>
 800ed50:	4aca      	ldr	r2, [pc, #808]	@ (800f07c <_dtoa_r+0x614>)
 800ed52:	f008 010f 	and.w	r1, r8, #15
 800ed56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ed5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ed5e:	ed92 7b00 	vldr	d7, [r2]
 800ed62:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ed66:	f000 80a9 	beq.w	800eebc <_dtoa_r+0x454>
 800ed6a:	4ac5      	ldr	r2, [pc, #788]	@ (800f080 <_dtoa_r+0x618>)
 800ed6c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ed70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ed74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ed78:	f001 010f 	and.w	r1, r1, #15
 800ed7c:	2203      	movs	r2, #3
 800ed7e:	48c0      	ldr	r0, [pc, #768]	@ (800f080 <_dtoa_r+0x618>)
 800ed80:	2900      	cmp	r1, #0
 800ed82:	f040 809d 	bne.w	800eec0 <_dtoa_r+0x458>
 800ed86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ed8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ed8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ed94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	f000 80c1 	beq.w	800ef20 <_dtoa_r+0x4b8>
 800ed9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800eda2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	f140 80b9 	bpl.w	800ef20 <_dtoa_r+0x4b8>
 800edae:	f1ba 0f00 	cmp.w	sl, #0
 800edb2:	f000 80b5 	beq.w	800ef20 <_dtoa_r+0x4b8>
 800edb6:	f1bb 0f00 	cmp.w	fp, #0
 800edba:	dd31      	ble.n	800ee20 <_dtoa_r+0x3b8>
 800edbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800edc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800edc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800edc8:	f108 31ff 	add.w	r1, r8, #4294967295
 800edcc:	9104      	str	r1, [sp, #16]
 800edce:	3201      	adds	r2, #1
 800edd0:	465c      	mov	r4, fp
 800edd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800edd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800edda:	ee07 2a90 	vmov	s15, r2
 800edde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ede2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ede6:	ee15 2a90 	vmov	r2, s11
 800edea:	ec51 0b15 	vmov	r0, r1, d5
 800edee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800edf2:	2c00      	cmp	r4, #0
 800edf4:	f040 8098 	bne.w	800ef28 <_dtoa_r+0x4c0>
 800edf8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800edfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ee00:	ec41 0b17 	vmov	d7, r0, r1
 800ee04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0c:	f300 8261 	bgt.w	800f2d2 <_dtoa_r+0x86a>
 800ee10:	eeb1 7b47 	vneg.f64	d7, d7
 800ee14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1c:	f100 80f5 	bmi.w	800f00a <_dtoa_r+0x5a2>
 800ee20:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	f2c0 812c 	blt.w	800f084 <_dtoa_r+0x61c>
 800ee2c:	f1b8 0f0e 	cmp.w	r8, #14
 800ee30:	f300 8128 	bgt.w	800f084 <_dtoa_r+0x61c>
 800ee34:	4b91      	ldr	r3, [pc, #580]	@ (800f07c <_dtoa_r+0x614>)
 800ee36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ee3a:	ed93 6b00 	vldr	d6, [r3]
 800ee3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	da03      	bge.n	800ee4c <_dtoa_r+0x3e4>
 800ee44:	f1ba 0f00 	cmp.w	sl, #0
 800ee48:	f340 80d2 	ble.w	800eff0 <_dtoa_r+0x588>
 800ee4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ee50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee54:	463e      	mov	r6, r7
 800ee56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ee5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ee5e:	ee15 3a10 	vmov	r3, s10
 800ee62:	3330      	adds	r3, #48	@ 0x30
 800ee64:	f806 3b01 	strb.w	r3, [r6], #1
 800ee68:	1bf3      	subs	r3, r6, r7
 800ee6a:	459a      	cmp	sl, r3
 800ee6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ee70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ee74:	f040 80f8 	bne.w	800f068 <_dtoa_r+0x600>
 800ee78:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ee7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee84:	f300 80dd 	bgt.w	800f042 <_dtoa_r+0x5da>
 800ee88:	eeb4 7b46 	vcmp.f64	d7, d6
 800ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee90:	d104      	bne.n	800ee9c <_dtoa_r+0x434>
 800ee92:	ee15 3a10 	vmov	r3, s10
 800ee96:	07db      	lsls	r3, r3, #31
 800ee98:	f100 80d3 	bmi.w	800f042 <_dtoa_r+0x5da>
 800ee9c:	9901      	ldr	r1, [sp, #4]
 800ee9e:	4648      	mov	r0, r9
 800eea0:	f000 fc78 	bl	800f794 <_Bfree>
 800eea4:	2300      	movs	r3, #0
 800eea6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eea8:	7033      	strb	r3, [r6, #0]
 800eeaa:	f108 0301 	add.w	r3, r8, #1
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 8304 	beq.w	800f4c0 <_dtoa_r+0xa58>
 800eeb8:	601e      	str	r6, [r3, #0]
 800eeba:	e301      	b.n	800f4c0 <_dtoa_r+0xa58>
 800eebc:	2202      	movs	r2, #2
 800eebe:	e75e      	b.n	800ed7e <_dtoa_r+0x316>
 800eec0:	07cc      	lsls	r4, r1, #31
 800eec2:	d504      	bpl.n	800eece <_dtoa_r+0x466>
 800eec4:	ed90 6b00 	vldr	d6, [r0]
 800eec8:	3201      	adds	r2, #1
 800eeca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eece:	1049      	asrs	r1, r1, #1
 800eed0:	3008      	adds	r0, #8
 800eed2:	e755      	b.n	800ed80 <_dtoa_r+0x318>
 800eed4:	d022      	beq.n	800ef1c <_dtoa_r+0x4b4>
 800eed6:	f1c8 0100 	rsb	r1, r8, #0
 800eeda:	4a68      	ldr	r2, [pc, #416]	@ (800f07c <_dtoa_r+0x614>)
 800eedc:	f001 000f 	and.w	r0, r1, #15
 800eee0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eee4:	ed92 7b00 	vldr	d7, [r2]
 800eee8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800eeec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eef0:	4863      	ldr	r0, [pc, #396]	@ (800f080 <_dtoa_r+0x618>)
 800eef2:	1109      	asrs	r1, r1, #4
 800eef4:	2400      	movs	r4, #0
 800eef6:	2202      	movs	r2, #2
 800eef8:	b929      	cbnz	r1, 800ef06 <_dtoa_r+0x49e>
 800eefa:	2c00      	cmp	r4, #0
 800eefc:	f43f af49 	beq.w	800ed92 <_dtoa_r+0x32a>
 800ef00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef04:	e745      	b.n	800ed92 <_dtoa_r+0x32a>
 800ef06:	07ce      	lsls	r6, r1, #31
 800ef08:	d505      	bpl.n	800ef16 <_dtoa_r+0x4ae>
 800ef0a:	ed90 6b00 	vldr	d6, [r0]
 800ef0e:	3201      	adds	r2, #1
 800ef10:	2401      	movs	r4, #1
 800ef12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef16:	1049      	asrs	r1, r1, #1
 800ef18:	3008      	adds	r0, #8
 800ef1a:	e7ed      	b.n	800eef8 <_dtoa_r+0x490>
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	e738      	b.n	800ed92 <_dtoa_r+0x32a>
 800ef20:	f8cd 8010 	str.w	r8, [sp, #16]
 800ef24:	4654      	mov	r4, sl
 800ef26:	e754      	b.n	800edd2 <_dtoa_r+0x36a>
 800ef28:	4a54      	ldr	r2, [pc, #336]	@ (800f07c <_dtoa_r+0x614>)
 800ef2a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ef2e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ef32:	9a08      	ldr	r2, [sp, #32]
 800ef34:	ec41 0b17 	vmov	d7, r0, r1
 800ef38:	443c      	add	r4, r7
 800ef3a:	b34a      	cbz	r2, 800ef90 <_dtoa_r+0x528>
 800ef3c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ef40:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ef44:	463e      	mov	r6, r7
 800ef46:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ef4a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ef4e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ef52:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ef56:	ee14 2a90 	vmov	r2, s9
 800ef5a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ef5e:	3230      	adds	r2, #48	@ 0x30
 800ef60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ef64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6c:	f806 2b01 	strb.w	r2, [r6], #1
 800ef70:	d438      	bmi.n	800efe4 <_dtoa_r+0x57c>
 800ef72:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ef76:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7e:	d462      	bmi.n	800f046 <_dtoa_r+0x5de>
 800ef80:	42a6      	cmp	r6, r4
 800ef82:	f43f af4d 	beq.w	800ee20 <_dtoa_r+0x3b8>
 800ef86:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ef8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ef8e:	e7e0      	b.n	800ef52 <_dtoa_r+0x4ea>
 800ef90:	4621      	mov	r1, r4
 800ef92:	463e      	mov	r6, r7
 800ef94:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ef98:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ef9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800efa0:	ee14 2a90 	vmov	r2, s9
 800efa4:	3230      	adds	r2, #48	@ 0x30
 800efa6:	f806 2b01 	strb.w	r2, [r6], #1
 800efaa:	42a6      	cmp	r6, r4
 800efac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800efb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800efb4:	d119      	bne.n	800efea <_dtoa_r+0x582>
 800efb6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800efba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800efbe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc6:	dc3e      	bgt.n	800f046 <_dtoa_r+0x5de>
 800efc8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800efcc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800efd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd4:	f57f af24 	bpl.w	800ee20 <_dtoa_r+0x3b8>
 800efd8:	460e      	mov	r6, r1
 800efda:	3901      	subs	r1, #1
 800efdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800efe0:	2b30      	cmp	r3, #48	@ 0x30
 800efe2:	d0f9      	beq.n	800efd8 <_dtoa_r+0x570>
 800efe4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800efe8:	e758      	b.n	800ee9c <_dtoa_r+0x434>
 800efea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800efee:	e7d5      	b.n	800ef9c <_dtoa_r+0x534>
 800eff0:	d10b      	bne.n	800f00a <_dtoa_r+0x5a2>
 800eff2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800eff6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800effa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800effe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	f2c0 8161 	blt.w	800f2cc <_dtoa_r+0x864>
 800f00a:	2400      	movs	r4, #0
 800f00c:	4625      	mov	r5, r4
 800f00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f010:	43db      	mvns	r3, r3
 800f012:	9304      	str	r3, [sp, #16]
 800f014:	463e      	mov	r6, r7
 800f016:	f04f 0800 	mov.w	r8, #0
 800f01a:	4621      	mov	r1, r4
 800f01c:	4648      	mov	r0, r9
 800f01e:	f000 fbb9 	bl	800f794 <_Bfree>
 800f022:	2d00      	cmp	r5, #0
 800f024:	d0de      	beq.n	800efe4 <_dtoa_r+0x57c>
 800f026:	f1b8 0f00 	cmp.w	r8, #0
 800f02a:	d005      	beq.n	800f038 <_dtoa_r+0x5d0>
 800f02c:	45a8      	cmp	r8, r5
 800f02e:	d003      	beq.n	800f038 <_dtoa_r+0x5d0>
 800f030:	4641      	mov	r1, r8
 800f032:	4648      	mov	r0, r9
 800f034:	f000 fbae 	bl	800f794 <_Bfree>
 800f038:	4629      	mov	r1, r5
 800f03a:	4648      	mov	r0, r9
 800f03c:	f000 fbaa 	bl	800f794 <_Bfree>
 800f040:	e7d0      	b.n	800efe4 <_dtoa_r+0x57c>
 800f042:	f8cd 8010 	str.w	r8, [sp, #16]
 800f046:	4633      	mov	r3, r6
 800f048:	461e      	mov	r6, r3
 800f04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f04e:	2a39      	cmp	r2, #57	@ 0x39
 800f050:	d106      	bne.n	800f060 <_dtoa_r+0x5f8>
 800f052:	429f      	cmp	r7, r3
 800f054:	d1f8      	bne.n	800f048 <_dtoa_r+0x5e0>
 800f056:	9a04      	ldr	r2, [sp, #16]
 800f058:	3201      	adds	r2, #1
 800f05a:	9204      	str	r2, [sp, #16]
 800f05c:	2230      	movs	r2, #48	@ 0x30
 800f05e:	703a      	strb	r2, [r7, #0]
 800f060:	781a      	ldrb	r2, [r3, #0]
 800f062:	3201      	adds	r2, #1
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	e7bd      	b.n	800efe4 <_dtoa_r+0x57c>
 800f068:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f06c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f074:	f47f aeef 	bne.w	800ee56 <_dtoa_r+0x3ee>
 800f078:	e710      	b.n	800ee9c <_dtoa_r+0x434>
 800f07a:	bf00      	nop
 800f07c:	080106c8 	.word	0x080106c8
 800f080:	080106a0 	.word	0x080106a0
 800f084:	9908      	ldr	r1, [sp, #32]
 800f086:	2900      	cmp	r1, #0
 800f088:	f000 80e3 	beq.w	800f252 <_dtoa_r+0x7ea>
 800f08c:	9907      	ldr	r1, [sp, #28]
 800f08e:	2901      	cmp	r1, #1
 800f090:	f300 80c8 	bgt.w	800f224 <_dtoa_r+0x7bc>
 800f094:	2d00      	cmp	r5, #0
 800f096:	f000 80c1 	beq.w	800f21c <_dtoa_r+0x7b4>
 800f09a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f09e:	9e05      	ldr	r6, [sp, #20]
 800f0a0:	461c      	mov	r4, r3
 800f0a2:	9304      	str	r3, [sp, #16]
 800f0a4:	9b05      	ldr	r3, [sp, #20]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	9305      	str	r3, [sp, #20]
 800f0aa:	9b06      	ldr	r3, [sp, #24]
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	4413      	add	r3, r2
 800f0b0:	4648      	mov	r0, r9
 800f0b2:	9306      	str	r3, [sp, #24]
 800f0b4:	f000 fc22 	bl	800f8fc <__i2b>
 800f0b8:	9b04      	ldr	r3, [sp, #16]
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	b166      	cbz	r6, 800f0d8 <_dtoa_r+0x670>
 800f0be:	9a06      	ldr	r2, [sp, #24]
 800f0c0:	2a00      	cmp	r2, #0
 800f0c2:	dd09      	ble.n	800f0d8 <_dtoa_r+0x670>
 800f0c4:	42b2      	cmp	r2, r6
 800f0c6:	9905      	ldr	r1, [sp, #20]
 800f0c8:	bfa8      	it	ge
 800f0ca:	4632      	movge	r2, r6
 800f0cc:	1a89      	subs	r1, r1, r2
 800f0ce:	9105      	str	r1, [sp, #20]
 800f0d0:	9906      	ldr	r1, [sp, #24]
 800f0d2:	1ab6      	subs	r6, r6, r2
 800f0d4:	1a8a      	subs	r2, r1, r2
 800f0d6:	9206      	str	r2, [sp, #24]
 800f0d8:	b1fb      	cbz	r3, 800f11a <_dtoa_r+0x6b2>
 800f0da:	9a08      	ldr	r2, [sp, #32]
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	f000 80bc 	beq.w	800f25a <_dtoa_r+0x7f2>
 800f0e2:	b19c      	cbz	r4, 800f10c <_dtoa_r+0x6a4>
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	4622      	mov	r2, r4
 800f0e8:	4648      	mov	r0, r9
 800f0ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0ec:	f000 fcc6 	bl	800fa7c <__pow5mult>
 800f0f0:	9a01      	ldr	r2, [sp, #4]
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	4648      	mov	r0, r9
 800f0f8:	f000 fc16 	bl	800f928 <__multiply>
 800f0fc:	9901      	ldr	r1, [sp, #4]
 800f0fe:	9004      	str	r0, [sp, #16]
 800f100:	4648      	mov	r0, r9
 800f102:	f000 fb47 	bl	800f794 <_Bfree>
 800f106:	9a04      	ldr	r2, [sp, #16]
 800f108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f10a:	9201      	str	r2, [sp, #4]
 800f10c:	1b1a      	subs	r2, r3, r4
 800f10e:	d004      	beq.n	800f11a <_dtoa_r+0x6b2>
 800f110:	9901      	ldr	r1, [sp, #4]
 800f112:	4648      	mov	r0, r9
 800f114:	f000 fcb2 	bl	800fa7c <__pow5mult>
 800f118:	9001      	str	r0, [sp, #4]
 800f11a:	2101      	movs	r1, #1
 800f11c:	4648      	mov	r0, r9
 800f11e:	f000 fbed 	bl	800f8fc <__i2b>
 800f122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f124:	4604      	mov	r4, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 81d0 	beq.w	800f4cc <_dtoa_r+0xa64>
 800f12c:	461a      	mov	r2, r3
 800f12e:	4601      	mov	r1, r0
 800f130:	4648      	mov	r0, r9
 800f132:	f000 fca3 	bl	800fa7c <__pow5mult>
 800f136:	9b07      	ldr	r3, [sp, #28]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	4604      	mov	r4, r0
 800f13c:	f300 8095 	bgt.w	800f26a <_dtoa_r+0x802>
 800f140:	9b02      	ldr	r3, [sp, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 808b 	bne.w	800f25e <_dtoa_r+0x7f6>
 800f148:	9b03      	ldr	r3, [sp, #12]
 800f14a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f14e:	2a00      	cmp	r2, #0
 800f150:	f040 8087 	bne.w	800f262 <_dtoa_r+0x7fa>
 800f154:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f158:	0d12      	lsrs	r2, r2, #20
 800f15a:	0512      	lsls	r2, r2, #20
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	f000 8082 	beq.w	800f266 <_dtoa_r+0x7fe>
 800f162:	9b05      	ldr	r3, [sp, #20]
 800f164:	3301      	adds	r3, #1
 800f166:	9305      	str	r3, [sp, #20]
 800f168:	9b06      	ldr	r3, [sp, #24]
 800f16a:	3301      	adds	r3, #1
 800f16c:	9306      	str	r3, [sp, #24]
 800f16e:	2301      	movs	r3, #1
 800f170:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 81af 	beq.w	800f4d8 <_dtoa_r+0xa70>
 800f17a:	6922      	ldr	r2, [r4, #16]
 800f17c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f180:	6910      	ldr	r0, [r2, #16]
 800f182:	f000 fb6f 	bl	800f864 <__hi0bits>
 800f186:	f1c0 0020 	rsb	r0, r0, #32
 800f18a:	9b06      	ldr	r3, [sp, #24]
 800f18c:	4418      	add	r0, r3
 800f18e:	f010 001f 	ands.w	r0, r0, #31
 800f192:	d076      	beq.n	800f282 <_dtoa_r+0x81a>
 800f194:	f1c0 0220 	rsb	r2, r0, #32
 800f198:	2a04      	cmp	r2, #4
 800f19a:	dd69      	ble.n	800f270 <_dtoa_r+0x808>
 800f19c:	9b05      	ldr	r3, [sp, #20]
 800f19e:	f1c0 001c 	rsb	r0, r0, #28
 800f1a2:	4403      	add	r3, r0
 800f1a4:	9305      	str	r3, [sp, #20]
 800f1a6:	9b06      	ldr	r3, [sp, #24]
 800f1a8:	4406      	add	r6, r0
 800f1aa:	4403      	add	r3, r0
 800f1ac:	9306      	str	r3, [sp, #24]
 800f1ae:	9b05      	ldr	r3, [sp, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	dd05      	ble.n	800f1c0 <_dtoa_r+0x758>
 800f1b4:	9901      	ldr	r1, [sp, #4]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	4648      	mov	r0, r9
 800f1ba:	f000 fcb9 	bl	800fb30 <__lshift>
 800f1be:	9001      	str	r0, [sp, #4]
 800f1c0:	9b06      	ldr	r3, [sp, #24]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dd05      	ble.n	800f1d2 <_dtoa_r+0x76a>
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	4648      	mov	r0, r9
 800f1cc:	f000 fcb0 	bl	800fb30 <__lshift>
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d056      	beq.n	800f286 <_dtoa_r+0x81e>
 800f1d8:	9801      	ldr	r0, [sp, #4]
 800f1da:	4621      	mov	r1, r4
 800f1dc:	f000 fd14 	bl	800fc08 <__mcmp>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	da50      	bge.n	800f286 <_dtoa_r+0x81e>
 800f1e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	9901      	ldr	r1, [sp, #4]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	220a      	movs	r2, #10
 800f1f0:	4648      	mov	r0, r9
 800f1f2:	f000 faf1 	bl	800f7d8 <__multadd>
 800f1f6:	9b08      	ldr	r3, [sp, #32]
 800f1f8:	9001      	str	r0, [sp, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 816e 	beq.w	800f4dc <_dtoa_r+0xa74>
 800f200:	4629      	mov	r1, r5
 800f202:	2300      	movs	r3, #0
 800f204:	220a      	movs	r2, #10
 800f206:	4648      	mov	r0, r9
 800f208:	f000 fae6 	bl	800f7d8 <__multadd>
 800f20c:	f1bb 0f00 	cmp.w	fp, #0
 800f210:	4605      	mov	r5, r0
 800f212:	dc64      	bgt.n	800f2de <_dtoa_r+0x876>
 800f214:	9b07      	ldr	r3, [sp, #28]
 800f216:	2b02      	cmp	r3, #2
 800f218:	dc3e      	bgt.n	800f298 <_dtoa_r+0x830>
 800f21a:	e060      	b.n	800f2de <_dtoa_r+0x876>
 800f21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f21e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f222:	e73c      	b.n	800f09e <_dtoa_r+0x636>
 800f224:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f228:	42a3      	cmp	r3, r4
 800f22a:	bfbf      	itttt	lt
 800f22c:	1ae2      	sublt	r2, r4, r3
 800f22e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f230:	189b      	addlt	r3, r3, r2
 800f232:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f234:	bfae      	itee	ge
 800f236:	1b1c      	subge	r4, r3, r4
 800f238:	4623      	movlt	r3, r4
 800f23a:	2400      	movlt	r4, #0
 800f23c:	f1ba 0f00 	cmp.w	sl, #0
 800f240:	bfb5      	itete	lt
 800f242:	9a05      	ldrlt	r2, [sp, #20]
 800f244:	9e05      	ldrge	r6, [sp, #20]
 800f246:	eba2 060a 	sublt.w	r6, r2, sl
 800f24a:	4652      	movge	r2, sl
 800f24c:	bfb8      	it	lt
 800f24e:	2200      	movlt	r2, #0
 800f250:	e727      	b.n	800f0a2 <_dtoa_r+0x63a>
 800f252:	9e05      	ldr	r6, [sp, #20]
 800f254:	9d08      	ldr	r5, [sp, #32]
 800f256:	461c      	mov	r4, r3
 800f258:	e730      	b.n	800f0bc <_dtoa_r+0x654>
 800f25a:	461a      	mov	r2, r3
 800f25c:	e758      	b.n	800f110 <_dtoa_r+0x6a8>
 800f25e:	2300      	movs	r3, #0
 800f260:	e786      	b.n	800f170 <_dtoa_r+0x708>
 800f262:	9b02      	ldr	r3, [sp, #8]
 800f264:	e784      	b.n	800f170 <_dtoa_r+0x708>
 800f266:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f268:	e783      	b.n	800f172 <_dtoa_r+0x70a>
 800f26a:	2300      	movs	r3, #0
 800f26c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f26e:	e784      	b.n	800f17a <_dtoa_r+0x712>
 800f270:	d09d      	beq.n	800f1ae <_dtoa_r+0x746>
 800f272:	9b05      	ldr	r3, [sp, #20]
 800f274:	321c      	adds	r2, #28
 800f276:	4413      	add	r3, r2
 800f278:	9305      	str	r3, [sp, #20]
 800f27a:	9b06      	ldr	r3, [sp, #24]
 800f27c:	4416      	add	r6, r2
 800f27e:	4413      	add	r3, r2
 800f280:	e794      	b.n	800f1ac <_dtoa_r+0x744>
 800f282:	4602      	mov	r2, r0
 800f284:	e7f5      	b.n	800f272 <_dtoa_r+0x80a>
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f28e:	46d3      	mov	fp, sl
 800f290:	dc21      	bgt.n	800f2d6 <_dtoa_r+0x86e>
 800f292:	9b07      	ldr	r3, [sp, #28]
 800f294:	2b02      	cmp	r3, #2
 800f296:	dd1e      	ble.n	800f2d6 <_dtoa_r+0x86e>
 800f298:	f1bb 0f00 	cmp.w	fp, #0
 800f29c:	f47f aeb7 	bne.w	800f00e <_dtoa_r+0x5a6>
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	2205      	movs	r2, #5
 800f2a6:	4648      	mov	r0, r9
 800f2a8:	f000 fa96 	bl	800f7d8 <__multadd>
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	9801      	ldr	r0, [sp, #4]
 800f2b2:	f000 fca9 	bl	800fc08 <__mcmp>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f77f aea9 	ble.w	800f00e <_dtoa_r+0x5a6>
 800f2bc:	463e      	mov	r6, r7
 800f2be:	2331      	movs	r3, #49	@ 0x31
 800f2c0:	f806 3b01 	strb.w	r3, [r6], #1
 800f2c4:	9b04      	ldr	r3, [sp, #16]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	9304      	str	r3, [sp, #16]
 800f2ca:	e6a4      	b.n	800f016 <_dtoa_r+0x5ae>
 800f2cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800f2d0:	4654      	mov	r4, sl
 800f2d2:	4625      	mov	r5, r4
 800f2d4:	e7f2      	b.n	800f2bc <_dtoa_r+0x854>
 800f2d6:	9b08      	ldr	r3, [sp, #32]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f000 8103 	beq.w	800f4e4 <_dtoa_r+0xa7c>
 800f2de:	2e00      	cmp	r6, #0
 800f2e0:	dd05      	ble.n	800f2ee <_dtoa_r+0x886>
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4632      	mov	r2, r6
 800f2e6:	4648      	mov	r0, r9
 800f2e8:	f000 fc22 	bl	800fb30 <__lshift>
 800f2ec:	4605      	mov	r5, r0
 800f2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d058      	beq.n	800f3a6 <_dtoa_r+0x93e>
 800f2f4:	6869      	ldr	r1, [r5, #4]
 800f2f6:	4648      	mov	r0, r9
 800f2f8:	f000 fa0c 	bl	800f714 <_Balloc>
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	b928      	cbnz	r0, 800f30c <_dtoa_r+0x8a4>
 800f300:	4b82      	ldr	r3, [pc, #520]	@ (800f50c <_dtoa_r+0xaa4>)
 800f302:	4602      	mov	r2, r0
 800f304:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f308:	f7ff bbc7 	b.w	800ea9a <_dtoa_r+0x32>
 800f30c:	692a      	ldr	r2, [r5, #16]
 800f30e:	3202      	adds	r2, #2
 800f310:	0092      	lsls	r2, r2, #2
 800f312:	f105 010c 	add.w	r1, r5, #12
 800f316:	300c      	adds	r0, #12
 800f318:	f000 febe 	bl	8010098 <memcpy>
 800f31c:	2201      	movs	r2, #1
 800f31e:	4631      	mov	r1, r6
 800f320:	4648      	mov	r0, r9
 800f322:	f000 fc05 	bl	800fb30 <__lshift>
 800f326:	1c7b      	adds	r3, r7, #1
 800f328:	9305      	str	r3, [sp, #20]
 800f32a:	eb07 030b 	add.w	r3, r7, fp
 800f32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f330:	9b02      	ldr	r3, [sp, #8]
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	46a8      	mov	r8, r5
 800f338:	9308      	str	r3, [sp, #32]
 800f33a:	4605      	mov	r5, r0
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	9801      	ldr	r0, [sp, #4]
 800f340:	4621      	mov	r1, r4
 800f342:	f103 3bff 	add.w	fp, r3, #4294967295
 800f346:	f7ff fb06 	bl	800e956 <quorem>
 800f34a:	4641      	mov	r1, r8
 800f34c:	9002      	str	r0, [sp, #8]
 800f34e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f352:	9801      	ldr	r0, [sp, #4]
 800f354:	f000 fc58 	bl	800fc08 <__mcmp>
 800f358:	462a      	mov	r2, r5
 800f35a:	9006      	str	r0, [sp, #24]
 800f35c:	4621      	mov	r1, r4
 800f35e:	4648      	mov	r0, r9
 800f360:	f000 fc6e 	bl	800fc40 <__mdiff>
 800f364:	68c2      	ldr	r2, [r0, #12]
 800f366:	4606      	mov	r6, r0
 800f368:	b9fa      	cbnz	r2, 800f3aa <_dtoa_r+0x942>
 800f36a:	4601      	mov	r1, r0
 800f36c:	9801      	ldr	r0, [sp, #4]
 800f36e:	f000 fc4b 	bl	800fc08 <__mcmp>
 800f372:	4602      	mov	r2, r0
 800f374:	4631      	mov	r1, r6
 800f376:	4648      	mov	r0, r9
 800f378:	920a      	str	r2, [sp, #40]	@ 0x28
 800f37a:	f000 fa0b 	bl	800f794 <_Bfree>
 800f37e:	9b07      	ldr	r3, [sp, #28]
 800f380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f382:	9e05      	ldr	r6, [sp, #20]
 800f384:	ea43 0102 	orr.w	r1, r3, r2
 800f388:	9b08      	ldr	r3, [sp, #32]
 800f38a:	4319      	orrs	r1, r3
 800f38c:	d10f      	bne.n	800f3ae <_dtoa_r+0x946>
 800f38e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f392:	d028      	beq.n	800f3e6 <_dtoa_r+0x97e>
 800f394:	9b06      	ldr	r3, [sp, #24]
 800f396:	2b00      	cmp	r3, #0
 800f398:	dd02      	ble.n	800f3a0 <_dtoa_r+0x938>
 800f39a:	9b02      	ldr	r3, [sp, #8]
 800f39c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f3a0:	f88b a000 	strb.w	sl, [fp]
 800f3a4:	e639      	b.n	800f01a <_dtoa_r+0x5b2>
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	e7bd      	b.n	800f326 <_dtoa_r+0x8be>
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	e7e2      	b.n	800f374 <_dtoa_r+0x90c>
 800f3ae:	9b06      	ldr	r3, [sp, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	db04      	blt.n	800f3be <_dtoa_r+0x956>
 800f3b4:	9907      	ldr	r1, [sp, #28]
 800f3b6:	430b      	orrs	r3, r1
 800f3b8:	9908      	ldr	r1, [sp, #32]
 800f3ba:	430b      	orrs	r3, r1
 800f3bc:	d120      	bne.n	800f400 <_dtoa_r+0x998>
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	ddee      	ble.n	800f3a0 <_dtoa_r+0x938>
 800f3c2:	9901      	ldr	r1, [sp, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	4648      	mov	r0, r9
 800f3c8:	f000 fbb2 	bl	800fb30 <__lshift>
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	9001      	str	r0, [sp, #4]
 800f3d0:	f000 fc1a 	bl	800fc08 <__mcmp>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	dc03      	bgt.n	800f3e0 <_dtoa_r+0x978>
 800f3d8:	d1e2      	bne.n	800f3a0 <_dtoa_r+0x938>
 800f3da:	f01a 0f01 	tst.w	sl, #1
 800f3de:	d0df      	beq.n	800f3a0 <_dtoa_r+0x938>
 800f3e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f3e4:	d1d9      	bne.n	800f39a <_dtoa_r+0x932>
 800f3e6:	2339      	movs	r3, #57	@ 0x39
 800f3e8:	f88b 3000 	strb.w	r3, [fp]
 800f3ec:	4633      	mov	r3, r6
 800f3ee:	461e      	mov	r6, r3
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f3f6:	2a39      	cmp	r2, #57	@ 0x39
 800f3f8:	d053      	beq.n	800f4a2 <_dtoa_r+0xa3a>
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	e60c      	b.n	800f01a <_dtoa_r+0x5b2>
 800f400:	2a00      	cmp	r2, #0
 800f402:	dd07      	ble.n	800f414 <_dtoa_r+0x9ac>
 800f404:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f408:	d0ed      	beq.n	800f3e6 <_dtoa_r+0x97e>
 800f40a:	f10a 0301 	add.w	r3, sl, #1
 800f40e:	f88b 3000 	strb.w	r3, [fp]
 800f412:	e602      	b.n	800f01a <_dtoa_r+0x5b2>
 800f414:	9b05      	ldr	r3, [sp, #20]
 800f416:	9a05      	ldr	r2, [sp, #20]
 800f418:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41e:	4293      	cmp	r3, r2
 800f420:	d029      	beq.n	800f476 <_dtoa_r+0xa0e>
 800f422:	9901      	ldr	r1, [sp, #4]
 800f424:	2300      	movs	r3, #0
 800f426:	220a      	movs	r2, #10
 800f428:	4648      	mov	r0, r9
 800f42a:	f000 f9d5 	bl	800f7d8 <__multadd>
 800f42e:	45a8      	cmp	r8, r5
 800f430:	9001      	str	r0, [sp, #4]
 800f432:	f04f 0300 	mov.w	r3, #0
 800f436:	f04f 020a 	mov.w	r2, #10
 800f43a:	4641      	mov	r1, r8
 800f43c:	4648      	mov	r0, r9
 800f43e:	d107      	bne.n	800f450 <_dtoa_r+0x9e8>
 800f440:	f000 f9ca 	bl	800f7d8 <__multadd>
 800f444:	4680      	mov	r8, r0
 800f446:	4605      	mov	r5, r0
 800f448:	9b05      	ldr	r3, [sp, #20]
 800f44a:	3301      	adds	r3, #1
 800f44c:	9305      	str	r3, [sp, #20]
 800f44e:	e775      	b.n	800f33c <_dtoa_r+0x8d4>
 800f450:	f000 f9c2 	bl	800f7d8 <__multadd>
 800f454:	4629      	mov	r1, r5
 800f456:	4680      	mov	r8, r0
 800f458:	2300      	movs	r3, #0
 800f45a:	220a      	movs	r2, #10
 800f45c:	4648      	mov	r0, r9
 800f45e:	f000 f9bb 	bl	800f7d8 <__multadd>
 800f462:	4605      	mov	r5, r0
 800f464:	e7f0      	b.n	800f448 <_dtoa_r+0x9e0>
 800f466:	f1bb 0f00 	cmp.w	fp, #0
 800f46a:	bfcc      	ite	gt
 800f46c:	465e      	movgt	r6, fp
 800f46e:	2601      	movle	r6, #1
 800f470:	443e      	add	r6, r7
 800f472:	f04f 0800 	mov.w	r8, #0
 800f476:	9901      	ldr	r1, [sp, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	4648      	mov	r0, r9
 800f47c:	f000 fb58 	bl	800fb30 <__lshift>
 800f480:	4621      	mov	r1, r4
 800f482:	9001      	str	r0, [sp, #4]
 800f484:	f000 fbc0 	bl	800fc08 <__mcmp>
 800f488:	2800      	cmp	r0, #0
 800f48a:	dcaf      	bgt.n	800f3ec <_dtoa_r+0x984>
 800f48c:	d102      	bne.n	800f494 <_dtoa_r+0xa2c>
 800f48e:	f01a 0f01 	tst.w	sl, #1
 800f492:	d1ab      	bne.n	800f3ec <_dtoa_r+0x984>
 800f494:	4633      	mov	r3, r6
 800f496:	461e      	mov	r6, r3
 800f498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f49c:	2a30      	cmp	r2, #48	@ 0x30
 800f49e:	d0fa      	beq.n	800f496 <_dtoa_r+0xa2e>
 800f4a0:	e5bb      	b.n	800f01a <_dtoa_r+0x5b2>
 800f4a2:	429f      	cmp	r7, r3
 800f4a4:	d1a3      	bne.n	800f3ee <_dtoa_r+0x986>
 800f4a6:	9b04      	ldr	r3, [sp, #16]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	9304      	str	r3, [sp, #16]
 800f4ac:	2331      	movs	r3, #49	@ 0x31
 800f4ae:	703b      	strb	r3, [r7, #0]
 800f4b0:	e5b3      	b.n	800f01a <_dtoa_r+0x5b2>
 800f4b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4b4:	4f16      	ldr	r7, [pc, #88]	@ (800f510 <_dtoa_r+0xaa8>)
 800f4b6:	b11b      	cbz	r3, 800f4c0 <_dtoa_r+0xa58>
 800f4b8:	f107 0308 	add.w	r3, r7, #8
 800f4bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f4be:	6013      	str	r3, [r2, #0]
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	b011      	add	sp, #68	@ 0x44
 800f4c4:	ecbd 8b02 	vpop	{d8}
 800f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	f77f ae36 	ble.w	800f140 <_dtoa_r+0x6d8>
 800f4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4d8:	2001      	movs	r0, #1
 800f4da:	e656      	b.n	800f18a <_dtoa_r+0x722>
 800f4dc:	f1bb 0f00 	cmp.w	fp, #0
 800f4e0:	f77f aed7 	ble.w	800f292 <_dtoa_r+0x82a>
 800f4e4:	463e      	mov	r6, r7
 800f4e6:	9801      	ldr	r0, [sp, #4]
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	f7ff fa34 	bl	800e956 <quorem>
 800f4ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f4f2:	f806 ab01 	strb.w	sl, [r6], #1
 800f4f6:	1bf2      	subs	r2, r6, r7
 800f4f8:	4593      	cmp	fp, r2
 800f4fa:	ddb4      	ble.n	800f466 <_dtoa_r+0x9fe>
 800f4fc:	9901      	ldr	r1, [sp, #4]
 800f4fe:	2300      	movs	r3, #0
 800f500:	220a      	movs	r2, #10
 800f502:	4648      	mov	r0, r9
 800f504:	f000 f968 	bl	800f7d8 <__multadd>
 800f508:	9001      	str	r0, [sp, #4]
 800f50a:	e7ec      	b.n	800f4e6 <_dtoa_r+0xa7e>
 800f50c:	08010629 	.word	0x08010629
 800f510:	080105ad 	.word	0x080105ad

0800f514 <_free_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	4605      	mov	r5, r0
 800f518:	2900      	cmp	r1, #0
 800f51a:	d041      	beq.n	800f5a0 <_free_r+0x8c>
 800f51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f520:	1f0c      	subs	r4, r1, #4
 800f522:	2b00      	cmp	r3, #0
 800f524:	bfb8      	it	lt
 800f526:	18e4      	addlt	r4, r4, r3
 800f528:	f000 f8e8 	bl	800f6fc <__malloc_lock>
 800f52c:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a4 <_free_r+0x90>)
 800f52e:	6813      	ldr	r3, [r2, #0]
 800f530:	b933      	cbnz	r3, 800f540 <_free_r+0x2c>
 800f532:	6063      	str	r3, [r4, #4]
 800f534:	6014      	str	r4, [r2, #0]
 800f536:	4628      	mov	r0, r5
 800f538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53c:	f000 b8e4 	b.w	800f708 <__malloc_unlock>
 800f540:	42a3      	cmp	r3, r4
 800f542:	d908      	bls.n	800f556 <_free_r+0x42>
 800f544:	6820      	ldr	r0, [r4, #0]
 800f546:	1821      	adds	r1, r4, r0
 800f548:	428b      	cmp	r3, r1
 800f54a:	bf01      	itttt	eq
 800f54c:	6819      	ldreq	r1, [r3, #0]
 800f54e:	685b      	ldreq	r3, [r3, #4]
 800f550:	1809      	addeq	r1, r1, r0
 800f552:	6021      	streq	r1, [r4, #0]
 800f554:	e7ed      	b.n	800f532 <_free_r+0x1e>
 800f556:	461a      	mov	r2, r3
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	b10b      	cbz	r3, 800f560 <_free_r+0x4c>
 800f55c:	42a3      	cmp	r3, r4
 800f55e:	d9fa      	bls.n	800f556 <_free_r+0x42>
 800f560:	6811      	ldr	r1, [r2, #0]
 800f562:	1850      	adds	r0, r2, r1
 800f564:	42a0      	cmp	r0, r4
 800f566:	d10b      	bne.n	800f580 <_free_r+0x6c>
 800f568:	6820      	ldr	r0, [r4, #0]
 800f56a:	4401      	add	r1, r0
 800f56c:	1850      	adds	r0, r2, r1
 800f56e:	4283      	cmp	r3, r0
 800f570:	6011      	str	r1, [r2, #0]
 800f572:	d1e0      	bne.n	800f536 <_free_r+0x22>
 800f574:	6818      	ldr	r0, [r3, #0]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	6053      	str	r3, [r2, #4]
 800f57a:	4408      	add	r0, r1
 800f57c:	6010      	str	r0, [r2, #0]
 800f57e:	e7da      	b.n	800f536 <_free_r+0x22>
 800f580:	d902      	bls.n	800f588 <_free_r+0x74>
 800f582:	230c      	movs	r3, #12
 800f584:	602b      	str	r3, [r5, #0]
 800f586:	e7d6      	b.n	800f536 <_free_r+0x22>
 800f588:	6820      	ldr	r0, [r4, #0]
 800f58a:	1821      	adds	r1, r4, r0
 800f58c:	428b      	cmp	r3, r1
 800f58e:	bf04      	itt	eq
 800f590:	6819      	ldreq	r1, [r3, #0]
 800f592:	685b      	ldreq	r3, [r3, #4]
 800f594:	6063      	str	r3, [r4, #4]
 800f596:	bf04      	itt	eq
 800f598:	1809      	addeq	r1, r1, r0
 800f59a:	6021      	streq	r1, [r4, #0]
 800f59c:	6054      	str	r4, [r2, #4]
 800f59e:	e7ca      	b.n	800f536 <_free_r+0x22>
 800f5a0:	bd38      	pop	{r3, r4, r5, pc}
 800f5a2:	bf00      	nop
 800f5a4:	24000640 	.word	0x24000640

0800f5a8 <malloc>:
 800f5a8:	4b02      	ldr	r3, [pc, #8]	@ (800f5b4 <malloc+0xc>)
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	6818      	ldr	r0, [r3, #0]
 800f5ae:	f000 b825 	b.w	800f5fc <_malloc_r>
 800f5b2:	bf00      	nop
 800f5b4:	2400002c 	.word	0x2400002c

0800f5b8 <sbrk_aligned>:
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	4e0f      	ldr	r6, [pc, #60]	@ (800f5f8 <sbrk_aligned+0x40>)
 800f5bc:	460c      	mov	r4, r1
 800f5be:	6831      	ldr	r1, [r6, #0]
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	b911      	cbnz	r1, 800f5ca <sbrk_aligned+0x12>
 800f5c4:	f000 fd58 	bl	8010078 <_sbrk_r>
 800f5c8:	6030      	str	r0, [r6, #0]
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f000 fd53 	bl	8010078 <_sbrk_r>
 800f5d2:	1c43      	adds	r3, r0, #1
 800f5d4:	d103      	bne.n	800f5de <sbrk_aligned+0x26>
 800f5d6:	f04f 34ff 	mov.w	r4, #4294967295
 800f5da:	4620      	mov	r0, r4
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
 800f5de:	1cc4      	adds	r4, r0, #3
 800f5e0:	f024 0403 	bic.w	r4, r4, #3
 800f5e4:	42a0      	cmp	r0, r4
 800f5e6:	d0f8      	beq.n	800f5da <sbrk_aligned+0x22>
 800f5e8:	1a21      	subs	r1, r4, r0
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f000 fd44 	bl	8010078 <_sbrk_r>
 800f5f0:	3001      	adds	r0, #1
 800f5f2:	d1f2      	bne.n	800f5da <sbrk_aligned+0x22>
 800f5f4:	e7ef      	b.n	800f5d6 <sbrk_aligned+0x1e>
 800f5f6:	bf00      	nop
 800f5f8:	2400063c 	.word	0x2400063c

0800f5fc <_malloc_r>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	1ccd      	adds	r5, r1, #3
 800f602:	f025 0503 	bic.w	r5, r5, #3
 800f606:	3508      	adds	r5, #8
 800f608:	2d0c      	cmp	r5, #12
 800f60a:	bf38      	it	cc
 800f60c:	250c      	movcc	r5, #12
 800f60e:	2d00      	cmp	r5, #0
 800f610:	4606      	mov	r6, r0
 800f612:	db01      	blt.n	800f618 <_malloc_r+0x1c>
 800f614:	42a9      	cmp	r1, r5
 800f616:	d904      	bls.n	800f622 <_malloc_r+0x26>
 800f618:	230c      	movs	r3, #12
 800f61a:	6033      	str	r3, [r6, #0]
 800f61c:	2000      	movs	r0, #0
 800f61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6f8 <_malloc_r+0xfc>
 800f626:	f000 f869 	bl	800f6fc <__malloc_lock>
 800f62a:	f8d8 3000 	ldr.w	r3, [r8]
 800f62e:	461c      	mov	r4, r3
 800f630:	bb44      	cbnz	r4, 800f684 <_malloc_r+0x88>
 800f632:	4629      	mov	r1, r5
 800f634:	4630      	mov	r0, r6
 800f636:	f7ff ffbf 	bl	800f5b8 <sbrk_aligned>
 800f63a:	1c43      	adds	r3, r0, #1
 800f63c:	4604      	mov	r4, r0
 800f63e:	d158      	bne.n	800f6f2 <_malloc_r+0xf6>
 800f640:	f8d8 4000 	ldr.w	r4, [r8]
 800f644:	4627      	mov	r7, r4
 800f646:	2f00      	cmp	r7, #0
 800f648:	d143      	bne.n	800f6d2 <_malloc_r+0xd6>
 800f64a:	2c00      	cmp	r4, #0
 800f64c:	d04b      	beq.n	800f6e6 <_malloc_r+0xea>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	4639      	mov	r1, r7
 800f652:	4630      	mov	r0, r6
 800f654:	eb04 0903 	add.w	r9, r4, r3
 800f658:	f000 fd0e 	bl	8010078 <_sbrk_r>
 800f65c:	4581      	cmp	r9, r0
 800f65e:	d142      	bne.n	800f6e6 <_malloc_r+0xea>
 800f660:	6821      	ldr	r1, [r4, #0]
 800f662:	1a6d      	subs	r5, r5, r1
 800f664:	4629      	mov	r1, r5
 800f666:	4630      	mov	r0, r6
 800f668:	f7ff ffa6 	bl	800f5b8 <sbrk_aligned>
 800f66c:	3001      	adds	r0, #1
 800f66e:	d03a      	beq.n	800f6e6 <_malloc_r+0xea>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	442b      	add	r3, r5
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	f8d8 3000 	ldr.w	r3, [r8]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	bb62      	cbnz	r2, 800f6d8 <_malloc_r+0xdc>
 800f67e:	f8c8 7000 	str.w	r7, [r8]
 800f682:	e00f      	b.n	800f6a4 <_malloc_r+0xa8>
 800f684:	6822      	ldr	r2, [r4, #0]
 800f686:	1b52      	subs	r2, r2, r5
 800f688:	d420      	bmi.n	800f6cc <_malloc_r+0xd0>
 800f68a:	2a0b      	cmp	r2, #11
 800f68c:	d917      	bls.n	800f6be <_malloc_r+0xc2>
 800f68e:	1961      	adds	r1, r4, r5
 800f690:	42a3      	cmp	r3, r4
 800f692:	6025      	str	r5, [r4, #0]
 800f694:	bf18      	it	ne
 800f696:	6059      	strne	r1, [r3, #4]
 800f698:	6863      	ldr	r3, [r4, #4]
 800f69a:	bf08      	it	eq
 800f69c:	f8c8 1000 	streq.w	r1, [r8]
 800f6a0:	5162      	str	r2, [r4, r5]
 800f6a2:	604b      	str	r3, [r1, #4]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f000 f82f 	bl	800f708 <__malloc_unlock>
 800f6aa:	f104 000b 	add.w	r0, r4, #11
 800f6ae:	1d23      	adds	r3, r4, #4
 800f6b0:	f020 0007 	bic.w	r0, r0, #7
 800f6b4:	1ac2      	subs	r2, r0, r3
 800f6b6:	bf1c      	itt	ne
 800f6b8:	1a1b      	subne	r3, r3, r0
 800f6ba:	50a3      	strne	r3, [r4, r2]
 800f6bc:	e7af      	b.n	800f61e <_malloc_r+0x22>
 800f6be:	6862      	ldr	r2, [r4, #4]
 800f6c0:	42a3      	cmp	r3, r4
 800f6c2:	bf0c      	ite	eq
 800f6c4:	f8c8 2000 	streq.w	r2, [r8]
 800f6c8:	605a      	strne	r2, [r3, #4]
 800f6ca:	e7eb      	b.n	800f6a4 <_malloc_r+0xa8>
 800f6cc:	4623      	mov	r3, r4
 800f6ce:	6864      	ldr	r4, [r4, #4]
 800f6d0:	e7ae      	b.n	800f630 <_malloc_r+0x34>
 800f6d2:	463c      	mov	r4, r7
 800f6d4:	687f      	ldr	r7, [r7, #4]
 800f6d6:	e7b6      	b.n	800f646 <_malloc_r+0x4a>
 800f6d8:	461a      	mov	r2, r3
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	d1fb      	bne.n	800f6d8 <_malloc_r+0xdc>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	6053      	str	r3, [r2, #4]
 800f6e4:	e7de      	b.n	800f6a4 <_malloc_r+0xa8>
 800f6e6:	230c      	movs	r3, #12
 800f6e8:	6033      	str	r3, [r6, #0]
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f000 f80c 	bl	800f708 <__malloc_unlock>
 800f6f0:	e794      	b.n	800f61c <_malloc_r+0x20>
 800f6f2:	6005      	str	r5, [r0, #0]
 800f6f4:	e7d6      	b.n	800f6a4 <_malloc_r+0xa8>
 800f6f6:	bf00      	nop
 800f6f8:	24000640 	.word	0x24000640

0800f6fc <__malloc_lock>:
 800f6fc:	4801      	ldr	r0, [pc, #4]	@ (800f704 <__malloc_lock+0x8>)
 800f6fe:	f7ff b928 	b.w	800e952 <__retarget_lock_acquire_recursive>
 800f702:	bf00      	nop
 800f704:	24000638 	.word	0x24000638

0800f708 <__malloc_unlock>:
 800f708:	4801      	ldr	r0, [pc, #4]	@ (800f710 <__malloc_unlock+0x8>)
 800f70a:	f7ff b923 	b.w	800e954 <__retarget_lock_release_recursive>
 800f70e:	bf00      	nop
 800f710:	24000638 	.word	0x24000638

0800f714 <_Balloc>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	69c6      	ldr	r6, [r0, #28]
 800f718:	4604      	mov	r4, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	b976      	cbnz	r6, 800f73c <_Balloc+0x28>
 800f71e:	2010      	movs	r0, #16
 800f720:	f7ff ff42 	bl	800f5a8 <malloc>
 800f724:	4602      	mov	r2, r0
 800f726:	61e0      	str	r0, [r4, #28]
 800f728:	b920      	cbnz	r0, 800f734 <_Balloc+0x20>
 800f72a:	4b18      	ldr	r3, [pc, #96]	@ (800f78c <_Balloc+0x78>)
 800f72c:	4818      	ldr	r0, [pc, #96]	@ (800f790 <_Balloc+0x7c>)
 800f72e:	216b      	movs	r1, #107	@ 0x6b
 800f730:	f000 fcc0 	bl	80100b4 <__assert_func>
 800f734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f738:	6006      	str	r6, [r0, #0]
 800f73a:	60c6      	str	r6, [r0, #12]
 800f73c:	69e6      	ldr	r6, [r4, #28]
 800f73e:	68f3      	ldr	r3, [r6, #12]
 800f740:	b183      	cbz	r3, 800f764 <_Balloc+0x50>
 800f742:	69e3      	ldr	r3, [r4, #28]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f74a:	b9b8      	cbnz	r0, 800f77c <_Balloc+0x68>
 800f74c:	2101      	movs	r1, #1
 800f74e:	fa01 f605 	lsl.w	r6, r1, r5
 800f752:	1d72      	adds	r2, r6, #5
 800f754:	0092      	lsls	r2, r2, #2
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fcca 	bl	80100f0 <_calloc_r>
 800f75c:	b160      	cbz	r0, 800f778 <_Balloc+0x64>
 800f75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f762:	e00e      	b.n	800f782 <_Balloc+0x6e>
 800f764:	2221      	movs	r2, #33	@ 0x21
 800f766:	2104      	movs	r1, #4
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fcc1 	bl	80100f0 <_calloc_r>
 800f76e:	69e3      	ldr	r3, [r4, #28]
 800f770:	60f0      	str	r0, [r6, #12]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1e4      	bne.n	800f742 <_Balloc+0x2e>
 800f778:	2000      	movs	r0, #0
 800f77a:	bd70      	pop	{r4, r5, r6, pc}
 800f77c:	6802      	ldr	r2, [r0, #0]
 800f77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f782:	2300      	movs	r3, #0
 800f784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f788:	e7f7      	b.n	800f77a <_Balloc+0x66>
 800f78a:	bf00      	nop
 800f78c:	080105ba 	.word	0x080105ba
 800f790:	0801063a 	.word	0x0801063a

0800f794 <_Bfree>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	69c6      	ldr	r6, [r0, #28]
 800f798:	4605      	mov	r5, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b976      	cbnz	r6, 800f7bc <_Bfree+0x28>
 800f79e:	2010      	movs	r0, #16
 800f7a0:	f7ff ff02 	bl	800f5a8 <malloc>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	61e8      	str	r0, [r5, #28]
 800f7a8:	b920      	cbnz	r0, 800f7b4 <_Bfree+0x20>
 800f7aa:	4b09      	ldr	r3, [pc, #36]	@ (800f7d0 <_Bfree+0x3c>)
 800f7ac:	4809      	ldr	r0, [pc, #36]	@ (800f7d4 <_Bfree+0x40>)
 800f7ae:	218f      	movs	r1, #143	@ 0x8f
 800f7b0:	f000 fc80 	bl	80100b4 <__assert_func>
 800f7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7b8:	6006      	str	r6, [r0, #0]
 800f7ba:	60c6      	str	r6, [r0, #12]
 800f7bc:	b13c      	cbz	r4, 800f7ce <_Bfree+0x3a>
 800f7be:	69eb      	ldr	r3, [r5, #28]
 800f7c0:	6862      	ldr	r2, [r4, #4]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7c8:	6021      	str	r1, [r4, #0]
 800f7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	080105ba 	.word	0x080105ba
 800f7d4:	0801063a 	.word	0x0801063a

0800f7d8 <__multadd>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	690d      	ldr	r5, [r1, #16]
 800f7de:	4607      	mov	r7, r0
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	461e      	mov	r6, r3
 800f7e4:	f101 0c14 	add.w	ip, r1, #20
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f8dc 3000 	ldr.w	r3, [ip]
 800f7ee:	b299      	uxth	r1, r3
 800f7f0:	fb02 6101 	mla	r1, r2, r1, r6
 800f7f4:	0c1e      	lsrs	r6, r3, #16
 800f7f6:	0c0b      	lsrs	r3, r1, #16
 800f7f8:	fb02 3306 	mla	r3, r2, r6, r3
 800f7fc:	b289      	uxth	r1, r1
 800f7fe:	3001      	adds	r0, #1
 800f800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f804:	4285      	cmp	r5, r0
 800f806:	f84c 1b04 	str.w	r1, [ip], #4
 800f80a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f80e:	dcec      	bgt.n	800f7ea <__multadd+0x12>
 800f810:	b30e      	cbz	r6, 800f856 <__multadd+0x7e>
 800f812:	68a3      	ldr	r3, [r4, #8]
 800f814:	42ab      	cmp	r3, r5
 800f816:	dc19      	bgt.n	800f84c <__multadd+0x74>
 800f818:	6861      	ldr	r1, [r4, #4]
 800f81a:	4638      	mov	r0, r7
 800f81c:	3101      	adds	r1, #1
 800f81e:	f7ff ff79 	bl	800f714 <_Balloc>
 800f822:	4680      	mov	r8, r0
 800f824:	b928      	cbnz	r0, 800f832 <__multadd+0x5a>
 800f826:	4602      	mov	r2, r0
 800f828:	4b0c      	ldr	r3, [pc, #48]	@ (800f85c <__multadd+0x84>)
 800f82a:	480d      	ldr	r0, [pc, #52]	@ (800f860 <__multadd+0x88>)
 800f82c:	21ba      	movs	r1, #186	@ 0xba
 800f82e:	f000 fc41 	bl	80100b4 <__assert_func>
 800f832:	6922      	ldr	r2, [r4, #16]
 800f834:	3202      	adds	r2, #2
 800f836:	f104 010c 	add.w	r1, r4, #12
 800f83a:	0092      	lsls	r2, r2, #2
 800f83c:	300c      	adds	r0, #12
 800f83e:	f000 fc2b 	bl	8010098 <memcpy>
 800f842:	4621      	mov	r1, r4
 800f844:	4638      	mov	r0, r7
 800f846:	f7ff ffa5 	bl	800f794 <_Bfree>
 800f84a:	4644      	mov	r4, r8
 800f84c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f850:	3501      	adds	r5, #1
 800f852:	615e      	str	r6, [r3, #20]
 800f854:	6125      	str	r5, [r4, #16]
 800f856:	4620      	mov	r0, r4
 800f858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f85c:	08010629 	.word	0x08010629
 800f860:	0801063a 	.word	0x0801063a

0800f864 <__hi0bits>:
 800f864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f868:	4603      	mov	r3, r0
 800f86a:	bf36      	itet	cc
 800f86c:	0403      	lslcc	r3, r0, #16
 800f86e:	2000      	movcs	r0, #0
 800f870:	2010      	movcc	r0, #16
 800f872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f876:	bf3c      	itt	cc
 800f878:	021b      	lslcc	r3, r3, #8
 800f87a:	3008      	addcc	r0, #8
 800f87c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f880:	bf3c      	itt	cc
 800f882:	011b      	lslcc	r3, r3, #4
 800f884:	3004      	addcc	r0, #4
 800f886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f88a:	bf3c      	itt	cc
 800f88c:	009b      	lslcc	r3, r3, #2
 800f88e:	3002      	addcc	r0, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	db05      	blt.n	800f8a0 <__hi0bits+0x3c>
 800f894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f898:	f100 0001 	add.w	r0, r0, #1
 800f89c:	bf08      	it	eq
 800f89e:	2020      	moveq	r0, #32
 800f8a0:	4770      	bx	lr

0800f8a2 <__lo0bits>:
 800f8a2:	6803      	ldr	r3, [r0, #0]
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	f013 0007 	ands.w	r0, r3, #7
 800f8aa:	d00b      	beq.n	800f8c4 <__lo0bits+0x22>
 800f8ac:	07d9      	lsls	r1, r3, #31
 800f8ae:	d421      	bmi.n	800f8f4 <__lo0bits+0x52>
 800f8b0:	0798      	lsls	r0, r3, #30
 800f8b2:	bf49      	itett	mi
 800f8b4:	085b      	lsrmi	r3, r3, #1
 800f8b6:	089b      	lsrpl	r3, r3, #2
 800f8b8:	2001      	movmi	r0, #1
 800f8ba:	6013      	strmi	r3, [r2, #0]
 800f8bc:	bf5c      	itt	pl
 800f8be:	6013      	strpl	r3, [r2, #0]
 800f8c0:	2002      	movpl	r0, #2
 800f8c2:	4770      	bx	lr
 800f8c4:	b299      	uxth	r1, r3
 800f8c6:	b909      	cbnz	r1, 800f8cc <__lo0bits+0x2a>
 800f8c8:	0c1b      	lsrs	r3, r3, #16
 800f8ca:	2010      	movs	r0, #16
 800f8cc:	b2d9      	uxtb	r1, r3
 800f8ce:	b909      	cbnz	r1, 800f8d4 <__lo0bits+0x32>
 800f8d0:	3008      	adds	r0, #8
 800f8d2:	0a1b      	lsrs	r3, r3, #8
 800f8d4:	0719      	lsls	r1, r3, #28
 800f8d6:	bf04      	itt	eq
 800f8d8:	091b      	lsreq	r3, r3, #4
 800f8da:	3004      	addeq	r0, #4
 800f8dc:	0799      	lsls	r1, r3, #30
 800f8de:	bf04      	itt	eq
 800f8e0:	089b      	lsreq	r3, r3, #2
 800f8e2:	3002      	addeq	r0, #2
 800f8e4:	07d9      	lsls	r1, r3, #31
 800f8e6:	d403      	bmi.n	800f8f0 <__lo0bits+0x4e>
 800f8e8:	085b      	lsrs	r3, r3, #1
 800f8ea:	f100 0001 	add.w	r0, r0, #1
 800f8ee:	d003      	beq.n	800f8f8 <__lo0bits+0x56>
 800f8f0:	6013      	str	r3, [r2, #0]
 800f8f2:	4770      	bx	lr
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	4770      	bx	lr
 800f8f8:	2020      	movs	r0, #32
 800f8fa:	4770      	bx	lr

0800f8fc <__i2b>:
 800f8fc:	b510      	push	{r4, lr}
 800f8fe:	460c      	mov	r4, r1
 800f900:	2101      	movs	r1, #1
 800f902:	f7ff ff07 	bl	800f714 <_Balloc>
 800f906:	4602      	mov	r2, r0
 800f908:	b928      	cbnz	r0, 800f916 <__i2b+0x1a>
 800f90a:	4b05      	ldr	r3, [pc, #20]	@ (800f920 <__i2b+0x24>)
 800f90c:	4805      	ldr	r0, [pc, #20]	@ (800f924 <__i2b+0x28>)
 800f90e:	f240 1145 	movw	r1, #325	@ 0x145
 800f912:	f000 fbcf 	bl	80100b4 <__assert_func>
 800f916:	2301      	movs	r3, #1
 800f918:	6144      	str	r4, [r0, #20]
 800f91a:	6103      	str	r3, [r0, #16]
 800f91c:	bd10      	pop	{r4, pc}
 800f91e:	bf00      	nop
 800f920:	08010629 	.word	0x08010629
 800f924:	0801063a 	.word	0x0801063a

0800f928 <__multiply>:
 800f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	4614      	mov	r4, r2
 800f92e:	690a      	ldr	r2, [r1, #16]
 800f930:	6923      	ldr	r3, [r4, #16]
 800f932:	429a      	cmp	r2, r3
 800f934:	bfa8      	it	ge
 800f936:	4623      	movge	r3, r4
 800f938:	460f      	mov	r7, r1
 800f93a:	bfa4      	itt	ge
 800f93c:	460c      	movge	r4, r1
 800f93e:	461f      	movge	r7, r3
 800f940:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f944:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f948:	68a3      	ldr	r3, [r4, #8]
 800f94a:	6861      	ldr	r1, [r4, #4]
 800f94c:	eb0a 0609 	add.w	r6, sl, r9
 800f950:	42b3      	cmp	r3, r6
 800f952:	b085      	sub	sp, #20
 800f954:	bfb8      	it	lt
 800f956:	3101      	addlt	r1, #1
 800f958:	f7ff fedc 	bl	800f714 <_Balloc>
 800f95c:	b930      	cbnz	r0, 800f96c <__multiply+0x44>
 800f95e:	4602      	mov	r2, r0
 800f960:	4b44      	ldr	r3, [pc, #272]	@ (800fa74 <__multiply+0x14c>)
 800f962:	4845      	ldr	r0, [pc, #276]	@ (800fa78 <__multiply+0x150>)
 800f964:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f968:	f000 fba4 	bl	80100b4 <__assert_func>
 800f96c:	f100 0514 	add.w	r5, r0, #20
 800f970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f974:	462b      	mov	r3, r5
 800f976:	2200      	movs	r2, #0
 800f978:	4543      	cmp	r3, r8
 800f97a:	d321      	bcc.n	800f9c0 <__multiply+0x98>
 800f97c:	f107 0114 	add.w	r1, r7, #20
 800f980:	f104 0214 	add.w	r2, r4, #20
 800f984:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f988:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f98c:	9302      	str	r3, [sp, #8]
 800f98e:	1b13      	subs	r3, r2, r4
 800f990:	3b15      	subs	r3, #21
 800f992:	f023 0303 	bic.w	r3, r3, #3
 800f996:	3304      	adds	r3, #4
 800f998:	f104 0715 	add.w	r7, r4, #21
 800f99c:	42ba      	cmp	r2, r7
 800f99e:	bf38      	it	cc
 800f9a0:	2304      	movcc	r3, #4
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	9b02      	ldr	r3, [sp, #8]
 800f9a6:	9103      	str	r1, [sp, #12]
 800f9a8:	428b      	cmp	r3, r1
 800f9aa:	d80c      	bhi.n	800f9c6 <__multiply+0x9e>
 800f9ac:	2e00      	cmp	r6, #0
 800f9ae:	dd03      	ble.n	800f9b8 <__multiply+0x90>
 800f9b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d05b      	beq.n	800fa70 <__multiply+0x148>
 800f9b8:	6106      	str	r6, [r0, #16]
 800f9ba:	b005      	add	sp, #20
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c0:	f843 2b04 	str.w	r2, [r3], #4
 800f9c4:	e7d8      	b.n	800f978 <__multiply+0x50>
 800f9c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f9ca:	f1ba 0f00 	cmp.w	sl, #0
 800f9ce:	d024      	beq.n	800fa1a <__multiply+0xf2>
 800f9d0:	f104 0e14 	add.w	lr, r4, #20
 800f9d4:	46a9      	mov	r9, r5
 800f9d6:	f04f 0c00 	mov.w	ip, #0
 800f9da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9de:	f8d9 3000 	ldr.w	r3, [r9]
 800f9e2:	fa1f fb87 	uxth.w	fp, r7
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f9ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f9f0:	f8d9 7000 	ldr.w	r7, [r9]
 800f9f4:	4463      	add	r3, ip
 800f9f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f9fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800f9fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa08:	4572      	cmp	r2, lr
 800fa0a:	f849 3b04 	str.w	r3, [r9], #4
 800fa0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fa12:	d8e2      	bhi.n	800f9da <__multiply+0xb2>
 800fa14:	9b01      	ldr	r3, [sp, #4]
 800fa16:	f845 c003 	str.w	ip, [r5, r3]
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa20:	3104      	adds	r1, #4
 800fa22:	f1b9 0f00 	cmp.w	r9, #0
 800fa26:	d021      	beq.n	800fa6c <__multiply+0x144>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	f104 0c14 	add.w	ip, r4, #20
 800fa2e:	46ae      	mov	lr, r5
 800fa30:	f04f 0a00 	mov.w	sl, #0
 800fa34:	f8bc b000 	ldrh.w	fp, [ip]
 800fa38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fa3c:	fb09 770b 	mla	r7, r9, fp, r7
 800fa40:	4457      	add	r7, sl
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa48:	f84e 3b04 	str.w	r3, [lr], #4
 800fa4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa54:	f8be 3000 	ldrh.w	r3, [lr]
 800fa58:	fb09 330a 	mla	r3, r9, sl, r3
 800fa5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fa60:	4562      	cmp	r2, ip
 800fa62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa66:	d8e5      	bhi.n	800fa34 <__multiply+0x10c>
 800fa68:	9f01      	ldr	r7, [sp, #4]
 800fa6a:	51eb      	str	r3, [r5, r7]
 800fa6c:	3504      	adds	r5, #4
 800fa6e:	e799      	b.n	800f9a4 <__multiply+0x7c>
 800fa70:	3e01      	subs	r6, #1
 800fa72:	e79b      	b.n	800f9ac <__multiply+0x84>
 800fa74:	08010629 	.word	0x08010629
 800fa78:	0801063a 	.word	0x0801063a

0800fa7c <__pow5mult>:
 800fa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa80:	4615      	mov	r5, r2
 800fa82:	f012 0203 	ands.w	r2, r2, #3
 800fa86:	4607      	mov	r7, r0
 800fa88:	460e      	mov	r6, r1
 800fa8a:	d007      	beq.n	800fa9c <__pow5mult+0x20>
 800fa8c:	4c25      	ldr	r4, [pc, #148]	@ (800fb24 <__pow5mult+0xa8>)
 800fa8e:	3a01      	subs	r2, #1
 800fa90:	2300      	movs	r3, #0
 800fa92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa96:	f7ff fe9f 	bl	800f7d8 <__multadd>
 800fa9a:	4606      	mov	r6, r0
 800fa9c:	10ad      	asrs	r5, r5, #2
 800fa9e:	d03d      	beq.n	800fb1c <__pow5mult+0xa0>
 800faa0:	69fc      	ldr	r4, [r7, #28]
 800faa2:	b97c      	cbnz	r4, 800fac4 <__pow5mult+0x48>
 800faa4:	2010      	movs	r0, #16
 800faa6:	f7ff fd7f 	bl	800f5a8 <malloc>
 800faaa:	4602      	mov	r2, r0
 800faac:	61f8      	str	r0, [r7, #28]
 800faae:	b928      	cbnz	r0, 800fabc <__pow5mult+0x40>
 800fab0:	4b1d      	ldr	r3, [pc, #116]	@ (800fb28 <__pow5mult+0xac>)
 800fab2:	481e      	ldr	r0, [pc, #120]	@ (800fb2c <__pow5mult+0xb0>)
 800fab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fab8:	f000 fafc 	bl	80100b4 <__assert_func>
 800fabc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fac0:	6004      	str	r4, [r0, #0]
 800fac2:	60c4      	str	r4, [r0, #12]
 800fac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800facc:	b94c      	cbnz	r4, 800fae2 <__pow5mult+0x66>
 800face:	f240 2171 	movw	r1, #625	@ 0x271
 800fad2:	4638      	mov	r0, r7
 800fad4:	f7ff ff12 	bl	800f8fc <__i2b>
 800fad8:	2300      	movs	r3, #0
 800fada:	f8c8 0008 	str.w	r0, [r8, #8]
 800fade:	4604      	mov	r4, r0
 800fae0:	6003      	str	r3, [r0, #0]
 800fae2:	f04f 0900 	mov.w	r9, #0
 800fae6:	07eb      	lsls	r3, r5, #31
 800fae8:	d50a      	bpl.n	800fb00 <__pow5mult+0x84>
 800faea:	4631      	mov	r1, r6
 800faec:	4622      	mov	r2, r4
 800faee:	4638      	mov	r0, r7
 800faf0:	f7ff ff1a 	bl	800f928 <__multiply>
 800faf4:	4631      	mov	r1, r6
 800faf6:	4680      	mov	r8, r0
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7ff fe4b 	bl	800f794 <_Bfree>
 800fafe:	4646      	mov	r6, r8
 800fb00:	106d      	asrs	r5, r5, #1
 800fb02:	d00b      	beq.n	800fb1c <__pow5mult+0xa0>
 800fb04:	6820      	ldr	r0, [r4, #0]
 800fb06:	b938      	cbnz	r0, 800fb18 <__pow5mult+0x9c>
 800fb08:	4622      	mov	r2, r4
 800fb0a:	4621      	mov	r1, r4
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f7ff ff0b 	bl	800f928 <__multiply>
 800fb12:	6020      	str	r0, [r4, #0]
 800fb14:	f8c0 9000 	str.w	r9, [r0]
 800fb18:	4604      	mov	r4, r0
 800fb1a:	e7e4      	b.n	800fae6 <__pow5mult+0x6a>
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb22:	bf00      	nop
 800fb24:	08010694 	.word	0x08010694
 800fb28:	080105ba 	.word	0x080105ba
 800fb2c:	0801063a 	.word	0x0801063a

0800fb30 <__lshift>:
 800fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb34:	460c      	mov	r4, r1
 800fb36:	6849      	ldr	r1, [r1, #4]
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	4607      	mov	r7, r0
 800fb42:	4691      	mov	r9, r2
 800fb44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb48:	f108 0601 	add.w	r6, r8, #1
 800fb4c:	42b3      	cmp	r3, r6
 800fb4e:	db0b      	blt.n	800fb68 <__lshift+0x38>
 800fb50:	4638      	mov	r0, r7
 800fb52:	f7ff fddf 	bl	800f714 <_Balloc>
 800fb56:	4605      	mov	r5, r0
 800fb58:	b948      	cbnz	r0, 800fb6e <__lshift+0x3e>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	4b28      	ldr	r3, [pc, #160]	@ (800fc00 <__lshift+0xd0>)
 800fb5e:	4829      	ldr	r0, [pc, #164]	@ (800fc04 <__lshift+0xd4>)
 800fb60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb64:	f000 faa6 	bl	80100b4 <__assert_func>
 800fb68:	3101      	adds	r1, #1
 800fb6a:	005b      	lsls	r3, r3, #1
 800fb6c:	e7ee      	b.n	800fb4c <__lshift+0x1c>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	f100 0114 	add.w	r1, r0, #20
 800fb74:	f100 0210 	add.w	r2, r0, #16
 800fb78:	4618      	mov	r0, r3
 800fb7a:	4553      	cmp	r3, sl
 800fb7c:	db33      	blt.n	800fbe6 <__lshift+0xb6>
 800fb7e:	6920      	ldr	r0, [r4, #16]
 800fb80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb84:	f104 0314 	add.w	r3, r4, #20
 800fb88:	f019 091f 	ands.w	r9, r9, #31
 800fb8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb94:	d02b      	beq.n	800fbee <__lshift+0xbe>
 800fb96:	f1c9 0e20 	rsb	lr, r9, #32
 800fb9a:	468a      	mov	sl, r1
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	6818      	ldr	r0, [r3, #0]
 800fba0:	fa00 f009 	lsl.w	r0, r0, r9
 800fba4:	4310      	orrs	r0, r2
 800fba6:	f84a 0b04 	str.w	r0, [sl], #4
 800fbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbae:	459c      	cmp	ip, r3
 800fbb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbb4:	d8f3      	bhi.n	800fb9e <__lshift+0x6e>
 800fbb6:	ebac 0304 	sub.w	r3, ip, r4
 800fbba:	3b15      	subs	r3, #21
 800fbbc:	f023 0303 	bic.w	r3, r3, #3
 800fbc0:	3304      	adds	r3, #4
 800fbc2:	f104 0015 	add.w	r0, r4, #21
 800fbc6:	4584      	cmp	ip, r0
 800fbc8:	bf38      	it	cc
 800fbca:	2304      	movcc	r3, #4
 800fbcc:	50ca      	str	r2, [r1, r3]
 800fbce:	b10a      	cbz	r2, 800fbd4 <__lshift+0xa4>
 800fbd0:	f108 0602 	add.w	r6, r8, #2
 800fbd4:	3e01      	subs	r6, #1
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	612e      	str	r6, [r5, #16]
 800fbda:	4621      	mov	r1, r4
 800fbdc:	f7ff fdda 	bl	800f794 <_Bfree>
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbea:	3301      	adds	r3, #1
 800fbec:	e7c5      	b.n	800fb7a <__lshift+0x4a>
 800fbee:	3904      	subs	r1, #4
 800fbf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbf8:	459c      	cmp	ip, r3
 800fbfa:	d8f9      	bhi.n	800fbf0 <__lshift+0xc0>
 800fbfc:	e7ea      	b.n	800fbd4 <__lshift+0xa4>
 800fbfe:	bf00      	nop
 800fc00:	08010629 	.word	0x08010629
 800fc04:	0801063a 	.word	0x0801063a

0800fc08 <__mcmp>:
 800fc08:	690a      	ldr	r2, [r1, #16]
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	6900      	ldr	r0, [r0, #16]
 800fc0e:	1a80      	subs	r0, r0, r2
 800fc10:	b530      	push	{r4, r5, lr}
 800fc12:	d10e      	bne.n	800fc32 <__mcmp+0x2a>
 800fc14:	3314      	adds	r3, #20
 800fc16:	3114      	adds	r1, #20
 800fc18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc28:	4295      	cmp	r5, r2
 800fc2a:	d003      	beq.n	800fc34 <__mcmp+0x2c>
 800fc2c:	d205      	bcs.n	800fc3a <__mcmp+0x32>
 800fc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc32:	bd30      	pop	{r4, r5, pc}
 800fc34:	42a3      	cmp	r3, r4
 800fc36:	d3f3      	bcc.n	800fc20 <__mcmp+0x18>
 800fc38:	e7fb      	b.n	800fc32 <__mcmp+0x2a>
 800fc3a:	2001      	movs	r0, #1
 800fc3c:	e7f9      	b.n	800fc32 <__mcmp+0x2a>
	...

0800fc40 <__mdiff>:
 800fc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	4689      	mov	r9, r1
 800fc46:	4606      	mov	r6, r0
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4648      	mov	r0, r9
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	f7ff ffdb 	bl	800fc08 <__mcmp>
 800fc52:	1e05      	subs	r5, r0, #0
 800fc54:	d112      	bne.n	800fc7c <__mdiff+0x3c>
 800fc56:	4629      	mov	r1, r5
 800fc58:	4630      	mov	r0, r6
 800fc5a:	f7ff fd5b 	bl	800f714 <_Balloc>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	b928      	cbnz	r0, 800fc6e <__mdiff+0x2e>
 800fc62:	4b3f      	ldr	r3, [pc, #252]	@ (800fd60 <__mdiff+0x120>)
 800fc64:	f240 2137 	movw	r1, #567	@ 0x237
 800fc68:	483e      	ldr	r0, [pc, #248]	@ (800fd64 <__mdiff+0x124>)
 800fc6a:	f000 fa23 	bl	80100b4 <__assert_func>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc74:	4610      	mov	r0, r2
 800fc76:	b003      	add	sp, #12
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	bfbc      	itt	lt
 800fc7e:	464b      	movlt	r3, r9
 800fc80:	46a1      	movlt	r9, r4
 800fc82:	4630      	mov	r0, r6
 800fc84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc88:	bfba      	itte	lt
 800fc8a:	461c      	movlt	r4, r3
 800fc8c:	2501      	movlt	r5, #1
 800fc8e:	2500      	movge	r5, #0
 800fc90:	f7ff fd40 	bl	800f714 <_Balloc>
 800fc94:	4602      	mov	r2, r0
 800fc96:	b918      	cbnz	r0, 800fca0 <__mdiff+0x60>
 800fc98:	4b31      	ldr	r3, [pc, #196]	@ (800fd60 <__mdiff+0x120>)
 800fc9a:	f240 2145 	movw	r1, #581	@ 0x245
 800fc9e:	e7e3      	b.n	800fc68 <__mdiff+0x28>
 800fca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fca4:	6926      	ldr	r6, [r4, #16]
 800fca6:	60c5      	str	r5, [r0, #12]
 800fca8:	f109 0310 	add.w	r3, r9, #16
 800fcac:	f109 0514 	add.w	r5, r9, #20
 800fcb0:	f104 0e14 	add.w	lr, r4, #20
 800fcb4:	f100 0b14 	add.w	fp, r0, #20
 800fcb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fcbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	46d9      	mov	r9, fp
 800fcc4:	f04f 0c00 	mov.w	ip, #0
 800fcc8:	9b01      	ldr	r3, [sp, #4]
 800fcca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fcce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	fa1f f38a 	uxth.w	r3, sl
 800fcd8:	4619      	mov	r1, r3
 800fcda:	b283      	uxth	r3, r0
 800fcdc:	1acb      	subs	r3, r1, r3
 800fcde:	0c00      	lsrs	r0, r0, #16
 800fce0:	4463      	add	r3, ip
 800fce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fcf0:	4576      	cmp	r6, lr
 800fcf2:	f849 3b04 	str.w	r3, [r9], #4
 800fcf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcfa:	d8e5      	bhi.n	800fcc8 <__mdiff+0x88>
 800fcfc:	1b33      	subs	r3, r6, r4
 800fcfe:	3b15      	subs	r3, #21
 800fd00:	f023 0303 	bic.w	r3, r3, #3
 800fd04:	3415      	adds	r4, #21
 800fd06:	3304      	adds	r3, #4
 800fd08:	42a6      	cmp	r6, r4
 800fd0a:	bf38      	it	cc
 800fd0c:	2304      	movcc	r3, #4
 800fd0e:	441d      	add	r5, r3
 800fd10:	445b      	add	r3, fp
 800fd12:	461e      	mov	r6, r3
 800fd14:	462c      	mov	r4, r5
 800fd16:	4544      	cmp	r4, r8
 800fd18:	d30e      	bcc.n	800fd38 <__mdiff+0xf8>
 800fd1a:	f108 0103 	add.w	r1, r8, #3
 800fd1e:	1b49      	subs	r1, r1, r5
 800fd20:	f021 0103 	bic.w	r1, r1, #3
 800fd24:	3d03      	subs	r5, #3
 800fd26:	45a8      	cmp	r8, r5
 800fd28:	bf38      	it	cc
 800fd2a:	2100      	movcc	r1, #0
 800fd2c:	440b      	add	r3, r1
 800fd2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd32:	b191      	cbz	r1, 800fd5a <__mdiff+0x11a>
 800fd34:	6117      	str	r7, [r2, #16]
 800fd36:	e79d      	b.n	800fc74 <__mdiff+0x34>
 800fd38:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd3c:	46e6      	mov	lr, ip
 800fd3e:	0c08      	lsrs	r0, r1, #16
 800fd40:	fa1c fc81 	uxtah	ip, ip, r1
 800fd44:	4471      	add	r1, lr
 800fd46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd4a:	b289      	uxth	r1, r1
 800fd4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd50:	f846 1b04 	str.w	r1, [r6], #4
 800fd54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd58:	e7dd      	b.n	800fd16 <__mdiff+0xd6>
 800fd5a:	3f01      	subs	r7, #1
 800fd5c:	e7e7      	b.n	800fd2e <__mdiff+0xee>
 800fd5e:	bf00      	nop
 800fd60:	08010629 	.word	0x08010629
 800fd64:	0801063a 	.word	0x0801063a

0800fd68 <__d2b>:
 800fd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	2101      	movs	r1, #1
 800fd70:	ec59 8b10 	vmov	r8, r9, d0
 800fd74:	4616      	mov	r6, r2
 800fd76:	f7ff fccd 	bl	800f714 <_Balloc>
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	b930      	cbnz	r0, 800fd8c <__d2b+0x24>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	4b23      	ldr	r3, [pc, #140]	@ (800fe10 <__d2b+0xa8>)
 800fd82:	4824      	ldr	r0, [pc, #144]	@ (800fe14 <__d2b+0xac>)
 800fd84:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd88:	f000 f994 	bl	80100b4 <__assert_func>
 800fd8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd94:	b10d      	cbz	r5, 800fd9a <__d2b+0x32>
 800fd96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	f1b8 0300 	subs.w	r3, r8, #0
 800fda0:	d023      	beq.n	800fdea <__d2b+0x82>
 800fda2:	4668      	mov	r0, sp
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	f7ff fd7c 	bl	800f8a2 <__lo0bits>
 800fdaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fdae:	b1d0      	cbz	r0, 800fde6 <__d2b+0x7e>
 800fdb0:	f1c0 0320 	rsb	r3, r0, #32
 800fdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800fdb8:	430b      	orrs	r3, r1
 800fdba:	40c2      	lsrs	r2, r0
 800fdbc:	6163      	str	r3, [r4, #20]
 800fdbe:	9201      	str	r2, [sp, #4]
 800fdc0:	9b01      	ldr	r3, [sp, #4]
 800fdc2:	61a3      	str	r3, [r4, #24]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	bf0c      	ite	eq
 800fdc8:	2201      	moveq	r2, #1
 800fdca:	2202      	movne	r2, #2
 800fdcc:	6122      	str	r2, [r4, #16]
 800fdce:	b1a5      	cbz	r5, 800fdfa <__d2b+0x92>
 800fdd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fdd4:	4405      	add	r5, r0
 800fdd6:	603d      	str	r5, [r7, #0]
 800fdd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fddc:	6030      	str	r0, [r6, #0]
 800fdde:	4620      	mov	r0, r4
 800fde0:	b003      	add	sp, #12
 800fde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fde6:	6161      	str	r1, [r4, #20]
 800fde8:	e7ea      	b.n	800fdc0 <__d2b+0x58>
 800fdea:	a801      	add	r0, sp, #4
 800fdec:	f7ff fd59 	bl	800f8a2 <__lo0bits>
 800fdf0:	9b01      	ldr	r3, [sp, #4]
 800fdf2:	6163      	str	r3, [r4, #20]
 800fdf4:	3020      	adds	r0, #32
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	e7e8      	b.n	800fdcc <__d2b+0x64>
 800fdfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fe02:	6038      	str	r0, [r7, #0]
 800fe04:	6918      	ldr	r0, [r3, #16]
 800fe06:	f7ff fd2d 	bl	800f864 <__hi0bits>
 800fe0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe0e:	e7e5      	b.n	800fddc <__d2b+0x74>
 800fe10:	08010629 	.word	0x08010629
 800fe14:	0801063a 	.word	0x0801063a

0800fe18 <__sflush_r>:
 800fe18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	0716      	lsls	r6, r2, #28
 800fe22:	4605      	mov	r5, r0
 800fe24:	460c      	mov	r4, r1
 800fe26:	d454      	bmi.n	800fed2 <__sflush_r+0xba>
 800fe28:	684b      	ldr	r3, [r1, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	dc02      	bgt.n	800fe34 <__sflush_r+0x1c>
 800fe2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	dd48      	ble.n	800fec6 <__sflush_r+0xae>
 800fe34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe36:	2e00      	cmp	r6, #0
 800fe38:	d045      	beq.n	800fec6 <__sflush_r+0xae>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe40:	682f      	ldr	r7, [r5, #0]
 800fe42:	6a21      	ldr	r1, [r4, #32]
 800fe44:	602b      	str	r3, [r5, #0]
 800fe46:	d030      	beq.n	800feaa <__sflush_r+0x92>
 800fe48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe4a:	89a3      	ldrh	r3, [r4, #12]
 800fe4c:	0759      	lsls	r1, r3, #29
 800fe4e:	d505      	bpl.n	800fe5c <__sflush_r+0x44>
 800fe50:	6863      	ldr	r3, [r4, #4]
 800fe52:	1ad2      	subs	r2, r2, r3
 800fe54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe56:	b10b      	cbz	r3, 800fe5c <__sflush_r+0x44>
 800fe58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe5a:	1ad2      	subs	r2, r2, r3
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe60:	6a21      	ldr	r1, [r4, #32]
 800fe62:	4628      	mov	r0, r5
 800fe64:	47b0      	blx	r6
 800fe66:	1c43      	adds	r3, r0, #1
 800fe68:	89a3      	ldrh	r3, [r4, #12]
 800fe6a:	d106      	bne.n	800fe7a <__sflush_r+0x62>
 800fe6c:	6829      	ldr	r1, [r5, #0]
 800fe6e:	291d      	cmp	r1, #29
 800fe70:	d82b      	bhi.n	800feca <__sflush_r+0xb2>
 800fe72:	4a2a      	ldr	r2, [pc, #168]	@ (800ff1c <__sflush_r+0x104>)
 800fe74:	410a      	asrs	r2, r1
 800fe76:	07d6      	lsls	r6, r2, #31
 800fe78:	d427      	bmi.n	800feca <__sflush_r+0xb2>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	6062      	str	r2, [r4, #4]
 800fe7e:	04d9      	lsls	r1, r3, #19
 800fe80:	6922      	ldr	r2, [r4, #16]
 800fe82:	6022      	str	r2, [r4, #0]
 800fe84:	d504      	bpl.n	800fe90 <__sflush_r+0x78>
 800fe86:	1c42      	adds	r2, r0, #1
 800fe88:	d101      	bne.n	800fe8e <__sflush_r+0x76>
 800fe8a:	682b      	ldr	r3, [r5, #0]
 800fe8c:	b903      	cbnz	r3, 800fe90 <__sflush_r+0x78>
 800fe8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe92:	602f      	str	r7, [r5, #0]
 800fe94:	b1b9      	cbz	r1, 800fec6 <__sflush_r+0xae>
 800fe96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe9a:	4299      	cmp	r1, r3
 800fe9c:	d002      	beq.n	800fea4 <__sflush_r+0x8c>
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f7ff fb38 	bl	800f514 <_free_r>
 800fea4:	2300      	movs	r3, #0
 800fea6:	6363      	str	r3, [r4, #52]	@ 0x34
 800fea8:	e00d      	b.n	800fec6 <__sflush_r+0xae>
 800feaa:	2301      	movs	r3, #1
 800feac:	4628      	mov	r0, r5
 800feae:	47b0      	blx	r6
 800feb0:	4602      	mov	r2, r0
 800feb2:	1c50      	adds	r0, r2, #1
 800feb4:	d1c9      	bne.n	800fe4a <__sflush_r+0x32>
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d0c6      	beq.n	800fe4a <__sflush_r+0x32>
 800febc:	2b1d      	cmp	r3, #29
 800febe:	d001      	beq.n	800fec4 <__sflush_r+0xac>
 800fec0:	2b16      	cmp	r3, #22
 800fec2:	d11e      	bne.n	800ff02 <__sflush_r+0xea>
 800fec4:	602f      	str	r7, [r5, #0]
 800fec6:	2000      	movs	r0, #0
 800fec8:	e022      	b.n	800ff10 <__sflush_r+0xf8>
 800feca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fece:	b21b      	sxth	r3, r3
 800fed0:	e01b      	b.n	800ff0a <__sflush_r+0xf2>
 800fed2:	690f      	ldr	r7, [r1, #16]
 800fed4:	2f00      	cmp	r7, #0
 800fed6:	d0f6      	beq.n	800fec6 <__sflush_r+0xae>
 800fed8:	0793      	lsls	r3, r2, #30
 800feda:	680e      	ldr	r6, [r1, #0]
 800fedc:	bf08      	it	eq
 800fede:	694b      	ldreq	r3, [r1, #20]
 800fee0:	600f      	str	r7, [r1, #0]
 800fee2:	bf18      	it	ne
 800fee4:	2300      	movne	r3, #0
 800fee6:	eba6 0807 	sub.w	r8, r6, r7
 800feea:	608b      	str	r3, [r1, #8]
 800feec:	f1b8 0f00 	cmp.w	r8, #0
 800fef0:	dde9      	ble.n	800fec6 <__sflush_r+0xae>
 800fef2:	6a21      	ldr	r1, [r4, #32]
 800fef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fef6:	4643      	mov	r3, r8
 800fef8:	463a      	mov	r2, r7
 800fefa:	4628      	mov	r0, r5
 800fefc:	47b0      	blx	r6
 800fefe:	2800      	cmp	r0, #0
 800ff00:	dc08      	bgt.n	800ff14 <__sflush_r+0xfc>
 800ff02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff14:	4407      	add	r7, r0
 800ff16:	eba8 0800 	sub.w	r8, r8, r0
 800ff1a:	e7e7      	b.n	800feec <__sflush_r+0xd4>
 800ff1c:	dfbffffe 	.word	0xdfbffffe

0800ff20 <_fflush_r>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	690b      	ldr	r3, [r1, #16]
 800ff24:	4605      	mov	r5, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	b913      	cbnz	r3, 800ff30 <_fflush_r+0x10>
 800ff2a:	2500      	movs	r5, #0
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	b118      	cbz	r0, 800ff3a <_fflush_r+0x1a>
 800ff32:	6a03      	ldr	r3, [r0, #32]
 800ff34:	b90b      	cbnz	r3, 800ff3a <_fflush_r+0x1a>
 800ff36:	f7fe fb23 	bl	800e580 <__sinit>
 800ff3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0f3      	beq.n	800ff2a <_fflush_r+0xa>
 800ff42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff44:	07d0      	lsls	r0, r2, #31
 800ff46:	d404      	bmi.n	800ff52 <_fflush_r+0x32>
 800ff48:	0599      	lsls	r1, r3, #22
 800ff4a:	d402      	bmi.n	800ff52 <_fflush_r+0x32>
 800ff4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff4e:	f7fe fd00 	bl	800e952 <__retarget_lock_acquire_recursive>
 800ff52:	4628      	mov	r0, r5
 800ff54:	4621      	mov	r1, r4
 800ff56:	f7ff ff5f 	bl	800fe18 <__sflush_r>
 800ff5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff5c:	07da      	lsls	r2, r3, #31
 800ff5e:	4605      	mov	r5, r0
 800ff60:	d4e4      	bmi.n	800ff2c <_fflush_r+0xc>
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	059b      	lsls	r3, r3, #22
 800ff66:	d4e1      	bmi.n	800ff2c <_fflush_r+0xc>
 800ff68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff6a:	f7fe fcf3 	bl	800e954 <__retarget_lock_release_recursive>
 800ff6e:	e7dd      	b.n	800ff2c <_fflush_r+0xc>

0800ff70 <__swhatbuf_r>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff78:	2900      	cmp	r1, #0
 800ff7a:	b096      	sub	sp, #88	@ 0x58
 800ff7c:	4615      	mov	r5, r2
 800ff7e:	461e      	mov	r6, r3
 800ff80:	da0d      	bge.n	800ff9e <__swhatbuf_r+0x2e>
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff88:	f04f 0100 	mov.w	r1, #0
 800ff8c:	bf14      	ite	ne
 800ff8e:	2340      	movne	r3, #64	@ 0x40
 800ff90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff94:	2000      	movs	r0, #0
 800ff96:	6031      	str	r1, [r6, #0]
 800ff98:	602b      	str	r3, [r5, #0]
 800ff9a:	b016      	add	sp, #88	@ 0x58
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	466a      	mov	r2, sp
 800ffa0:	f000 f848 	bl	8010034 <_fstat_r>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	dbec      	blt.n	800ff82 <__swhatbuf_r+0x12>
 800ffa8:	9901      	ldr	r1, [sp, #4]
 800ffaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ffae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ffb2:	4259      	negs	r1, r3
 800ffb4:	4159      	adcs	r1, r3
 800ffb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ffba:	e7eb      	b.n	800ff94 <__swhatbuf_r+0x24>

0800ffbc <__smakebuf_r>:
 800ffbc:	898b      	ldrh	r3, [r1, #12]
 800ffbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffc0:	079d      	lsls	r5, r3, #30
 800ffc2:	4606      	mov	r6, r0
 800ffc4:	460c      	mov	r4, r1
 800ffc6:	d507      	bpl.n	800ffd8 <__smakebuf_r+0x1c>
 800ffc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	6123      	str	r3, [r4, #16]
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	6163      	str	r3, [r4, #20]
 800ffd4:	b003      	add	sp, #12
 800ffd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffd8:	ab01      	add	r3, sp, #4
 800ffda:	466a      	mov	r2, sp
 800ffdc:	f7ff ffc8 	bl	800ff70 <__swhatbuf_r>
 800ffe0:	9f00      	ldr	r7, [sp, #0]
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f7ff fb08 	bl	800f5fc <_malloc_r>
 800ffec:	b948      	cbnz	r0, 8010002 <__smakebuf_r+0x46>
 800ffee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff2:	059a      	lsls	r2, r3, #22
 800fff4:	d4ee      	bmi.n	800ffd4 <__smakebuf_r+0x18>
 800fff6:	f023 0303 	bic.w	r3, r3, #3
 800fffa:	f043 0302 	orr.w	r3, r3, #2
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	e7e2      	b.n	800ffc8 <__smakebuf_r+0xc>
 8010002:	89a3      	ldrh	r3, [r4, #12]
 8010004:	6020      	str	r0, [r4, #0]
 8010006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801000a:	81a3      	strh	r3, [r4, #12]
 801000c:	9b01      	ldr	r3, [sp, #4]
 801000e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010012:	b15b      	cbz	r3, 801002c <__smakebuf_r+0x70>
 8010014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010018:	4630      	mov	r0, r6
 801001a:	f000 f81d 	bl	8010058 <_isatty_r>
 801001e:	b128      	cbz	r0, 801002c <__smakebuf_r+0x70>
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	f023 0303 	bic.w	r3, r3, #3
 8010026:	f043 0301 	orr.w	r3, r3, #1
 801002a:	81a3      	strh	r3, [r4, #12]
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	431d      	orrs	r5, r3
 8010030:	81a5      	strh	r5, [r4, #12]
 8010032:	e7cf      	b.n	800ffd4 <__smakebuf_r+0x18>

08010034 <_fstat_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d07      	ldr	r5, [pc, #28]	@ (8010054 <_fstat_r+0x20>)
 8010038:	2300      	movs	r3, #0
 801003a:	4604      	mov	r4, r0
 801003c:	4608      	mov	r0, r1
 801003e:	4611      	mov	r1, r2
 8010040:	602b      	str	r3, [r5, #0]
 8010042:	f7f1 fbc4 	bl	80017ce <_fstat>
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	d102      	bne.n	8010050 <_fstat_r+0x1c>
 801004a:	682b      	ldr	r3, [r5, #0]
 801004c:	b103      	cbz	r3, 8010050 <_fstat_r+0x1c>
 801004e:	6023      	str	r3, [r4, #0]
 8010050:	bd38      	pop	{r3, r4, r5, pc}
 8010052:	bf00      	nop
 8010054:	24000634 	.word	0x24000634

08010058 <_isatty_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d06      	ldr	r5, [pc, #24]	@ (8010074 <_isatty_r+0x1c>)
 801005c:	2300      	movs	r3, #0
 801005e:	4604      	mov	r4, r0
 8010060:	4608      	mov	r0, r1
 8010062:	602b      	str	r3, [r5, #0]
 8010064:	f7f1 fbc3 	bl	80017ee <_isatty>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d102      	bne.n	8010072 <_isatty_r+0x1a>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	b103      	cbz	r3, 8010072 <_isatty_r+0x1a>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	24000634 	.word	0x24000634

08010078 <_sbrk_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d06      	ldr	r5, [pc, #24]	@ (8010094 <_sbrk_r+0x1c>)
 801007c:	2300      	movs	r3, #0
 801007e:	4604      	mov	r4, r0
 8010080:	4608      	mov	r0, r1
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	f7f1 fbcc 	bl	8001820 <_sbrk>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d102      	bne.n	8010092 <_sbrk_r+0x1a>
 801008c:	682b      	ldr	r3, [r5, #0]
 801008e:	b103      	cbz	r3, 8010092 <_sbrk_r+0x1a>
 8010090:	6023      	str	r3, [r4, #0]
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	24000634 	.word	0x24000634

08010098 <memcpy>:
 8010098:	440a      	add	r2, r1
 801009a:	4291      	cmp	r1, r2
 801009c:	f100 33ff 	add.w	r3, r0, #4294967295
 80100a0:	d100      	bne.n	80100a4 <memcpy+0xc>
 80100a2:	4770      	bx	lr
 80100a4:	b510      	push	{r4, lr}
 80100a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ae:	4291      	cmp	r1, r2
 80100b0:	d1f9      	bne.n	80100a6 <memcpy+0xe>
 80100b2:	bd10      	pop	{r4, pc}

080100b4 <__assert_func>:
 80100b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100b6:	4614      	mov	r4, r2
 80100b8:	461a      	mov	r2, r3
 80100ba:	4b09      	ldr	r3, [pc, #36]	@ (80100e0 <__assert_func+0x2c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4605      	mov	r5, r0
 80100c0:	68d8      	ldr	r0, [r3, #12]
 80100c2:	b954      	cbnz	r4, 80100da <__assert_func+0x26>
 80100c4:	4b07      	ldr	r3, [pc, #28]	@ (80100e4 <__assert_func+0x30>)
 80100c6:	461c      	mov	r4, r3
 80100c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100cc:	9100      	str	r1, [sp, #0]
 80100ce:	462b      	mov	r3, r5
 80100d0:	4905      	ldr	r1, [pc, #20]	@ (80100e8 <__assert_func+0x34>)
 80100d2:	f000 f841 	bl	8010158 <fiprintf>
 80100d6:	f000 f851 	bl	801017c <abort>
 80100da:	4b04      	ldr	r3, [pc, #16]	@ (80100ec <__assert_func+0x38>)
 80100dc:	e7f4      	b.n	80100c8 <__assert_func+0x14>
 80100de:	bf00      	nop
 80100e0:	2400002c 	.word	0x2400002c
 80100e4:	080107d5 	.word	0x080107d5
 80100e8:	080107a7 	.word	0x080107a7
 80100ec:	0801079a 	.word	0x0801079a

080100f0 <_calloc_r>:
 80100f0:	b570      	push	{r4, r5, r6, lr}
 80100f2:	fba1 5402 	umull	r5, r4, r1, r2
 80100f6:	b93c      	cbnz	r4, 8010108 <_calloc_r+0x18>
 80100f8:	4629      	mov	r1, r5
 80100fa:	f7ff fa7f 	bl	800f5fc <_malloc_r>
 80100fe:	4606      	mov	r6, r0
 8010100:	b928      	cbnz	r0, 801010e <_calloc_r+0x1e>
 8010102:	2600      	movs	r6, #0
 8010104:	4630      	mov	r0, r6
 8010106:	bd70      	pop	{r4, r5, r6, pc}
 8010108:	220c      	movs	r2, #12
 801010a:	6002      	str	r2, [r0, #0]
 801010c:	e7f9      	b.n	8010102 <_calloc_r+0x12>
 801010e:	462a      	mov	r2, r5
 8010110:	4621      	mov	r1, r4
 8010112:	f7fe fba1 	bl	800e858 <memset>
 8010116:	e7f5      	b.n	8010104 <_calloc_r+0x14>

08010118 <__ascii_mbtowc>:
 8010118:	b082      	sub	sp, #8
 801011a:	b901      	cbnz	r1, 801011e <__ascii_mbtowc+0x6>
 801011c:	a901      	add	r1, sp, #4
 801011e:	b142      	cbz	r2, 8010132 <__ascii_mbtowc+0x1a>
 8010120:	b14b      	cbz	r3, 8010136 <__ascii_mbtowc+0x1e>
 8010122:	7813      	ldrb	r3, [r2, #0]
 8010124:	600b      	str	r3, [r1, #0]
 8010126:	7812      	ldrb	r2, [r2, #0]
 8010128:	1e10      	subs	r0, r2, #0
 801012a:	bf18      	it	ne
 801012c:	2001      	movne	r0, #1
 801012e:	b002      	add	sp, #8
 8010130:	4770      	bx	lr
 8010132:	4610      	mov	r0, r2
 8010134:	e7fb      	b.n	801012e <__ascii_mbtowc+0x16>
 8010136:	f06f 0001 	mvn.w	r0, #1
 801013a:	e7f8      	b.n	801012e <__ascii_mbtowc+0x16>

0801013c <__ascii_wctomb>:
 801013c:	4603      	mov	r3, r0
 801013e:	4608      	mov	r0, r1
 8010140:	b141      	cbz	r1, 8010154 <__ascii_wctomb+0x18>
 8010142:	2aff      	cmp	r2, #255	@ 0xff
 8010144:	d904      	bls.n	8010150 <__ascii_wctomb+0x14>
 8010146:	228a      	movs	r2, #138	@ 0x8a
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	f04f 30ff 	mov.w	r0, #4294967295
 801014e:	4770      	bx	lr
 8010150:	700a      	strb	r2, [r1, #0]
 8010152:	2001      	movs	r0, #1
 8010154:	4770      	bx	lr
	...

08010158 <fiprintf>:
 8010158:	b40e      	push	{r1, r2, r3}
 801015a:	b503      	push	{r0, r1, lr}
 801015c:	4601      	mov	r1, r0
 801015e:	ab03      	add	r3, sp, #12
 8010160:	4805      	ldr	r0, [pc, #20]	@ (8010178 <fiprintf+0x20>)
 8010162:	f853 2b04 	ldr.w	r2, [r3], #4
 8010166:	6800      	ldr	r0, [r0, #0]
 8010168:	9301      	str	r3, [sp, #4]
 801016a:	f000 f837 	bl	80101dc <_vfiprintf_r>
 801016e:	b002      	add	sp, #8
 8010170:	f85d eb04 	ldr.w	lr, [sp], #4
 8010174:	b003      	add	sp, #12
 8010176:	4770      	bx	lr
 8010178:	2400002c 	.word	0x2400002c

0801017c <abort>:
 801017c:	b508      	push	{r3, lr}
 801017e:	2006      	movs	r0, #6
 8010180:	f000 f96c 	bl	801045c <raise>
 8010184:	2001      	movs	r0, #1
 8010186:	f7f1 fad2 	bl	800172e <_exit>

0801018a <__sfputc_r>:
 801018a:	6893      	ldr	r3, [r2, #8]
 801018c:	3b01      	subs	r3, #1
 801018e:	2b00      	cmp	r3, #0
 8010190:	b410      	push	{r4}
 8010192:	6093      	str	r3, [r2, #8]
 8010194:	da08      	bge.n	80101a8 <__sfputc_r+0x1e>
 8010196:	6994      	ldr	r4, [r2, #24]
 8010198:	42a3      	cmp	r3, r4
 801019a:	db01      	blt.n	80101a0 <__sfputc_r+0x16>
 801019c:	290a      	cmp	r1, #10
 801019e:	d103      	bne.n	80101a8 <__sfputc_r+0x1e>
 80101a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a4:	f7fe bac3 	b.w	800e72e <__swbuf_r>
 80101a8:	6813      	ldr	r3, [r2, #0]
 80101aa:	1c58      	adds	r0, r3, #1
 80101ac:	6010      	str	r0, [r2, #0]
 80101ae:	7019      	strb	r1, [r3, #0]
 80101b0:	4608      	mov	r0, r1
 80101b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <__sfputs_r>:
 80101b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ba:	4606      	mov	r6, r0
 80101bc:	460f      	mov	r7, r1
 80101be:	4614      	mov	r4, r2
 80101c0:	18d5      	adds	r5, r2, r3
 80101c2:	42ac      	cmp	r4, r5
 80101c4:	d101      	bne.n	80101ca <__sfputs_r+0x12>
 80101c6:	2000      	movs	r0, #0
 80101c8:	e007      	b.n	80101da <__sfputs_r+0x22>
 80101ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ce:	463a      	mov	r2, r7
 80101d0:	4630      	mov	r0, r6
 80101d2:	f7ff ffda 	bl	801018a <__sfputc_r>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	d1f3      	bne.n	80101c2 <__sfputs_r+0xa>
 80101da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101dc <_vfiprintf_r>:
 80101dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e0:	460d      	mov	r5, r1
 80101e2:	b09d      	sub	sp, #116	@ 0x74
 80101e4:	4614      	mov	r4, r2
 80101e6:	4698      	mov	r8, r3
 80101e8:	4606      	mov	r6, r0
 80101ea:	b118      	cbz	r0, 80101f4 <_vfiprintf_r+0x18>
 80101ec:	6a03      	ldr	r3, [r0, #32]
 80101ee:	b90b      	cbnz	r3, 80101f4 <_vfiprintf_r+0x18>
 80101f0:	f7fe f9c6 	bl	800e580 <__sinit>
 80101f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101f6:	07d9      	lsls	r1, r3, #31
 80101f8:	d405      	bmi.n	8010206 <_vfiprintf_r+0x2a>
 80101fa:	89ab      	ldrh	r3, [r5, #12]
 80101fc:	059a      	lsls	r2, r3, #22
 80101fe:	d402      	bmi.n	8010206 <_vfiprintf_r+0x2a>
 8010200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010202:	f7fe fba6 	bl	800e952 <__retarget_lock_acquire_recursive>
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	071b      	lsls	r3, r3, #28
 801020a:	d501      	bpl.n	8010210 <_vfiprintf_r+0x34>
 801020c:	692b      	ldr	r3, [r5, #16]
 801020e:	b99b      	cbnz	r3, 8010238 <_vfiprintf_r+0x5c>
 8010210:	4629      	mov	r1, r5
 8010212:	4630      	mov	r0, r6
 8010214:	f7fe faca 	bl	800e7ac <__swsetup_r>
 8010218:	b170      	cbz	r0, 8010238 <_vfiprintf_r+0x5c>
 801021a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801021c:	07dc      	lsls	r4, r3, #31
 801021e:	d504      	bpl.n	801022a <_vfiprintf_r+0x4e>
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	b01d      	add	sp, #116	@ 0x74
 8010226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022a:	89ab      	ldrh	r3, [r5, #12]
 801022c:	0598      	lsls	r0, r3, #22
 801022e:	d4f7      	bmi.n	8010220 <_vfiprintf_r+0x44>
 8010230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010232:	f7fe fb8f 	bl	800e954 <__retarget_lock_release_recursive>
 8010236:	e7f3      	b.n	8010220 <_vfiprintf_r+0x44>
 8010238:	2300      	movs	r3, #0
 801023a:	9309      	str	r3, [sp, #36]	@ 0x24
 801023c:	2320      	movs	r3, #32
 801023e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010242:	f8cd 800c 	str.w	r8, [sp, #12]
 8010246:	2330      	movs	r3, #48	@ 0x30
 8010248:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103f8 <_vfiprintf_r+0x21c>
 801024c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010250:	f04f 0901 	mov.w	r9, #1
 8010254:	4623      	mov	r3, r4
 8010256:	469a      	mov	sl, r3
 8010258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801025c:	b10a      	cbz	r2, 8010262 <_vfiprintf_r+0x86>
 801025e:	2a25      	cmp	r2, #37	@ 0x25
 8010260:	d1f9      	bne.n	8010256 <_vfiprintf_r+0x7a>
 8010262:	ebba 0b04 	subs.w	fp, sl, r4
 8010266:	d00b      	beq.n	8010280 <_vfiprintf_r+0xa4>
 8010268:	465b      	mov	r3, fp
 801026a:	4622      	mov	r2, r4
 801026c:	4629      	mov	r1, r5
 801026e:	4630      	mov	r0, r6
 8010270:	f7ff ffa2 	bl	80101b8 <__sfputs_r>
 8010274:	3001      	adds	r0, #1
 8010276:	f000 80a7 	beq.w	80103c8 <_vfiprintf_r+0x1ec>
 801027a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801027c:	445a      	add	r2, fp
 801027e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010280:	f89a 3000 	ldrb.w	r3, [sl]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 809f 	beq.w	80103c8 <_vfiprintf_r+0x1ec>
 801028a:	2300      	movs	r3, #0
 801028c:	f04f 32ff 	mov.w	r2, #4294967295
 8010290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010294:	f10a 0a01 	add.w	sl, sl, #1
 8010298:	9304      	str	r3, [sp, #16]
 801029a:	9307      	str	r3, [sp, #28]
 801029c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80102a2:	4654      	mov	r4, sl
 80102a4:	2205      	movs	r2, #5
 80102a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102aa:	4853      	ldr	r0, [pc, #332]	@ (80103f8 <_vfiprintf_r+0x21c>)
 80102ac:	f7f0 f830 	bl	8000310 <memchr>
 80102b0:	9a04      	ldr	r2, [sp, #16]
 80102b2:	b9d8      	cbnz	r0, 80102ec <_vfiprintf_r+0x110>
 80102b4:	06d1      	lsls	r1, r2, #27
 80102b6:	bf44      	itt	mi
 80102b8:	2320      	movmi	r3, #32
 80102ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102be:	0713      	lsls	r3, r2, #28
 80102c0:	bf44      	itt	mi
 80102c2:	232b      	movmi	r3, #43	@ 0x2b
 80102c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102c8:	f89a 3000 	ldrb.w	r3, [sl]
 80102cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80102ce:	d015      	beq.n	80102fc <_vfiprintf_r+0x120>
 80102d0:	9a07      	ldr	r2, [sp, #28]
 80102d2:	4654      	mov	r4, sl
 80102d4:	2000      	movs	r0, #0
 80102d6:	f04f 0c0a 	mov.w	ip, #10
 80102da:	4621      	mov	r1, r4
 80102dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102e0:	3b30      	subs	r3, #48	@ 0x30
 80102e2:	2b09      	cmp	r3, #9
 80102e4:	d94b      	bls.n	801037e <_vfiprintf_r+0x1a2>
 80102e6:	b1b0      	cbz	r0, 8010316 <_vfiprintf_r+0x13a>
 80102e8:	9207      	str	r2, [sp, #28]
 80102ea:	e014      	b.n	8010316 <_vfiprintf_r+0x13a>
 80102ec:	eba0 0308 	sub.w	r3, r0, r8
 80102f0:	fa09 f303 	lsl.w	r3, r9, r3
 80102f4:	4313      	orrs	r3, r2
 80102f6:	9304      	str	r3, [sp, #16]
 80102f8:	46a2      	mov	sl, r4
 80102fa:	e7d2      	b.n	80102a2 <_vfiprintf_r+0xc6>
 80102fc:	9b03      	ldr	r3, [sp, #12]
 80102fe:	1d19      	adds	r1, r3, #4
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	9103      	str	r1, [sp, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	bfbb      	ittet	lt
 8010308:	425b      	neglt	r3, r3
 801030a:	f042 0202 	orrlt.w	r2, r2, #2
 801030e:	9307      	strge	r3, [sp, #28]
 8010310:	9307      	strlt	r3, [sp, #28]
 8010312:	bfb8      	it	lt
 8010314:	9204      	strlt	r2, [sp, #16]
 8010316:	7823      	ldrb	r3, [r4, #0]
 8010318:	2b2e      	cmp	r3, #46	@ 0x2e
 801031a:	d10a      	bne.n	8010332 <_vfiprintf_r+0x156>
 801031c:	7863      	ldrb	r3, [r4, #1]
 801031e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010320:	d132      	bne.n	8010388 <_vfiprintf_r+0x1ac>
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	1d1a      	adds	r2, r3, #4
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	9203      	str	r2, [sp, #12]
 801032a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801032e:	3402      	adds	r4, #2
 8010330:	9305      	str	r3, [sp, #20]
 8010332:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010408 <_vfiprintf_r+0x22c>
 8010336:	7821      	ldrb	r1, [r4, #0]
 8010338:	2203      	movs	r2, #3
 801033a:	4650      	mov	r0, sl
 801033c:	f7ef ffe8 	bl	8000310 <memchr>
 8010340:	b138      	cbz	r0, 8010352 <_vfiprintf_r+0x176>
 8010342:	9b04      	ldr	r3, [sp, #16]
 8010344:	eba0 000a 	sub.w	r0, r0, sl
 8010348:	2240      	movs	r2, #64	@ 0x40
 801034a:	4082      	lsls	r2, r0
 801034c:	4313      	orrs	r3, r2
 801034e:	3401      	adds	r4, #1
 8010350:	9304      	str	r3, [sp, #16]
 8010352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010356:	4829      	ldr	r0, [pc, #164]	@ (80103fc <_vfiprintf_r+0x220>)
 8010358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801035c:	2206      	movs	r2, #6
 801035e:	f7ef ffd7 	bl	8000310 <memchr>
 8010362:	2800      	cmp	r0, #0
 8010364:	d03f      	beq.n	80103e6 <_vfiprintf_r+0x20a>
 8010366:	4b26      	ldr	r3, [pc, #152]	@ (8010400 <_vfiprintf_r+0x224>)
 8010368:	bb1b      	cbnz	r3, 80103b2 <_vfiprintf_r+0x1d6>
 801036a:	9b03      	ldr	r3, [sp, #12]
 801036c:	3307      	adds	r3, #7
 801036e:	f023 0307 	bic.w	r3, r3, #7
 8010372:	3308      	adds	r3, #8
 8010374:	9303      	str	r3, [sp, #12]
 8010376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010378:	443b      	add	r3, r7
 801037a:	9309      	str	r3, [sp, #36]	@ 0x24
 801037c:	e76a      	b.n	8010254 <_vfiprintf_r+0x78>
 801037e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010382:	460c      	mov	r4, r1
 8010384:	2001      	movs	r0, #1
 8010386:	e7a8      	b.n	80102da <_vfiprintf_r+0xfe>
 8010388:	2300      	movs	r3, #0
 801038a:	3401      	adds	r4, #1
 801038c:	9305      	str	r3, [sp, #20]
 801038e:	4619      	mov	r1, r3
 8010390:	f04f 0c0a 	mov.w	ip, #10
 8010394:	4620      	mov	r0, r4
 8010396:	f810 2b01 	ldrb.w	r2, [r0], #1
 801039a:	3a30      	subs	r2, #48	@ 0x30
 801039c:	2a09      	cmp	r2, #9
 801039e:	d903      	bls.n	80103a8 <_vfiprintf_r+0x1cc>
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d0c6      	beq.n	8010332 <_vfiprintf_r+0x156>
 80103a4:	9105      	str	r1, [sp, #20]
 80103a6:	e7c4      	b.n	8010332 <_vfiprintf_r+0x156>
 80103a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80103ac:	4604      	mov	r4, r0
 80103ae:	2301      	movs	r3, #1
 80103b0:	e7f0      	b.n	8010394 <_vfiprintf_r+0x1b8>
 80103b2:	ab03      	add	r3, sp, #12
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	462a      	mov	r2, r5
 80103b8:	4b12      	ldr	r3, [pc, #72]	@ (8010404 <_vfiprintf_r+0x228>)
 80103ba:	a904      	add	r1, sp, #16
 80103bc:	4630      	mov	r0, r6
 80103be:	f7fd fcab 	bl	800dd18 <_printf_float>
 80103c2:	4607      	mov	r7, r0
 80103c4:	1c78      	adds	r0, r7, #1
 80103c6:	d1d6      	bne.n	8010376 <_vfiprintf_r+0x19a>
 80103c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103ca:	07d9      	lsls	r1, r3, #31
 80103cc:	d405      	bmi.n	80103da <_vfiprintf_r+0x1fe>
 80103ce:	89ab      	ldrh	r3, [r5, #12]
 80103d0:	059a      	lsls	r2, r3, #22
 80103d2:	d402      	bmi.n	80103da <_vfiprintf_r+0x1fe>
 80103d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103d6:	f7fe fabd 	bl	800e954 <__retarget_lock_release_recursive>
 80103da:	89ab      	ldrh	r3, [r5, #12]
 80103dc:	065b      	lsls	r3, r3, #25
 80103de:	f53f af1f 	bmi.w	8010220 <_vfiprintf_r+0x44>
 80103e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103e4:	e71e      	b.n	8010224 <_vfiprintf_r+0x48>
 80103e6:	ab03      	add	r3, sp, #12
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	462a      	mov	r2, r5
 80103ec:	4b05      	ldr	r3, [pc, #20]	@ (8010404 <_vfiprintf_r+0x228>)
 80103ee:	a904      	add	r1, sp, #16
 80103f0:	4630      	mov	r0, r6
 80103f2:	f7fd ff19 	bl	800e228 <_printf_i>
 80103f6:	e7e4      	b.n	80103c2 <_vfiprintf_r+0x1e6>
 80103f8:	080108d7 	.word	0x080108d7
 80103fc:	080108e1 	.word	0x080108e1
 8010400:	0800dd19 	.word	0x0800dd19
 8010404:	080101b9 	.word	0x080101b9
 8010408:	080108dd 	.word	0x080108dd

0801040c <_raise_r>:
 801040c:	291f      	cmp	r1, #31
 801040e:	b538      	push	{r3, r4, r5, lr}
 8010410:	4605      	mov	r5, r0
 8010412:	460c      	mov	r4, r1
 8010414:	d904      	bls.n	8010420 <_raise_r+0x14>
 8010416:	2316      	movs	r3, #22
 8010418:	6003      	str	r3, [r0, #0]
 801041a:	f04f 30ff 	mov.w	r0, #4294967295
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010422:	b112      	cbz	r2, 801042a <_raise_r+0x1e>
 8010424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010428:	b94b      	cbnz	r3, 801043e <_raise_r+0x32>
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f830 	bl	8010490 <_getpid_r>
 8010430:	4622      	mov	r2, r4
 8010432:	4601      	mov	r1, r0
 8010434:	4628      	mov	r0, r5
 8010436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801043a:	f000 b817 	b.w	801046c <_kill_r>
 801043e:	2b01      	cmp	r3, #1
 8010440:	d00a      	beq.n	8010458 <_raise_r+0x4c>
 8010442:	1c59      	adds	r1, r3, #1
 8010444:	d103      	bne.n	801044e <_raise_r+0x42>
 8010446:	2316      	movs	r3, #22
 8010448:	6003      	str	r3, [r0, #0]
 801044a:	2001      	movs	r0, #1
 801044c:	e7e7      	b.n	801041e <_raise_r+0x12>
 801044e:	2100      	movs	r1, #0
 8010450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010454:	4620      	mov	r0, r4
 8010456:	4798      	blx	r3
 8010458:	2000      	movs	r0, #0
 801045a:	e7e0      	b.n	801041e <_raise_r+0x12>

0801045c <raise>:
 801045c:	4b02      	ldr	r3, [pc, #8]	@ (8010468 <raise+0xc>)
 801045e:	4601      	mov	r1, r0
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f7ff bfd3 	b.w	801040c <_raise_r>
 8010466:	bf00      	nop
 8010468:	2400002c 	.word	0x2400002c

0801046c <_kill_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d07      	ldr	r5, [pc, #28]	@ (801048c <_kill_r+0x20>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	4611      	mov	r1, r2
 8010478:	602b      	str	r3, [r5, #0]
 801047a:	f7f1 f948 	bl	800170e <_kill>
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	d102      	bne.n	8010488 <_kill_r+0x1c>
 8010482:	682b      	ldr	r3, [r5, #0]
 8010484:	b103      	cbz	r3, 8010488 <_kill_r+0x1c>
 8010486:	6023      	str	r3, [r4, #0]
 8010488:	bd38      	pop	{r3, r4, r5, pc}
 801048a:	bf00      	nop
 801048c:	24000634 	.word	0x24000634

08010490 <_getpid_r>:
 8010490:	f7f1 b935 	b.w	80016fe <_getpid>

08010494 <_init>:
 8010494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010496:	bf00      	nop
 8010498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049a:	bc08      	pop	{r3}
 801049c:	469e      	mov	lr, r3
 801049e:	4770      	bx	lr

080104a0 <_fini>:
 80104a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a2:	bf00      	nop
 80104a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104a6:	bc08      	pop	{r3}
 80104a8:	469e      	mov	lr, r3
 80104aa:	4770      	bx	lr
