
Default-H723ZG-20241115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104a4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08010778  08010778  00011778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010b88  08010b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010b90  08010b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010b94  08010b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08010b98  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000548  240001e8  08010d80  000121e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000730  08010d80  00012730  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024117  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043cc  00000000  00000000  0003632d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b98  00000000  00000000  0003a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000156e  00000000  00000000  0003c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000383f0  00000000  00000000  0003d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000276b6  00000000  00000000  00075bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167adb  00000000  00000000  0009d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00204d87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083ac  00000000  00000000  00204dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  0020d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801075c 	.word	0x0801075c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0801075c 	.word	0x0801075c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2224      	movs	r2, #36	@ 0x24
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00e f992 	bl	800e9f2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b39      	ldr	r3, [pc, #228]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006d0:	4a39      	ldr	r2, [pc, #228]	@ (80007b8 <MX_ADC1_Init+0x108>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006d4:	4b37      	ldr	r3, [pc, #220]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006de:	2208      	movs	r2, #8
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e2:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006e8:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006ea:	2208      	movs	r2, #8
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_ADC1_Init+0x104>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_ADC1_Init+0x104>)
 800070a:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_ADC1_Init+0x104>)
 800071a:	2201      	movs	r2, #1
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000726:	2200      	movs	r2, #0
 8000728:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC1_Init+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000734:	2201      	movs	r2, #1
 8000736:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000738:	481e      	ldr	r0, [pc, #120]	@ (80007b4 <MX_ADC1_Init+0x104>)
 800073a:	f001 ffed 	bl	8002718 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000744:	f001 f80d 	bl	8001762 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000754:	f003 fbb8 	bl	8003ec8 <HAL_ADCEx_MultiModeConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800075e:	f001 f800 	bl	8001762 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_ADC1_Init+0x10c>)
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000766:	2306      	movs	r3, #6
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800076a:	2305      	movs	r3, #5
 800076c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_ADC1_Init+0x110>)
 8000770:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000772:	2304      	movs	r3, #4
 8000774:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_ADC1_Init+0x104>)
 8000780:	f002 fb24 	bl	8002dcc <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800078a:	f000 ffea 	bl	8001762 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_ADC1_Init+0x114>)
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000792:	230c      	movs	r3, #12
 8000794:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_ADC1_Init+0x104>)
 800079c:	f002 fb16 	bl	8002dcc <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007a6:	f000 ffdc 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000204 	.word	0x24000204
 80007b8:	40022000 	.word	0x40022000
 80007bc:	0c900008 	.word	0x0c900008
 80007c0:	47ff0000 	.word	0x47ff0000
 80007c4:	08600004 	.word	0x08600004

080007c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2224      	movs	r2, #36	@ 0x24
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00e f90c 	bl	800e9f2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007da:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007dc:	4a33      	ldr	r2, [pc, #204]	@ (80008ac <MX_ADC2_Init+0xe4>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007e0:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000808:	2202      	movs	r2, #2
 800080a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000820:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000822:	2203      	movs	r2, #3
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000828:	2200      	movs	r2, #0
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 800083c:	2201      	movs	r2, #1
 800083e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000840:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000842:	f001 ff69 	bl	8002718 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800084c:	f000 ff89 	bl	8001762 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_ADC2_Init+0xe8>)
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000854:	2306      	movs	r3, #6
 8000856:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000858:	2304      	movs	r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000876:	f002 faa9 	bl	8002dcc <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000880:	f000 ff6f 	bl	8001762 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_ADC2_Init+0xec>)
 8000886:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000888:	230c      	movs	r3, #12
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC2_Init+0xe0>)
 8000892:	f002 fa9b 	bl	8002dcc <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 800089c:	f000 ff61 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000274 	.word	0x24000274
 80008ac:	40022100 	.word	0x40022100
 80008b0:	3ef08000 	.word	0x3ef08000
 80008b4:	4fb80000 	.word	0x4fb80000

080008b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a76      	ldr	r2, [pc, #472]	@ (8000ab0 <HAL_ADC_MspInit+0x1f8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d17e      	bne.n	80009d8 <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008da:	4b76      	ldr	r3, [pc, #472]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	4a74      	ldr	r2, [pc, #464]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80008e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008e4:	4b73      	ldr	r3, [pc, #460]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d10e      	bne.n	800090a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008ec:	4b72      	ldr	r3, [pc, #456]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 80008ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008f2:	4a71      	ldr	r2, [pc, #452]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008fc:	4b6e      	ldr	r3, [pc, #440]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 80008fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a69      	ldr	r2, [pc, #420]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b67      	ldr	r3, [pc, #412]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000928:	4b63      	ldr	r3, [pc, #396]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a62      	ldr	r2, [pc, #392]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000946:	23c0      	movs	r3, #192	@ 0xc0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4858      	ldr	r0, [pc, #352]	@ (8000abc <HAL_ADC_MspInit+0x204>)
 800095a:	f006 fb11 	bl	8006f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800095e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4853      	ldr	r0, [pc, #332]	@ (8000ac0 <HAL_ADC_MspInit+0x208>)
 8000974:	f006 fb04 	bl	8006f80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8000978:	4b52      	ldr	r3, [pc, #328]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 800097a:	4a53      	ldr	r2, [pc, #332]	@ (8000ac8 <HAL_ADC_MspInit+0x210>)
 800097c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800097e:	4b51      	ldr	r3, [pc, #324]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 8000980:	2209      	movs	r2, #9
 8000982:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000984:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800098a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000990:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 8000992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000996:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000998:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 800099a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800099e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a0:	4b48      	ldr	r3, [pc, #288]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80009a8:	4b46      	ldr	r3, [pc, #280]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b4:	4b43      	ldr	r3, [pc, #268]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009ba:	4842      	ldr	r0, [pc, #264]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009bc:	f003 fca8 	bl	8004310 <HAL_DMA_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80009c6:	f000 fecc 	bl	8001762 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80009d0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ac4 <HAL_ADC_MspInit+0x20c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009d6:	e067      	b.n	8000aa8 <HAL_ADC_MspInit+0x1f0>
  else if(adcHandle->Instance==ADC2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a3b      	ldr	r2, [pc, #236]	@ (8000acc <HAL_ADC_MspInit+0x214>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d162      	bne.n	8000aa8 <HAL_ADC_MspInit+0x1f0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009e2:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a32      	ldr	r2, [pc, #200]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80009ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009ec:	4b31      	ldr	r3, [pc, #196]	@ (8000ab4 <HAL_ADC_MspInit+0x1fc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d10e      	bne.n	8000a12 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009f4:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 80009f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009fa:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a04:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a0a:	f003 0320 	and.w	r3, r3, #32
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a27      	ldr	r2, [pc, #156]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <HAL_ADC_MspInit+0x200>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000a30:	23a8      	movs	r3, #168	@ 0xa8
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <HAL_ADC_MspInit+0x204>)
 8000a44:	f006 fa9c 	bl	8006f80 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream0;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_ADC_MspInit+0x21c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a7e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a8c:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000a8e:	f003 fc3f 	bl	8004310 <HAL_DMA_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8000a98:	f000 fe63 	bl	8001762 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000aa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <HAL_ADC_MspInit+0x218>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	@ 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40022000 	.word	0x40022000
 8000ab4:	240003d4 	.word	0x240003d4
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	58020000 	.word	0x58020000
 8000ac0:	58021400 	.word	0x58021400
 8000ac4:	240002e4 	.word	0x240002e4
 8000ac8:	40020028 	.word	0x40020028
 8000acc:	40022100 	.word	0x40022100
 8000ad0:	2400035c 	.word	0x2400035c
 8000ad4:	40020010 	.word	0x40020010

08000ad8 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_CORDIC_Init+0x24>)
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <MX_CORDIC_Init+0x28>)
 8000ae0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_CORDIC_Init+0x24>)
 8000ae4:	f003 fad2 	bl	800408c <HAL_CORDIC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000aee:	f000 fe38 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  CORDIC->CSR = 0x00600052;
 8000af2:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <MX_CORDIC_Init+0x28>)
 8000af4:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <MX_CORDIC_Init+0x2c>)
 8000af6:	601a      	str	r2, [r3, #0]


  /* USER CODE END CORDIC_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	240003d8 	.word	0x240003d8
 8000b00:	48024400 	.word	0x48024400
 8000b04:	00600052 	.word	0x00600052

08000b08 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_CORDIC_MspInit+0x3c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10e      	bne.n	8000b38 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_CORDIC_MspInit+0x40>)
 8000b1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b20:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <HAL_CORDIC_MspInit+0x40>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b26:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <HAL_CORDIC_MspInit+0x40>)
 8000b2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	48024400 	.word	0x48024400
 8000b48:	58024400 	.word	0x58024400

08000b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_DMA_Init+0x4c>)
 8000b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <MX_DMA_Init+0x4c>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <MX_DMA_Init+0x4c>)
 8000b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	200b      	movs	r0, #11
 8000b76:	f003 fb96 	bl	80042a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f003 fbad 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	200c      	movs	r0, #12
 8000b86:	f003 fb8e 	bl	80042a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f003 fba5 	bl	80042da <HAL_NVIC_EnableIRQ>

}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	58024400 	.word	0x58024400

08000b9c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b80      	ldr	r3, [pc, #512]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a7e      	ldr	r2, [pc, #504]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd0:	4b78      	ldr	r3, [pc, #480]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a77      	ldr	r2, [pc, #476]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b74      	ldr	r3, [pc, #464]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	4b71      	ldr	r3, [pc, #452]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a6f      	ldr	r2, [pc, #444]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b69      	ldr	r3, [pc, #420]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a68      	ldr	r2, [pc, #416]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b65      	ldr	r3, [pc, #404]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b62      	ldr	r3, [pc, #392]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a60      	ldr	r2, [pc, #384]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b5a      	ldr	r3, [pc, #360]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	4a59      	ldr	r2, [pc, #356]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c58:	4b56      	ldr	r3, [pc, #344]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4b53      	ldr	r3, [pc, #332]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	4a51      	ldr	r2, [pc, #324]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c76:	4b4f      	ldr	r3, [pc, #316]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c84:	4b4b      	ldr	r3, [pc, #300]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c94:	4b47      	ldr	r3, [pc, #284]	@ (8000db4 <MX_GPIO_Init+0x218>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Relay_2_Pin|Relay_3_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	4844      	ldr	r0, [pc, #272]	@ (8000db8 <MX_GPIO_Init+0x21c>)
 8000ca8:	f006 fb12 	bl	80072d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000cb2:	4842      	ldr	r0, [pc, #264]	@ (8000dbc <MX_GPIO_Init+0x220>)
 8000cb4:	f006 fb0c 	bl	80072d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|Relay_0_Pin|Relay_1_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f240 4103 	movw	r1, #1027	@ 0x403
 8000cbe:	4840      	ldr	r0, [pc, #256]	@ (8000dc0 <MX_GPIO_Init+0x224>)
 8000cc0:	f006 fb06 	bl	80072d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	483e      	ldr	r0, [pc, #248]	@ (8000dc4 <MX_GPIO_Init+0x228>)
 8000cca:	f006 fb01 	bl	80072d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4838      	ldr	r0, [pc, #224]	@ (8000dc8 <MX_GPIO_Init+0x22c>)
 8000ce6:	f006 f94b 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Relay_2_Pin|Relay_3_Pin;
 8000cea:	2303      	movs	r3, #3
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0x21c>)
 8000d02:	f006 f93d 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d06:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4827      	ldr	r0, [pc, #156]	@ (8000dbc <MX_GPIO_Init+0x220>)
 8000d20:	f006 f92e 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|Relay_0_Pin|Relay_1_Pin;
 8000d24:	f240 4303 	movw	r3, #1027	@ 0x403
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4820      	ldr	r0, [pc, #128]	@ (8000dc0 <MX_GPIO_Init+0x224>)
 8000d3e:	f006 f91f 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	481d      	ldr	r0, [pc, #116]	@ (8000dcc <MX_GPIO_Init+0x230>)
 8000d58:	f006 f912 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <MX_GPIO_Init+0x234>)
 8000d7a:	f006 f901 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <MX_GPIO_Init+0x228>)
 8000d96:	f006 f8f3 	bl	8006f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2028      	movs	r0, #40	@ 0x28
 8000da0:	f003 fa81 	bl	80042a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da4:	2028      	movs	r0, #40	@ 0x28
 8000da6:	f003 fa98 	bl	80042da <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	@ 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58021400 	.word	0x58021400
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	58020c00 	.word	0x58020c00
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	58021800 	.word	0x58021800
 8000dd0:	58020000 	.word	0x58020000

08000dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <MX_I2C1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0D7FF;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <MX_I2C1_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000e10:	f006 faac 	bl	800736c <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fca2 	bl	8001762 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000e22:	f006 fe71 	bl	8007b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fc99 	bl	8001762 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_I2C1_Init+0x74>)
 8000e34:	f006 feb3 	bl	8007b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fc90 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000400 	.word	0x24000400
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	10c0d7ff 	.word	0x10c0d7ff

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0b8      	sub	sp, #224	@ 0xe0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	22b8      	movs	r2, #184	@ 0xb8
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00d fdbc 	bl	800e9f2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a27      	ldr	r2, [pc, #156]	@ (8000f1c <HAL_I2C_MspInit+0xc8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d146      	bne.n	8000f12 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e84:	f04f 0208 	mov.w	r2, #8
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f007 fe6c 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ea6:	f000 fc5c 	bl	8001762 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <HAL_I2C_MspInit+0xd0>)
 8000ef0:	f006 f846 	bl	8006f80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efa:	4a09      	ldr	r2, [pc, #36]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	37e0      	adds	r7, #224	@ 0xe0
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	58024400 	.word	0x58024400
 8000f24:	58020400 	.word	0x58020400

08000f28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f32:	4a34      	ldr	r2, [pc, #208]	@ (8001004 <HD44780_Init+0xdc>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f38:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <HD44780_Init+0xe0>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f3e:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HD44780_Init+0xe4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f44:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <HD44780_Init+0xdc>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d907      	bls.n	8000f5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <HD44780_Init+0xe4>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <HD44780_Init+0xe4>)
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e006      	b.n	8000f6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HD44780_Init+0xe4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b29      	ldr	r3, [pc, #164]	@ (800100c <HD44780_Init+0xe4>)
 8000f68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f6a:	f000 f9cd 	bl	8001308 <DelayInit>
  HAL_Delay(50);
 8000f6e:	2032      	movs	r0, #50	@ 0x32
 8000f70:	f001 f892 	bl	8002098 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <HD44780_Init+0xe0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f98b 	bl	8001294 <ExpanderWrite>
  HAL_Delay(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f82:	f001 f889 	bl	8002098 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f86:	2030      	movs	r0, #48	@ 0x30
 8000f88:	f000 f972 	bl	8001270 <Write4Bits>
  DelayUS(4500);
 8000f8c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f90:	f000 f9e4 	bl	800135c <DelayUS>

  Write4Bits(0x03 << 4);
 8000f94:	2030      	movs	r0, #48	@ 0x30
 8000f96:	f000 f96b 	bl	8001270 <Write4Bits>
  DelayUS(4500);
 8000f9a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f9e:	f000 f9dd 	bl	800135c <DelayUS>
//  DelayUS(4500);
//
//  Write4Bits(0x02 << 4);
//  DelayUS(100);

  Write4Bits(0x03 << 4);
 8000fa2:	2030      	movs	r0, #48	@ 0x30
 8000fa4:	f000 f964 	bl	8001270 <Write4Bits>
  DelayUS(150);
 8000fa8:	2096      	movs	r0, #150	@ 0x96
 8000faa:	f000 f9d7 	bl	800135c <DelayUS>

  Write4Bits(0x02 << 4);
 8000fae:	2020      	movs	r0, #32
 8000fb0:	f000 f95e 	bl	8001270 <Write4Bits>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HD44780_Init+0xe4>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f919 	bl	80011f6 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HD44780_Init+0xe8>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000fca:	f000 f887 	bl	80010dc <HD44780_Display>
  HD44780_Clear();
 8000fce:	f000 f827 	bl	8001020 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HD44780_Init+0xec>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HD44780_Init+0xec>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f907 	bl	80011f6 <SendCommand>
//  DelayUS(4500);
//
  HD44780_CreateSpecialChar(0, special1);
 8000fe8:	490b      	ldr	r1, [pc, #44]	@ (8001018 <HD44780_Init+0xf0>)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f8b8 	bl	8001160 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000ff0:	490a      	ldr	r1, [pc, #40]	@ (800101c <HD44780_Init+0xf4>)
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 f8b4 	bl	8001160 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000ff8:	f000 f81d 	bl	8001036 <HD44780_Home>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24000457 	.word	0x24000457
 8001008:	24000458 	.word	0x24000458
 800100c:	24000454 	.word	0x24000454
 8001010:	24000455 	.word	0x24000455
 8001014:	24000456 	.word	0x24000456
 8001018:	24000000 	.word	0x24000000
 800101c:	24000008 	.word	0x24000008

08001020 <HD44780_Clear>:

void HD44780_Clear()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 f8e6 	bl	80011f6 <SendCommand>
  DelayUS(2000);
 800102a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800102e:	f000 f995 	bl	800135c <DelayUS>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}

08001036 <HD44780_Home>:

void HD44780_Home()
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800103a:	2002      	movs	r0, #2
 800103c:	f000 f8db 	bl	80011f6 <SendCommand>
  DelayUS(2000);
 8001040:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001044:	f000 f98a 	bl	800135c <DelayUS>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HD44780_SetCursor+0x5c>)
 800105e:	f107 0408 	add.w	r4, r7, #8
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HD44780_SetCursor+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	79ba      	ldrb	r2, [r7, #6]
 800106e:	429a      	cmp	r2, r3
 8001070:	d303      	bcc.n	800107a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HD44780_SetCursor+0x60>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3318      	adds	r3, #24
 8001080:	443b      	add	r3, r7
 8001082:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4413      	add	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001094:	b25b      	sxtb	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f8ac 	bl	80011f6 <SendCommand>
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	08010778 	.word	0x08010778
 80010ac:	24000457 	.word	0x24000457

080010b0 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HD44780_NoDisplay+0x28>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HD44780_NoDisplay+0x28>)
 80010c0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HD44780_NoDisplay+0x28>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f892 	bl	80011f6 <SendCommand>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000455 	.word	0x24000455

080010dc <HD44780_Display>:

void HD44780_Display()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HD44780_Display+0x28>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HD44780_Display+0x28>)
 80010ec:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HD44780_Display+0x28>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f87c 	bl	80011f6 <SendCommand>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000455 	.word	0x24000455

08001108 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HD44780_Cursor+0x28>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HD44780_Cursor+0x28>)
 8001118:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HD44780_Cursor+0x28>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f866 	bl	80011f6 <SendCommand>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000455 	.word	0x24000455

08001134 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HD44780_Blink+0x28>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HD44780_Blink+0x28>)
 8001144:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HD44780_Blink+0x28>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f850 	bl	80011f6 <SendCommand>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24000455 	.word	0x24000455

08001160 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f837 	bl	80011f6 <SendCommand>
  for (int i=0; i<8; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e009      	b.n	80011a2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f83b 	bl	8001212 <SendChar>
  for (int i=0; i<8; i++)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddf2      	ble.n	800118e <HD44780_CreateSpecialChar+0x2e>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f827 	bl	8001212 <SendChar>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80011d4:	e006      	b.n	80011e4 <HD44780_PrintStr+0x18>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f817 	bl	8001212 <SendChar>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f4      	bne.n	80011d6 <HD44780_PrintStr+0xa>
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f812 	bl	800122e <Send>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f804 	bl	800122e <Send>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	460a      	mov	r2, r1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	4613      	mov	r3, r2
 800123c:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f023 030f 	bic.w	r3, r3, #15
 8001244:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4313      	orrs	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f80b 	bl	8001270 <Write4Bits>
  Write4Bits((lownib)|mode);
 800125a:	7bba      	ldrb	r2, [r7, #14]
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	4313      	orrs	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f804 	bl	8001270 <Write4Bits>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f809 	bl	8001294 <ExpanderWrite>
  PulseEnable(value);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f821 	bl	80012cc <PulseEnable>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <ExpanderWrite+0x30>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012aa:	f107 020f 	add.w	r2, r7, #15
 80012ae:	230a      	movs	r3, #10
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	214e      	movs	r1, #78	@ 0x4e
 80012b6:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <ExpanderWrite+0x34>)
 80012b8:	f006 f8f4 	bl	80074a4 <HAL_I2C_Master_Transmit>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000458 	.word	0x24000458
 80012c8:	24000400 	.word	0x24000400

080012cc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffd8 	bl	8001294 <ExpanderWrite>
//  DelayUS(20);
  DelayUS(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 f839 	bl	800135c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffce 	bl	8001294 <ExpanderWrite>
//  DelayUS(20);
  DelayUS(50);
 80012f8:	2032      	movs	r0, #50	@ 0x32
 80012fa:	f000 f82f 	bl	800135c <DelayUS>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <DelayInit>:

static void DelayInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <DelayInit+0x4c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <DelayInit+0x4c>)
 8001312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <DelayInit+0x4c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <DelayInit+0x4c>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <DelayInit+0x50>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <DelayInit+0x50>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <DelayInit+0x50>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <DelayInit+0x50>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <DelayInit+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001342:	bf00      	nop
  __ASM volatile ("NOP");
 8001344:	bf00      	nop
  __ASM volatile ("NOP");
 8001346:	bf00      	nop
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000edf0 	.word	0xe000edf0
 8001358:	e0001000 	.word	0xe0001000

0800135c <DelayUS>:

static void DelayUS(uint32_t us) {
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <DelayUS+0x44>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <DelayUS+0x48>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9a      	lsrs	r2, r3, #18
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <DelayUS+0x4c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <DelayUS+0x4c>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f6      	bhi.n	800137e <DelayUS+0x22>
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	24000010 	.word	0x24000010
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	e0001000 	.word	0xe0001000

080013ac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	2201      	movs	r2, #1
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <__io_putchar+0x20>)
 80013be:	f00a ff29 	bl	800c214 <HAL_UART_Transmit>
	return ch;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400054c 	.word	0x2400054c

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f000 fdcd 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f88f 	bl	80014fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013de:	f000 f8fb 	bl	80015d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f7ff fbdb 	bl	8000b9c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f7ff fbb1 	bl	8000b4c <MX_DMA_Init>
  MX_ADC1_Init();
 80013ea:	f7ff f961 	bl	80006b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013ee:	f000 fbc3 	bl	8001b78 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80013f2:	f000 fcd7 	bl	8001da4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80013f6:	f7ff fced 	bl	8000dd4 <MX_I2C1_Init>
  MX_TIM6_Init();
 80013fa:	f000 fc13 	bl	8001c24 <MX_TIM6_Init>
  MX_ADC2_Init();
 80013fe:	f7ff f9e3 	bl	80007c8 <MX_ADC2_Init>
  MX_CORDIC_Init();
 8001402:	f7ff fb69 	bl	8000ad8 <MX_CORDIC_Init>
  MX_TIM2_Init();
 8001406:	f000 fb6b 	bl	8001ae0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// HAL_UART_Receive_IT(&huart3, rx_buff, 7);
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800140a:	2104      	movs	r1, #4
 800140c:	4833      	ldr	r0, [pc, #204]	@ (80014dc <main+0x10c>)
 800140e:	f00a f9cb 	bl	800b7a8 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8001412:	4833      	ldr	r0, [pc, #204]	@ (80014e0 <main+0x110>)
 8001414:	f00a f86c 	bl	800b4f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001418:	4831      	ldr	r0, [pc, #196]	@ (80014e0 <main+0x110>)
 800141a:	f00a f8ef 	bl	800b5fc <HAL_TIM_Base_Stop_IT>

	// HAL_TIM_Base_Init(&htim2);
	// HAL_TIM_Base_Start(&htim2);
	// HAL_ADC_Start_DMA(&hadc1, (uint32_t *)voltage, 2);
	// HAL_ADC_Start_DMA(&hadc1, voltage, 2);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)voltage, (uint32_t) 2);
 800141e:	2202      	movs	r2, #2
 8001420:	4930      	ldr	r1, [pc, #192]	@ (80014e4 <main+0x114>)
 8001422:	4831      	ldr	r0, [pc, #196]	@ (80014e8 <main+0x118>)
 8001424:	f001 fb80 	bl	8002b28 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001428:	4830      	ldr	r0, [pc, #192]	@ (80014ec <main+0x11c>)
 800142a:	f009 ffe3 	bl	800b3f4 <HAL_TIM_Base_Start>
//    lcd_send_string ("HELLO WORLD");
//    lcd_put_cur(1, 0);
//    lcd_send_string("from CTECH");

	/* Initialize */
	HD44780_Init(2);
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fd7a 	bl	8000f28 <HD44780_Init>

	/* Clear buffer */
	HD44780_Clear();
 8001434:	f7ff fdf4 	bl	8001020 <HD44780_Clear>

	/* Hide characters */
	HD44780_NoDisplay();
 8001438:	f7ff fe3a 	bl	80010b0 <HD44780_NoDisplay>
	HD44780_Cursor();
 800143c:	f7ff fe64 	bl	8001108 <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 8001440:	2100      	movs	r1, #0
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fe02 	bl	800104c <HD44780_SetCursor>
	HD44780_PrintStr("HELLO STM32!!!");
 8001448:	4829      	ldr	r0, [pc, #164]	@ (80014f0 <main+0x120>)
 800144a:	f7ff febf 	bl	80011cc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff feaf 	bl	80011b2 <HD44780_PrintSpecialChar>
	HAL_Delay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001458:	f000 fe1e 	bl	8002098 <HAL_Delay>

	/* Show characters */
	HD44780_Display();
 800145c:	f7ff fe3e 	bl	80010dc <HD44780_Display>

	/* Move position */
	HD44780_SetCursor(0, 1);
 8001460:	2101      	movs	r1, #1
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fdf2 	bl	800104c <HD44780_SetCursor>
	HD44780_PrintStr("BYE STM32!!!");
 8001468:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <main+0x124>)
 800146a:	f7ff feaf 	bl	80011cc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fe9f 	bl	80011b2 <HD44780_PrintSpecialChar>
	HAL_Delay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f000 fe0e 	bl	8002098 <HAL_Delay>

	/* Blink cursor */
	HD44780_Blink();
 800147c:	f7ff fe5a 	bl	8001134 <HD44780_Blink>
//    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
//    HAL_Delay(500);
//  }
//
	char snum[5];
	for (int x = 1; x <= 200; x++) {
 8001480:	2301      	movs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e015      	b.n	80014b2 <main+0xe2>
		itoa(x, snum, 10);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	220a      	movs	r2, #10
 800148a:	4619      	mov	r1, r3
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f00c fd2f 	bl	800def0 <itoa>
		HD44780_Clear();
 8001492:	f7ff fdc5 	bl	8001020 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8001496:	2100      	movs	r1, #0
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fdd7 	bl	800104c <HD44780_SetCursor>
		HD44780_PrintStr(snum);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe93 	bl	80011cc <HD44780_PrintStr>
		HAL_Delay(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f000 fdf6 	bl	8002098 <HAL_Delay>
	for (int x = 1; x <= 200; x++) {
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80014b6:	dde6      	ble.n	8001486 <main+0xb6>
	}


	HAL_TIM_Base_Start_IT(&htim6);
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <main+0x110>)
 80014ba:	f00a f819 	bl	800b4f0 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		while(adc_ready != 1){
 80014be:	bf00      	nop
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <main+0x128>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d1fb      	bne.n	80014c0 <main+0xf0>

		}
		adc_ready = 0;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <main+0x128>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)voltage, (uint32_t) 2);
 80014ce:	2202      	movs	r2, #2
 80014d0:	4904      	ldr	r1, [pc, #16]	@ (80014e4 <main+0x114>)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <main+0x118>)
 80014d4:	f001 fb28 	bl	8002b28 <HAL_ADC_Start_DMA>
		while(adc_ready != 1){
 80014d8:	e7f1      	b.n	80014be <main+0xee>
 80014da:	bf00      	nop
 80014dc:	240004b4 	.word	0x240004b4
 80014e0:	24000500 	.word	0x24000500
 80014e4:	2400045c 	.word	0x2400045c
 80014e8:	24000204 	.word	0x24000204
 80014ec:	24000468 	.word	0x24000468
 80014f0:	08010788 	.word	0x08010788
 80014f4:	08010798 	.word	0x08010798
 80014f8:	24000460 	.word	0x24000460

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b09c      	sub	sp, #112	@ 0x70
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001506:	224c      	movs	r2, #76	@ 0x4c
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f00d fa71 	bl	800e9f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2220      	movs	r2, #32
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00d fa6b 	bl	800e9f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800151c:	2002      	movs	r0, #2
 800151e:	f006 fb8b 	bl	8007c38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <SystemClock_Config+0xd8>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <SystemClock_Config+0xd8>)
 800152c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <SystemClock_Config+0xd8>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800153e:	bf00      	nop
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <SystemClock_Config+0xd8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154c:	d1f8      	bne.n	8001540 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154e:	2302      	movs	r3, #2
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001552:	2301      	movs	r3, #1
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001556:	2340      	movs	r3, #64	@ 0x40
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155e:	2300      	movs	r3, #0
 8001560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001562:	2304      	movs	r3, #4
 8001564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001566:	230c      	movs	r3, #12
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001576:	230c      	movs	r3, #12
 8001578:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800157a:	2300      	movs	r3, #0
 800157c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4618      	mov	r0, r3
 8001588:	f006 fb90 	bl	8007cac <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001592:	f000 f8e6 	bl	8001762 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	233f      	movs	r3, #63	@ 0x3f
 8001598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2303      	movs	r3, #3
 800159c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015a6:	2340      	movs	r3, #64	@ 0x40
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015b4:	2340      	movs	r3, #64	@ 0x40
 80015b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 ff4f 	bl	8008460 <HAL_RCC_ClockConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80015c8:	f000 f8cb 	bl	8001762 <Error_Handler>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3770      	adds	r7, #112	@ 0x70
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024800 	.word	0x58024800

080015d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ae      	sub	sp, #184	@ 0xb8
 80015dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	22b8      	movs	r2, #184	@ 0xb8
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00d fa04 	bl	800e9f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 13;
 80015fa:	230d      	movs	r3, #13
 80015fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80015fe:	2303      	movs	r3, #3
 8001600:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800160a:	23c0      	movs	r3, #192	@ 0xc0
 800160c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4618      	mov	r0, r3
 8001622:	f007 faa9 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800162c:	f000 f899 	bl	8001762 <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	37b8      	adds	r7, #184	@ 0xb8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_TIM_PeriodElapsedCallback>:
	// memset(rx_buff,0 , sizeof(rx_buff));
	// strcpy(rx_buff, tx_buff);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
//	char scount[10];

	char x1_col_str[10];
	char x2_col_str[10];

	int Direction = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
	int CaptureNumber = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]

	if(htim->Instance == TIM2){
		// HAL_ADC_Start_DMA(&hadc1, (uint32_t *)voltage, 2);
	}

	if (htim->Instance == TIM6) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d14b      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0xb2>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001652:	2101      	movs	r1, #1
 8001654:	4828      	ldr	r0, [pc, #160]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001656:	f005 fe54 	bl	8007302 <HAL_GPIO_TogglePin>

		Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
		CaptureNumber = (short) __HAL_TIM_GET_COUNTER(&htim4);
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	b21b      	sxth	r3, r3
 8001678:	623b      	str	r3, [r7, #32]
		__HAL_TIM_GET_COUNTER(&htim4) = 0;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 10);
//		ADC_ConvertedValue = HAL_ADC_GetValue(&hadc1);
//		printf("ADC_ConvertedValue : %d\n", (int)ADC_ConvertedValue);

		HD44780_Clear();
 8001682:	f7ff fccd 	bl	8001020 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fcdf 	bl	800104c <HD44780_SetCursor>
		HD44780_PrintStr("X:");
 800168e:	481c      	ldr	r0, [pc, #112]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001690:	f7ff fd9c 	bl	80011cc <HD44780_PrintStr>
		HD44780_SetCursor(2, 0);
 8001694:	2100      	movs	r1, #0
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fcd8 	bl	800104c <HD44780_SetCursor>
		itoa(voltage[0], x1_col_str,10);
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	220a      	movs	r2, #10
 80016a8:	4619      	mov	r1, r3
 80016aa:	f00c fc21 	bl	800def0 <itoa>
		HD44780_PrintStr(x1_col_str);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fd8a 	bl	80011cc <HD44780_PrintStr>


		HD44780_SetCursor(0, 1);
 80016b8:	2101      	movs	r1, #1
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fcc6 	bl	800104c <HD44780_SetCursor>
		HD44780_PrintStr("Y:");
 80016c0:	4811      	ldr	r0, [pc, #68]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016c2:	f7ff fd83 	bl	80011cc <HD44780_PrintStr>
		HD44780_SetCursor(2, 1);
 80016c6:	2101      	movs	r1, #1
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff fcbf 	bl	800104c <HD44780_SetCursor>

		itoa(voltage[1], x2_col_str,10);
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80016d0:	885b      	ldrh	r3, [r3, #2]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	220a      	movs	r2, #10
 80016da:	4619      	mov	r1, r3
 80016dc:	f00c fc08 	bl	800def0 <itoa>
		HD44780_PrintStr(x2_col_str);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fd71 	bl	80011cc <HD44780_PrintStr>

	}
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	@ 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40001000 	.word	0x40001000
 80016f8:	58020400 	.word	0x58020400
 80016fc:	240004b4 	.word	0x240004b4
 8001700:	080107a8 	.word	0x080107a8
 8001704:	2400045c 	.word	0x2400045c
 8001708:	080107ac 	.word	0x080107ac

0800170c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC2) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a08      	ldr	r2, [pc, #32]	@ (800173c <HAL_ADC_ConvCpltCallback+0x30>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00a      	beq.n	8001734 <HAL_ADC_ConvCpltCallback+0x28>
		//HAL_ADC_Start_DMA(&hadc2, (uint32_t *)voltage, 2);
//		printf("Voltage[0]: %d\n", (int) voltage[0]);
//		printf("Voltage[1]: %d\n", (int) voltage[1]);
	}else if(hadc->Instance == ADC1){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_ADC_ConvCpltCallback+0x34>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d105      	bne.n	8001734 <HAL_ADC_ConvCpltCallback+0x28>
		// Do not thing!
		// HAL_ADC_Start_DMA(&hadc1, (uint32_t *)voltage, 2);
		adc_ready = 1;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_ADC_ConvCpltCallback+0x38>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 800172e:	4806      	ldr	r0, [pc, #24]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001730:	f001 fad6 	bl	8002ce0 <HAL_ADC_Stop_DMA>

	}
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40022100 	.word	0x40022100
 8001740:	40022000 	.word	0x40022000
 8001744:	24000460 	.word	0x24000460
 8001748:	24000204 	.word	0x24000204

0800174c <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 10);
//		ADC_ConvertedValue = HAL_ADC_GetValue(&hadc1);
//		printf("ADC_ConvertedValue : %d\n", (int)ADC_ConvertedValue);
	}
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001766:	b672      	cpsid	i
}
 8001768:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_MspInit+0x30>)
 8001778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_MspInit+0x30>)
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_MspInit+0x30>)
 8001788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	58024400 	.word	0x58024400

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 fc2d 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Stream0_IRQHandler+0x10>)
 800180a:	f004 f8a7 	bl	800595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2400035c 	.word	0x2400035c

08001818 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Stream1_IRQHandler+0x10>)
 800181e:	f004 f89d 	bl	800595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	240002e4 	.word	0x240002e4

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART3_IRQHandler+0x10>)
 8001832:	f00a fd7d 	bl	800c330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2400054c 	.word	0x2400054c

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8001844:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001848:	f005 fd75 	bl	8007336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f00a f835 	bl	800b8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24000500 	.word	0x24000500

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187e:	f00d f90b 	bl	800ea98 <__errno>
 8001882:	4603      	mov	r3, r0
 8001884:	2216      	movs	r2, #22
 8001886:	601a      	str	r2, [r3, #0]
  return -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_exit>:

void _exit (int status)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffe7 	bl	8001874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <_exit+0x12>

080018aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
  }

  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e009      	b.n	800190a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fd54 	bl	80013ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf1      	blt.n	80018f6 <_write+0x12>
  }
  return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	605a      	str	r2, [r3, #4]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f00d f870 	bl	800ea98 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	24050000 	.word	0x24050000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	24000464 	.word	0x24000464
 80019ec:	24000730 	.word	0x24000730

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <SystemInit+0xd0>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a31      	ldr	r2, [pc, #196]	@ (8001ac0 <SystemInit+0xd0>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <SystemInit+0xd4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d807      	bhi.n	8001a20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <SystemInit+0xd4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 030f 	bic.w	r3, r3, #15
 8001a18:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <SystemInit+0xd4>)
 8001a1a:	f043 0307 	orr.w	r3, r3, #7
 8001a1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <SystemInit+0xd8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a28      	ldr	r2, [pc, #160]	@ (8001ac8 <SystemInit+0xd8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <SystemInit+0xd8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <SystemInit+0xd8>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4924      	ldr	r1, [pc, #144]	@ (8001ac8 <SystemInit+0xd8>)
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <SystemInit+0xdc>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <SystemInit+0xd4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <SystemInit+0xd4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 030f 	bic.w	r3, r3, #15
 8001a52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <SystemInit+0xd4>)
 8001a54:	f043 0307 	orr.w	r3, r3, #7
 8001a58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <SystemInit+0xd8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <SystemInit+0xd8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <SystemInit+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <SystemInit+0xd8>)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <SystemInit+0xe0>)
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <SystemInit+0xd8>)
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <SystemInit+0xe4>)
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <SystemInit+0xd8>)
 8001a7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ad8 <SystemInit+0xe8>)
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <SystemInit+0xd8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <SystemInit+0xd8>)
 8001a86:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <SystemInit+0xe8>)
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <SystemInit+0xd8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <SystemInit+0xd8>)
 8001a92:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <SystemInit+0xe8>)
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <SystemInit+0xd8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <SystemInit+0xd8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <SystemInit+0xd8>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <SystemInit+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <SystemInit+0xec>)
 8001ab0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ab4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	52002000 	.word	0x52002000
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ad0:	02020200 	.word	0x02020200
 8001ad4:	01ff0000 	.word	0x01ff0000
 8001ad8:	01010280 	.word	0x01010280
 8001adc:	52004000 	.word	0x52004000

08001ae0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8-1;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b26:	f009 fc0d 	bl	800b344 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b30:	f7ff fe17 	bl	8001762 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b42:	f009 ffc7 	bl	800bad4 <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f7ff fe09 	bl	8001762 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b50:	2320      	movs	r3, #32
 8001b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b5e:	f00a fa4f 	bl	800c000 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f7ff fdfb 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24000468 	.word	0x24000468

08001b78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00c ff33 	bl	800e9f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001b98:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <MX_TIM4_Init+0xa8>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001be8:	f009 fd38 	bl	800b65c <HAL_TIM_Encoder_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bf2:	f7ff fdb6 	bl	8001762 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM4_Init+0xa4>)
 8001c04:	f00a f9fc 	bl	800c000 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c0e:	f7ff fda8 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	240004b4 	.word	0x240004b4
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c36:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <MX_TIM6_Init+0x6c>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19200-1;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c3c:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8001c40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c4a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c58:	f009 fb74 	bl	800b344 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c62:	f7ff fd7e 	bl	8001762 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <MX_TIM6_Init+0x68>)
 8001c74:	f00a f9c4 	bl	800c000 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c7e:	f7ff fd70 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	24000500 	.word	0x24000500
 8001c90:	40001000 	.word	0x40001000

08001c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cac:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001cc4:	e01b      	b.n	8001cfe <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM6)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_TIM_Base_MspInit+0x78>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d116      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001cd8:	f043 0310 	orr.w	r3, r3, #16
 8001cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_TIM_Base_MspInit+0x74>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2036      	movs	r0, #54	@ 0x36
 8001cf4:	f002 fad7 	bl	80042a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cf8:	2036      	movs	r0, #54	@ 0x36
 8001cfa:	f002 faee 	bl	80042da <HAL_NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	40001000 	.word	0x40001000

08001d10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12e      	bne.n	8001d90 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d38:	4a18      	ldr	r2, [pc, #96]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d56:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d6e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d80:	2302      	movs	r3, #2
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001d8c:	f005 f8f8 	bl	8006f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58020c00 	.word	0x58020c00

08001da4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001daa:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <MX_USART3_UART_Init+0x94>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dae:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dda:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dec:	4811      	ldr	r0, [pc, #68]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001dee:	f00a f9c1 	bl	800c174 <HAL_UART_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001df8:	f7ff fcb3 	bl	8001762 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001e00:	f00b ff94 	bl	800dd2c <HAL_UARTEx_SetTxFifoThreshold>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e0a:	f7ff fcaa 	bl	8001762 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4808      	ldr	r0, [pc, #32]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001e12:	f00b ffc9 	bl	800dda8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e1c:	f7ff fca1 	bl	8001762 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <MX_USART3_UART_Init+0x90>)
 8001e22:	f00b ff4a 	bl	800dcba <HAL_UARTEx_DisableFifoMode>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e2c:	f7ff fc99 	bl	8001762 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2400054c 	.word	0x2400054c
 8001e38:	40004800 	.word	0x40004800

08001e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0b8      	sub	sp, #224	@ 0xe0
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	22b8      	movs	r2, #184	@ 0xb8
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00c fdc8 	bl	800e9f2 <memset>
  if(uartHandle->Instance==USART3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2b      	ldr	r2, [pc, #172]	@ (8001f14 <HAL_UART_MspInit+0xd8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d14e      	bne.n	8001f0a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e6c:	f04f 0202 	mov.w	r2, #2
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 fe78 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e8e:	f7ff fc68 	bl	8001762 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e98:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001e9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb6:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_UART_MspInit+0xdc>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001ece:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <HAL_UART_MspInit+0xe0>)
 8001ef6:	f005 f843 	bl	8006f80 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2027      	movs	r0, #39	@ 0x27
 8001f00:	f002 f9d1 	bl	80042a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f04:	2027      	movs	r0, #39	@ 0x27
 8001f06:	f002 f9e8 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	37e0      	adds	r7, #224	@ 0xe0
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004800 	.word	0x40004800
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58020c00 	.word	0x58020c00

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f24:	f7ff fd64 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	@ (8001f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f00c fda9 	bl	800eaa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7ff fa3d 	bl	80013d0 <main>
  bx  lr
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f60:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001f64:	08010b98 	.word	0x08010b98
  ldr r2, =_sbss
 8001f68:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001f6c:	24000730 	.word	0x24000730

08001f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC3_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f002 f988 	bl	8004290 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f80:	f006 fc24 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_Init+0x68>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	4913      	ldr	r1, [pc, #76]	@ (8001fe0 <HAL_Init+0x6c>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <HAL_Init+0x68>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_Init+0x6c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <HAL_Init+0x70>)
 8001fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_Init+0x74>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f814 	bl	8001fec <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e002      	b.n	8001fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fbcf 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	080107b0 	.word	0x080107b0
 8001fe4:	24000014 	.word	0x24000014
 8001fe8:	24000010 	.word	0x24000010

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_InitTick+0x60>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e021      	b.n	8002044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <HAL_InitTick+0x64>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_InitTick+0x60>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f002 f96d 	bl	80042f6 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f002 f937 	bl	80042a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <HAL_InitTick+0x68>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2400001c 	.word	0x2400001c
 8002050:	24000010 	.word	0x24000010
 8002054:	24000018 	.word	0x24000018

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	2400001c 	.word	0x2400001c
 800207c:	240005e0 	.word	0x240005e0

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	@ (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	240005e0 	.word	0x240005e0

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d005      	beq.n	80020be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_Delay+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020be:	bf00      	nop
 80020c0:	f7ff ffde 	bl	8002080 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d8f7      	bhi.n	80020c0 <HAL_Delay+0x28>
  {
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2400001c 	.word	0x2400001c

080020e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3360      	adds	r3, #96	@ 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <LL_ADC_SetOffset+0x60>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d10b      	bne.n	8002184 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002182:	e00b      	b.n	800219c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	58026000 	.word	0x58026000

080021ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3360      	adds	r3, #96	@ 0x60
 80021ba:	461a      	mov	r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	611a      	str	r2, [r3, #16]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3360      	adds	r3, #96	@ 0x60
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]
  }
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	58026000 	.word	0x58026000

08002250 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <LL_ADC_SetOffsetSaturation+0x40>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10e      	bne.n	8002282 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3360      	adds	r3, #96	@ 0x60
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	58026000 	.word	0x58026000

08002294 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <LL_ADC_SetOffsetSign+0x40>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10e      	bne.n	80022c6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3360      	adds	r3, #96	@ 0x60
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	58026000 	.word	0x58026000

080022d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3360      	adds	r3, #96	@ 0x60
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <LL_ADC_SetOffsetState+0x50>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800230a:	e007      	b.n	800231c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	431a      	orrs	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	58026000 	.word	0x58026000

0800232c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002352:	b480      	push	{r7}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3330      	adds	r3, #48	@ 0x30
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	211f      	movs	r1, #31
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 011f 	and.w	r1, r3, #31
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f023 0203 	bic.w	r2, r3, #3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d107      	bne.n	8002412 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60da      	str	r2, [r3, #12]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	58026000 	.word	0x58026000

08002424 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3314      	adds	r3, #20
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0e5b      	lsrs	r3, r3, #25
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	0d1b      	lsrs	r3, r3, #20
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2107      	movs	r1, #7
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	401a      	ands	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	0d1b      	lsrs	r3, r3, #20
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d115      	bne.n	80024bc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0318 	and.w	r3, r3, #24
 80024a6:	4914      	ldr	r1, [pc, #80]	@ (80024f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024a8:	40d9      	lsrs	r1, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	400b      	ands	r3, r1
 80024ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b2:	431a      	orrs	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80024ba:	e014      	b.n	80024e6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c8:	43db      	mvns	r3, r3
 80024ca:	401a      	ands	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0318 	and.w	r3, r3, #24
 80024d2:	4909      	ldr	r1, [pc, #36]	@ (80024f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024d4:	40d9      	lsrs	r1, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	400b      	ands	r3, r1
 80024da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	58026000 	.word	0x58026000
 80024f8:	000fffff 	.word	0x000fffff

080024fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 031f 	and.w	r3, r3, #31
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6093      	str	r3, [r2, #8]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	5fffffc0 	.word	0x5fffffc0

0800253c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800254c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002550:	d101      	bne.n	8002556 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <LL_ADC_EnableInternalRegulator+0x24>)
 8002572:	4013      	ands	r3, r2
 8002574:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	6fffffc0 	.word	0x6fffffc0

0800258c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025a0:	d101      	bne.n	80025a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <LL_ADC_Enable+0x24>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	7fffffc0 	.word	0x7fffffc0

080025dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <LL_ADC_Disable+0x24>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	7fffffc0 	.word	0x7fffffc0

08002604 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <LL_ADC_IsEnabled+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_ADC_IsEnabled+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d101      	bne.n	8002642 <LL_ADC_IsDisableOngoing+0x18>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_ADC_IsDisableOngoing+0x1a>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <LL_ADC_REG_StartConversion+0x24>)
 800265e:	4013      	ands	r3, r2
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	7fffffc0 	.word	0x7fffffc0

08002678 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <LL_ADC_REG_StopConversion+0x24>)
 8002686:	4013      	ands	r3, r2
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	7fffffc0 	.word	0x7fffffc0

080026a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d101      	bne.n	80026b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <LL_ADC_INJ_StopConversion+0x24>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	7fffffc0 	.word	0x7fffffc0

080026f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b08      	cmp	r3, #8
 8002702:	d101      	bne.n	8002708 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1ee      	b.n	8002b10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7fe f8b9 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff feef 	bl	800253c <LL_ADC_IsDeepPowerDownEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fed5 	bl	8002518 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff0a 	bl	800258c <LL_ADC_IsInternalRegulatorEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff feee 	bl	8002564 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002788:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_ADC_Init+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	4a8e      	ldr	r2, [pc, #568]	@ (80029c8 <HAL_ADC_Init+0x2b0>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800279a:	e002      	b.n	80027a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3b01      	subs	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff feed 	bl	800258c <LL_ADC_IsInternalRegulatorEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027bc:	f043 0210 	orr.w	r2, r3, #16
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff61 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 80027de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8188 	bne.w	8002afe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 8184 	bne.w	8002afe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fefa 	bl	8002604 <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d136      	bne.n	8002884 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6c      	ldr	r2, [pc, #432]	@ (80029cc <HAL_ADC_Init+0x2b4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_ADC_Init+0x112>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_ADC_Init+0x2b8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10e      	bne.n	8002848 <HAL_ADC_Init+0x130>
 800282a:	4868      	ldr	r0, [pc, #416]	@ (80029cc <HAL_ADC_Init+0x2b4>)
 800282c:	f7ff feea 	bl	8002604 <LL_ADC_IsEnabled>
 8002830:	4604      	mov	r4, r0
 8002832:	4867      	ldr	r0, [pc, #412]	@ (80029d0 <HAL_ADC_Init+0x2b8>)
 8002834:	f7ff fee6 	bl	8002604 <LL_ADC_IsEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	4323      	orrs	r3, r4
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e008      	b.n	800285a <HAL_ADC_Init+0x142>
 8002848:	4862      	ldr	r0, [pc, #392]	@ (80029d4 <HAL_ADC_Init+0x2bc>)
 800284a:	f7ff fedb 	bl	8002604 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5a      	ldr	r2, [pc, #360]	@ (80029cc <HAL_ADC_Init+0x2b4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_ADC_Init+0x15a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_ADC_Init+0x2b8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x15e>
 8002872:	4a59      	ldr	r2, [pc, #356]	@ (80029d8 <HAL_ADC_Init+0x2c0>)
 8002874:	e000      	b.n	8002878 <HAL_ADC_Init+0x160>
 8002876:	4a59      	ldr	r2, [pc, #356]	@ (80029dc <HAL_ADC_Init+0x2c4>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7ff fc2e 	bl	80020e0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <HAL_ADC_Init+0x2bc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d129      	bne.n	80028e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7e5b      	ldrb	r3, [r3, #25]
 8002892:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002898:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800289e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d013      	beq.n	80028d0 <HAL_ADC_Init+0x1b8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d00d      	beq.n	80028cc <HAL_ADC_Init+0x1b4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b1c      	cmp	r3, #28
 80028b6:	d007      	beq.n	80028c8 <HAL_ADC_Init+0x1b0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b18      	cmp	r3, #24
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_Init+0x1ac>
 80028c0:	2318      	movs	r3, #24
 80028c2:	e006      	b.n	80028d2 <HAL_ADC_Init+0x1ba>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e004      	b.n	80028d2 <HAL_ADC_Init+0x1ba>
 80028c8:	2310      	movs	r3, #16
 80028ca:	e002      	b.n	80028d2 <HAL_ADC_Init+0x1ba>
 80028cc:	2308      	movs	r3, #8
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_Init+0x1ba>
 80028d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80028d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e00e      	b.n	8002900 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7e5b      	ldrb	r3, [r3, #25]
 80028e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d106      	bne.n	8002918 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	3b01      	subs	r3, #1
 8002910:	045b      	lsls	r3, r3, #17
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a26      	ldr	r2, [pc, #152]	@ (80029d4 <HAL_ADC_Init+0x2bc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d115      	bne.n	800296a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <HAL_ADC_Init+0x2c8>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	430b      	orrs	r3, r1
 8002950:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	e009      	b.n	800297e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_ADC_Init+0x2cc>)
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	430b      	orrs	r3, r1
 800297c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe8c 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 8002988:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff feae 	bl	80026f0 <LL_ADC_INJ_IsConversionOngoing>
 8002994:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 808e 	bne.w	8002aba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 808a 	bne.w	8002aba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_ADC_Init+0x2bc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11b      	bne.n	80029e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e1b      	ldrb	r3, [r3, #24]
 80029b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e018      	b.n	80029f6 <HAL_ADC_Init+0x2de>
 80029c4:	24000010 	.word	0x24000010
 80029c8:	053e2d63 	.word	0x053e2d63
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40022100 	.word	0x40022100
 80029d4:	58026000 	.word	0x58026000
 80029d8:	40022300 	.word	0x40022300
 80029dc:	58026300 	.word	0x58026300
 80029e0:	fff04007 	.word	0xfff04007
 80029e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
 80029ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b46      	ldr	r3, [pc, #280]	@ (8002b18 <HAL_ADC_Init+0x400>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	69b9      	ldr	r1, [r7, #24]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d137      	bne.n	8002a84 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b1c <HAL_ADC_Init+0x404>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d116      	bne.n	8002a52 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_ADC_Init+0x408>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a42:	430a      	orrs	r2, r1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	e020      	b.n	8002a94 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <HAL_ADC_Init+0x40c>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0411      	lsls	r1, r2, #16
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a74:	430a      	orrs	r2, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	e007      	b.n	8002a94 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <HAL_ADC_Init+0x404>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d002      	beq.n	8002aba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 f8f3 	bl	8003ca0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10c      	bne.n	8002adc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	f023 010f 	bic.w	r1, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	1e5a      	subs	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ada:	e007      	b.n	8002aec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020f 	bic.w	r2, r2, #15
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af0:	f023 0303 	bic.w	r3, r3, #3
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
 8002afc:	e007      	b.n	8002b0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3724      	adds	r7, #36	@ 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}
 8002b18:	ffffbffc 	.word	0xffffbffc
 8002b1c:	58026000 	.word	0x58026000
 8002b20:	fc00f81f 	.word	0xfc00f81f
 8002b24:	fc00f81e 	.word	0xfc00f81e

08002b28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a60      	ldr	r2, [pc, #384]	@ (8002cbc <HAL_ADC_Start_DMA+0x194>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADC_Start_DMA+0x20>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc0 <HAL_ADC_Start_DMA+0x198>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_Start_DMA+0x24>
 8002b48:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_ADC_Start_DMA+0x19c>)
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_Start_DMA+0x26>
 8002b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc8 <HAL_ADC_Start_DMA+0x1a0>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fcd4 	bl	80024fc <LL_ADC_GetMultimode>
 8002b54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fda0 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 80a2 	bne.w	8002cac <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Start_DMA+0x4e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e09d      	b.n	8002cb2 <HAL_ADC_Start_DMA+0x18a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d003      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	f040 8086 	bne.w	8002c9e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 ff06 	bl	80039a4 <ADC_Enable>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d178      	bne.n	8002c94 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_ADC_Start_DMA+0x1a4>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <HAL_ADC_Start_DMA+0x198>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d002      	beq.n	8002bc2 <HAL_ADC_Start_DMA+0x9a>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	e000      	b.n	8002bc4 <HAL_ADC_Start_DMA+0x9c>
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <HAL_ADC_Start_DMA+0x194>)
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bee:	f023 0206 	bic.w	r2, r3, #6
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	665a      	str	r2, [r3, #100]	@ 0x64
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	4a33      	ldr	r2, [pc, #204]	@ (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002c04:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	4a32      	ldr	r2, [pc, #200]	@ (8002cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	4a31      	ldr	r2, [pc, #196]	@ (8002cd8 <HAL_ADC_Start_DMA+0x1b0>)
 8002c14:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	221c      	movs	r2, #28
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a28      	ldr	r2, [pc, #160]	@ (8002cdc <HAL_ADC_Start_DMA+0x1b4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10f      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7ff fbce 	bl	80023f0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fbb9 	bl	80023d0 <LL_ADC_EnableDMAReq>
 8002c5e:	e007      	b.n	8002c70 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7ff fb9d 	bl	80023aa <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3340      	adds	r3, #64	@ 0x40
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f001 fe9e 	bl	80049c0 <HAL_DMA_Start_IT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fcdf 	bl	8002650 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c92:	e00d      	b.n	8002cb0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8002c9c:	e008      	b.n	8002cb0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002caa:	e001      	b.n	8002cb0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40022100 	.word	0x40022100
 8002cc4:	40022300 	.word	0x40022300
 8002cc8:	58026300 	.word	0x58026300
 8002ccc:	fffff0fe 	.word	0xfffff0fe
 8002cd0:	08003b77 	.word	0x08003b77
 8002cd4:	08003c4f 	.word	0x08003c4f
 8002cd8:	08003c6b 	.word	0x08003c6b
 8002cdc:	58026000 	.word	0x58026000

08002ce0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Stop_DMA+0x16>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e04f      	b.n	8002d96 <HAL_ADC_Stop_DMA+0xb6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002cfe:	2103      	movs	r1, #3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fd93 	bl	800382c <ADC_ConversionStop>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13d      	bne.n	8002d8c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0203 	bic.w	r2, r2, #3
 8002d1e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d10f      	bne.n	8002d4e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 f8ae 	bl	8004e94 <HAL_DMA_Abort>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0210 	bic.w	r2, r2, #16
 8002d5c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fea7 	bl	8003ab8 <ADC_Disable>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e002      	b.n	8002d76 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fea1 	bl	8003ab8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_ADC_Stop_DMA+0xc0>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	ffffeefe 	.word	0xffffeefe

08002da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b0b9      	sub	sp, #228	@ 0xe4
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4aab      	ldr	r2, [pc, #684]	@ (800309c <HAL_ADC_ConfigChannel+0x2d0>)
 8002dee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x34>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f000 bcfe 	b.w	80037fc <HAL_ADC_ConfigChannel+0xa30>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc47 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 84e2 	bne.w	80037de <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db38      	blt.n	8002e94 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a9e      	ldr	r2, [pc, #632]	@ (80030a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d033      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d108      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x7e>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2201      	movs	r2, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	e01d      	b.n	8002e86 <HAL_ADC_ConfigChannel+0xba>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	e004      	b.n	8002e7c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2201      	movs	r2, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	69d1      	ldr	r1, [r2, #28]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f7ff fa56 	bl	8002352 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fbf8 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc19 	bl	80026f0 <LL_ADC_INJ_IsConversionOngoing>
 8002ebe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8270 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 826b 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f7ff fa9e 	bl	8002424 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6c      	ldr	r2, [pc, #432]	@ (80030a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10d      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f0c:	e032      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_ADC_ConfigChannel+0x2d8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x168>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	e01d      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1a4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x18e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	e00a      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1a4>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d048      	beq.n	800300e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6919      	ldr	r1, [r3, #16]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f8c:	f7ff f8dc 	bl	8002148 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	@ (80030a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d119      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7ff f974 	bl	8002294 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x1f8>
 8002fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x1fa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7ff f942 	bl	8002250 <LL_ADC_SetOffsetSaturation>
 8002fcc:	e1ee      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6919      	ldr	r1, [r3, #16]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x21a>
 8002fe0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x21c>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f7ff f90f 	bl	800220c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	7e1b      	ldrb	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x238>
 8002ffe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x23a>
 8003004:	2300      	movs	r3, #0
 8003006:	461a      	mov	r2, r3
 8003008:	f7ff f8e6 	bl	80021d8 <LL_ADC_SetDataRightShift>
 800300c:	e1ce      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	f040 8181 	bne.w	800331c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f8c3 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x27a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f8b8 	bl	80021ac <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	e01e      	b.n	8003084 <HAL_ADC_ConfigChannel+0x2b8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f8ad 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800306c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e004      	b.n	8003082 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x2dc>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	e01e      	b.n	80030da <HAL_ADC_ConfigChannel+0x30e>
 800309c:	47ff0000 	.word	0x47ff0000
 80030a0:	58026000 	.word	0x58026000
 80030a4:	5c001000 	.word	0x5c001000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e004      	b.n	80030da <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80030d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	429a      	cmp	r2, r3
 80030dc:	d106      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f8f6 	bl	80022d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f85a 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x34c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f84f 	bl	80021ac <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	e01e      	b.n	8003156 <HAL_ADC_ConfigChannel+0x38a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f844 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003136:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800313e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e004      	b.n	8003154 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800314a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_ADC_ConfigChannel+0x3a2>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	e018      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x3d4>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003186:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800318a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003192:	2320      	movs	r3, #32
 8003194:	e004      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f893 	bl	80022d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fff7 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_ADC_ConfigChannel+0x412>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe ffec 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	e01e      	b.n	800321c <HAL_ADC_ConfigChannel+0x450>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe ffe1 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80031fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003200:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e004      	b.n	800321a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x468>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	e014      	b.n	800325e <HAL_ADC_ConfigChannel+0x492>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e004      	b.n	800325e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003254:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	429a      	cmp	r2, r3
 8003260:	d106      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	2102      	movs	r1, #2
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f834 	bl	80022d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2103      	movs	r1, #3
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe ff98 	bl	80021ac <LL_ADC_GetOffsetChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x4d0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2103      	movs	r1, #3
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ff8d 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	f003 021f 	and.w	r2, r3, #31
 800329a:	e017      	b.n	80032cc <HAL_ADC_ConfigChannel+0x500>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2103      	movs	r1, #3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff82 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80032c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x518>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	e011      	b.n	8003308 <HAL_ADC_ConfigChannel+0x53c>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80032f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80032f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80032fc:	2320      	movs	r3, #32
 80032fe:	e003      	b.n	8003308 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	429a      	cmp	r2, r3
 800330a:	d14f      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	2103      	movs	r1, #3
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe ffdf 	bl	80022d8 <LL_ADC_SetOffsetState>
 800331a:	e047      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	069b      	lsls	r3, r3, #26
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800333e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	069b      	lsls	r3, r3, #26
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003362:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	069b      	lsls	r3, r3, #26
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003386:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	069b      	lsls	r3, r3, #26
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f927 	bl	8002604 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8219 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7ff f856 	bl	800247c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4aa1      	ldr	r2, [pc, #644]	@ (800365c <HAL_ADC_ConfigChannel+0x890>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 812e 	bne.w	8003638 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x638>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e019      	b.n	8003438 <HAL_ADC_ConfigChannel+0x66c>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2b09      	cmp	r3, #9
 8003430:	bf94      	ite	ls
 8003432:	2301      	movls	r3, #1
 8003434:	2300      	movhi	r3, #0
 8003436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	2b00      	cmp	r3, #0
 800343a:	d079      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x68c>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	069b      	lsls	r3, r3, #26
 8003452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003456:	e015      	b.n	8003484 <HAL_ADC_ConfigChannel+0x6b8>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003468:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800346a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	069b      	lsls	r3, r3, #26
 8003480:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x6d8>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	e017      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x708>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80034b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80034b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80034c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x72e>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	e018      	b.n	800352c <HAL_ADC_ConfigChannel+0x760>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352c:	430b      	orrs	r3, r1
 800352e:	e07e      	b.n	800362e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <HAL_ADC_ConfigChannel+0x780>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	069b      	lsls	r3, r3, #26
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800354a:	e015      	b.n	8003578 <HAL_ADC_ConfigChannel+0x7ac>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	069b      	lsls	r3, r3, #26
 8003574:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x7cc>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	e017      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x7fc>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	61bb      	str	r3, [r7, #24]
  return result;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	ea42 0103 	orr.w	r1, r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x828>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	3b1e      	subs	r3, #30
 80035ec:	051b      	lsls	r3, r3, #20
 80035ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	e01b      	b.n	800362c <HAL_ADC_ConfigChannel+0x860>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	60fb      	str	r3, [r7, #12]
  return result;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	3b1e      	subs	r3, #30
 8003626:	051b      	lsls	r3, r3, #20
 8003628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	430b      	orrs	r3, r1
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	4619      	mov	r1, r3
 8003634:	f7fe fef6 	bl	8002424 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f280 80d7 	bge.w	80037f0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a06      	ldr	r2, [pc, #24]	@ (8003660 <HAL_ADC_ConfigChannel+0x894>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x88a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <HAL_ADC_ConfigChannel+0x898>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10a      	bne.n	800366c <HAL_ADC_ConfigChannel+0x8a0>
 8003656:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <HAL_ADC_ConfigChannel+0x89c>)
 8003658:	e009      	b.n	800366e <HAL_ADC_ConfigChannel+0x8a2>
 800365a:	bf00      	nop
 800365c:	47ff0000 	.word	0x47ff0000
 8003660:	40022000 	.word	0x40022000
 8003664:	40022100 	.word	0x40022100
 8003668:	40022300 	.word	0x40022300
 800366c:	4b65      	ldr	r3, [pc, #404]	@ (8003804 <HAL_ADC_ConfigChannel+0xa38>)
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fd5c 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 8003674:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a62      	ldr	r2, [pc, #392]	@ (8003808 <HAL_ADC_ConfigChannel+0xa3c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_ADC_ConfigChannel+0x8c0>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a61      	ldr	r2, [pc, #388]	@ (800380c <HAL_ADC_ConfigChannel+0xa40>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10e      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x8de>
 800368c:	485e      	ldr	r0, [pc, #376]	@ (8003808 <HAL_ADC_ConfigChannel+0xa3c>)
 800368e:	f7fe ffb9 	bl	8002604 <LL_ADC_IsEnabled>
 8003692:	4604      	mov	r4, r0
 8003694:	485d      	ldr	r0, [pc, #372]	@ (800380c <HAL_ADC_ConfigChannel+0xa40>)
 8003696:	f7fe ffb5 	bl	8002604 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	4323      	orrs	r3, r4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e008      	b.n	80036bc <HAL_ADC_ConfigChannel+0x8f0>
 80036aa:	4859      	ldr	r0, [pc, #356]	@ (8003810 <HAL_ADC_ConfigChannel+0xa44>)
 80036ac:	f7fe ffaa 	bl	8002604 <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8084 	beq.w	80037ca <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a53      	ldr	r2, [pc, #332]	@ (8003814 <HAL_ADC_ConfigChannel+0xa48>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d132      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x966>
 80036cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d12c      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003810 <HAL_ADC_ConfigChannel+0xa44>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 8086 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a47      	ldr	r2, [pc, #284]	@ (8003808 <HAL_ADC_ConfigChannel+0xa3c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x92c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a46      	ldr	r2, [pc, #280]	@ (800380c <HAL_ADC_ConfigChannel+0xa40>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x930>
 80036f8:	4a47      	ldr	r2, [pc, #284]	@ (8003818 <HAL_ADC_ConfigChannel+0xa4c>)
 80036fa:	e000      	b.n	80036fe <HAL_ADC_ConfigChannel+0x932>
 80036fc:	4a41      	ldr	r2, [pc, #260]	@ (8003804 <HAL_ADC_ConfigChannel+0xa38>)
 80036fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fcfc 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800370e:	4b43      	ldr	r3, [pc, #268]	@ (800381c <HAL_ADC_ConfigChannel+0xa50>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	4a42      	ldr	r2, [pc, #264]	@ (8003820 <HAL_ADC_ConfigChannel+0xa54>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	3301      	adds	r3, #1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003730:	e05e      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3b      	ldr	r2, [pc, #236]	@ (8003824 <HAL_ADC_ConfigChannel+0xa58>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d120      	bne.n	800377e <HAL_ADC_ConfigChannel+0x9b2>
 800373c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11a      	bne.n	800377e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a30      	ldr	r2, [pc, #192]	@ (8003810 <HAL_ADC_ConfigChannel+0xa44>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d14e      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2c      	ldr	r2, [pc, #176]	@ (8003808 <HAL_ADC_ConfigChannel+0xa3c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x99a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_ADC_ConfigChannel+0xa40>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x99e>
 8003766:	4a2c      	ldr	r2, [pc, #176]	@ (8003818 <HAL_ADC_ConfigChannel+0xa4c>)
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0x9a0>
 800376a:	4a26      	ldr	r2, [pc, #152]	@ (8003804 <HAL_ADC_ConfigChannel+0xa38>)
 800376c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003770:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fe fcc5 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800377c:	e038      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <HAL_ADC_ConfigChannel+0xa5c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d133      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
 8003788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800378c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d12d      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_ADC_ConfigChannel+0xa44>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d128      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <HAL_ADC_ConfigChannel+0xa3c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0x9e6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a17      	ldr	r2, [pc, #92]	@ (800380c <HAL_ADC_ConfigChannel+0xa40>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x9ea>
 80037b2:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <HAL_ADC_ConfigChannel+0xa4c>)
 80037b4:	e000      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x9ec>
 80037b6:	4a13      	ldr	r2, [pc, #76]	@ (8003804 <HAL_ADC_ConfigChannel+0xa38>)
 80037b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7fe fc9f 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
 80037c8:	e012      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80037dc:	e008      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80037f8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	37e4      	adds	r7, #228	@ 0xe4
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	58026300 	.word	0x58026300
 8003808:	40022000 	.word	0x40022000
 800380c:	40022100 	.word	0x40022100
 8003810:	58026000 	.word	0x58026000
 8003814:	c7520000 	.word	0xc7520000
 8003818:	40022300 	.word	0x40022300
 800381c:	24000010 	.word	0x24000010
 8003820:	053e2d63 	.word	0x053e2d63
 8003824:	c3210000 	.word	0xc3210000
 8003828:	cb840000 	.word	0xcb840000

0800382c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe ff2c 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 8003848:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe ff4e 	bl	80026f0 <LL_ADC_INJ_IsConversionOngoing>
 8003854:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d103      	bne.n	8003864 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8098 	beq.w	8003994 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02a      	beq.n	80038c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7e5b      	ldrb	r3, [r3, #25]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d126      	bne.n	80038c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7e1b      	ldrb	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d122      	bne.n	80038c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003886:	e014      	b.n	80038b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <ADC_ConversionStop+0x174>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d90d      	bls.n	80038ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e074      	b.n	8003996 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038bc:	2b40      	cmp	r3, #64	@ 0x40
 80038be:	d1e3      	bne.n	8003888 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2240      	movs	r2, #64	@ 0x40
 80038c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d014      	beq.n	80038f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fee4 	bl	80026a0 <LL_ADC_REG_IsConversionOngoing>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fea1 	bl	800262a <LL_ADC_IsDisableOngoing>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fec0 	bl	8002678 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d014      	beq.n	8003928 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fef4 	bl	80026f0 <LL_ADC_INJ_IsConversionOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fe89 	bl	800262a <LL_ADC_IsDisableOngoing>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fed0 	bl	80026c8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d005      	beq.n	800393a <ADC_ConversionStop+0x10e>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d105      	bne.n	8003940 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003934:	230c      	movs	r3, #12
 8003936:	617b      	str	r3, [r7, #20]
        break;
 8003938:	e005      	b.n	8003946 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800393a:	2308      	movs	r3, #8
 800393c:	617b      	str	r3, [r7, #20]
        break;
 800393e:	e002      	b.n	8003946 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003940:	2304      	movs	r3, #4
 8003942:	617b      	str	r3, [r7, #20]
        break;
 8003944:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003946:	f7fe fb9b 	bl	8002080 <HAL_GetTick>
 800394a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800394c:	e01b      	b.n	8003986 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800394e:	f7fe fb97 	bl	8002080 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b05      	cmp	r3, #5
 800395a:	d914      	bls.n	8003986 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e007      	b.n	8003996 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1dc      	bne.n	800394e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000cdbff 	.word	0x000cdbff

080039a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe27 	bl	8002604 <LL_ADC_IsEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d16e      	bne.n	8003a9a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <ADC_Enable+0x100>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e05a      	b.n	8003a9c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fde2 	bl	80025b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039f0:	f7fe fb46 	bl	8002080 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <ADC_Enable+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <ADC_Enable+0x66>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <ADC_Enable+0x108>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <ADC_Enable+0x6a>
 8003a0a:	4b29      	ldr	r3, [pc, #164]	@ (8003ab0 <ADC_Enable+0x10c>)
 8003a0c:	e000      	b.n	8003a10 <ADC_Enable+0x6c>
 8003a0e:	4b29      	ldr	r3, [pc, #164]	@ (8003ab4 <ADC_Enable+0x110>)
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fd73 	bl	80024fc <LL_ADC_GetMultimode>
 8003a16:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a23      	ldr	r2, [pc, #140]	@ (8003aac <ADC_Enable+0x108>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d002      	beq.n	8003a28 <ADC_Enable+0x84>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e000      	b.n	8003a2a <ADC_Enable+0x86>
 8003a28:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa8 <ADC_Enable+0x104>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d130      	bne.n	8003a9a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a38:	e028      	b.n	8003a8c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fde0 	bl	8002604 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fdb0 	bl	80025b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a54:	f7fe fb14 	bl	8002080 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d914      	bls.n	8003a8c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00d      	beq.n	8003a8c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a74:	f043 0210 	orr.w	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e007      	b.n	8003a9c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d1cf      	bne.n	8003a3a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	8000003f 	.word	0x8000003f
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40022100 	.word	0x40022100
 8003ab0:	40022300 	.word	0x40022300
 8003ab4:	58026300 	.word	0x58026300

08003ab8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fdb0 	bl	800262a <LL_ADC_IsDisableOngoing>
 8003aca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fd97 	bl	8002604 <LL_ADC_IsEnabled>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d047      	beq.n	8003b6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d144      	bne.n	8003b6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030d 	and.w	r3, r3, #13
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fd71 	bl	80025dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2203      	movs	r2, #3
 8003b00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b02:	f7fe fabd 	bl	8002080 <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b08:	e029      	b.n	8003b5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0e:	f043 0210 	orr.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e023      	b.n	8003b6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b26:	f7fe faab 	bl	8002080 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d914      	bls.n	8003b5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1dc      	bne.n	8003b26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d14b      	bne.n	8003c28 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d021      	beq.n	8003bee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fbbc 	bl	800232c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d032      	beq.n	8003c20 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d12b      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11f      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bec:	e018      	b.n	8003c20 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7fd fd73 	bl	800170c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c26:	e00e      	b.n	8003c46 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff f8bf 	bl	8002db8 <HAL_ADC_ErrorCallback>
}
 8003c3a:	e004      	b.n	8003c46 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff f8a1 	bl	8002da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff f891 	bl	8002db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6c      	ldr	r2, [pc, #432]	@ (8003e60 <ADC_ConfigureBoostMode+0x1c0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <ADC_ConfigureBoostMode+0x1c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8003e64 <ADC_ConfigureBoostMode+0x1c4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d109      	bne.n	8003cd0 <ADC_ConfigureBoostMode+0x30>
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e68 <ADC_ConfigureBoostMode+0x1c8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e008      	b.n	8003ce2 <ADC_ConfigureBoostMode+0x42>
 8003cd0:	4b66      	ldr	r3, [pc, #408]	@ (8003e6c <ADC_ConfigureBoostMode+0x1cc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ce6:	f004 feeb 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8003cea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cf4:	d010      	beq.n	8003d18 <ADC_ConfigureBoostMode+0x78>
 8003cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cfa:	d873      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d00:	d002      	beq.n	8003d08 <ADC_ConfigureBoostMode+0x68>
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d06:	d16d      	bne.n	8003de4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	60fb      	str	r3, [r7, #12]
        break;
 8003d16:	e068      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	60fb      	str	r3, [r7, #12]
        break;
 8003d1e:	e064      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d20:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	f006 f8c6 	bl	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d2c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d36:	d051      	beq.n	8003ddc <ADC_ConfigureBoostMode+0x13c>
 8003d38:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d3c:	d854      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d3e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d42:	d047      	beq.n	8003dd4 <ADC_ConfigureBoostMode+0x134>
 8003d44:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d48:	d84e      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d4a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d4e:	d03d      	beq.n	8003dcc <ADC_ConfigureBoostMode+0x12c>
 8003d50:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d54:	d848      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5a:	d033      	beq.n	8003dc4 <ADC_ConfigureBoostMode+0x124>
 8003d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d60:	d842      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d62:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d66:	d029      	beq.n	8003dbc <ADC_ConfigureBoostMode+0x11c>
 8003d68:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d6c:	d83c      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d6e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d72:	d01a      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003d74:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d78:	d836      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d7a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d7e:	d014      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003d80:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d84:	d830      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8a:	d00e      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d90:	d82a      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d96:	d008      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003d98:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d9c:	d824      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x148>
 8003d9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003da2:	d002      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003da4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003da8:	d11e      	bne.n	8003de8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	0c9b      	lsrs	r3, r3, #18
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	60fb      	str	r3, [r7, #12]
        break;
 8003dba:	e016      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
        break;
 8003dc2:	e012      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	60fb      	str	r3, [r7, #12]
        break;
 8003dca:	e00e      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	60fb      	str	r3, [r7, #12]
        break;
 8003dd2:	e00a      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	09db      	lsrs	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
        break;
 8003dda:	e006      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e002      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
        break;
 8003de4:	bf00      	nop
 8003de6:	e000      	b.n	8003dea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003de8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <ADC_ConfigureBoostMode+0x1d0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d808      	bhi.n	8003e0a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e08:	e025      	b.n	8003e56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	@ (8003e74 <ADC_ConfigureBoostMode+0x1d4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d80a      	bhi.n	8003e28 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e24:	609a      	str	r2, [r3, #8]
}
 8003e26:	e016      	b.n	8003e56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a13      	ldr	r2, [pc, #76]	@ (8003e78 <ADC_ConfigureBoostMode+0x1d8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d80a      	bhi.n	8003e46 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	e007      	b.n	8003e56 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40022100 	.word	0x40022100
 8003e68:	40022300 	.word	0x40022300
 8003e6c:	58026300 	.word	0x58026300
 8003e70:	005f5e10 	.word	0x005f5e10
 8003e74:	00bebc20 	.word	0x00bebc20
 8003e78:	017d7840 	.word	0x017d7840

08003e7c <LL_ADC_IsEnabled>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <LL_ADC_IsEnabled+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_ADC_IsEnabled+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d101      	bne.n	8003eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b0a3      	sub	sp, #140	@ 0x8c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0c1      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a5e      	ldr	r2, [pc, #376]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d102      	bne.n	8003f06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f00:	4b5d      	ldr	r3, [pc, #372]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e001      	b.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0a0      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ffb9 	bl	8003ea2 <LL_ADC_REG_IsConversionOngoing>
 8003f30:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ffb2 	bl	8003ea2 <LL_ADC_REG_IsConversionOngoing>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 8081 	bne.w	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d17c      	bne.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a48      	ldr	r2, [pc, #288]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a46      	ldr	r2, [pc, #280]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003f62:	4b46      	ldr	r3, [pc, #280]	@ (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f64:	e000      	b.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f66:	4b46      	ldr	r3, [pc, #280]	@ (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f68:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d039      	beq.n	8003fe6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3a      	ldr	r2, [pc, #232]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a39      	ldr	r2, [pc, #228]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10e      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003f98:	4836      	ldr	r0, [pc, #216]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f9a:	f7ff ff6f 	bl	8003e7c <LL_ADC_IsEnabled>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4835      	ldr	r0, [pc, #212]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fa2:	f7ff ff6b 	bl	8003e7c <LL_ADC_IsEnabled>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4323      	orrs	r3, r4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e008      	b.n	8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003fb6:	4833      	ldr	r0, [pc, #204]	@ (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fb8:	f7ff ff60 	bl	8003e7c <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d047      	beq.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	6811      	ldr	r1, [r2, #0]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fe4:	e03a      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003fe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ff0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10e      	bne.n	8004024 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004006:	481b      	ldr	r0, [pc, #108]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004008:	f7ff ff38 	bl	8003e7c <LL_ADC_IsEnabled>
 800400c:	4604      	mov	r4, r0
 800400e:	481a      	ldr	r0, [pc, #104]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004010:	f7ff ff34 	bl	8003e7c <LL_ADC_IsEnabled>
 8004014:	4603      	mov	r3, r0
 8004016:	4323      	orrs	r3, r4
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e008      	b.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004024:	4817      	ldr	r0, [pc, #92]	@ (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004026:	f7ff ff29 	bl	8003e7c <LL_ADC_IsEnabled>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800403a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004040:	4013      	ands	r3, r2
 8004042:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004044:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004046:	e009      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800405a:	e000      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800405c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004066:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800406a:	4618      	mov	r0, r3
 800406c:	378c      	adds	r7, #140	@ 0x8c
 800406e:	46bd      	mov	sp, r7
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	bf00      	nop
 8004074:	40022000 	.word	0x40022000
 8004078:	40022100 	.word	0x40022100
 800407c:	40022300 	.word	0x40022300
 8004080:	58026300 	.word	0x58026300
 8004084:	58026000 	.word	0x58026000
 8004088:	fffff0e0 	.word	0xfffff0e0

0800408c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e023      	b.n	80040e6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fd28 	bl	8000b08 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <__NVIC_SetPriorityGrouping+0x40>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800410c:	4013      	ands	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 800411a:	4313      	orrs	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411e:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <__NVIC_SetPriorityGrouping+0x40>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	60d3      	str	r3, [r2, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00
 8004134:	05fa0000 	.word	0x05fa0000

08004138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <__NVIC_GetPriorityGrouping+0x18>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 0307 	and.w	r3, r3, #7
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800415e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	db0b      	blt.n	800417e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4907      	ldr	r1, [pc, #28]	@ (800418c <__NVIC_EnableIRQ+0x38>)
 800416e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2001      	movs	r0, #1
 8004176:	fa00 f202 	lsl.w	r2, r0, r2
 800417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000e100 	.word	0xe000e100

08004190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800419c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	db0a      	blt.n	80041ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	490c      	ldr	r1, [pc, #48]	@ (80041dc <__NVIC_SetPriority+0x4c>)
 80041aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ae:	0112      	lsls	r2, r2, #4
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	440b      	add	r3, r1
 80041b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b8:	e00a      	b.n	80041d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4908      	ldr	r1, [pc, #32]	@ (80041e0 <__NVIC_SetPriority+0x50>)
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	3b04      	subs	r3, #4
 80041c8:	0112      	lsls	r2, r2, #4
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	440b      	add	r3, r1
 80041ce:	761a      	strb	r2, [r3, #24]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000e100 	.word	0xe000e100
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	@ 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	bf28      	it	cs
 8004202:	2304      	movcs	r3, #4
 8004204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3304      	adds	r3, #4
 800420a:	2b06      	cmp	r3, #6
 800420c:	d902      	bls.n	8004214 <NVIC_EncodePriority+0x30>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3b03      	subs	r3, #3
 8004212:	e000      	b.n	8004216 <NVIC_EncodePriority+0x32>
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	401a      	ands	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800422c:	f04f 31ff 	mov.w	r1, #4294967295
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	43d9      	mvns	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800423c:	4313      	orrs	r3, r2
         );
}
 800423e:	4618      	mov	r0, r3
 8004240:	3724      	adds	r7, #36	@ 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3b01      	subs	r3, #1
 8004258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800425c:	d301      	bcc.n	8004262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800425e:	2301      	movs	r3, #1
 8004260:	e00f      	b.n	8004282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004262:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <SysTick_Config+0x40>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800426a:	210f      	movs	r1, #15
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	f7ff ff8e 	bl	8004190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <SysTick_Config+0x40>)
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800427a:	4b04      	ldr	r3, [pc, #16]	@ (800428c <SysTick_Config+0x40>)
 800427c:	2207      	movs	r2, #7
 800427e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	e000e010 	.word	0xe000e010

08004290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff29 	bl	80040f0 <__NVIC_SetPriorityGrouping>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042b4:	f7ff ff40 	bl	8004138 <__NVIC_GetPriorityGrouping>
 80042b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff ff90 	bl	80041e4 <NVIC_EncodePriority>
 80042c4:	4602      	mov	r2, r0
 80042c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff5f 	bl	8004190 <__NVIC_SetPriority>
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff33 	bl	8004154 <__NVIC_EnableIRQ>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffa4 	bl	800424c <SysTick_Config>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fd feb2 	bl	8002080 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e312      	b.n	800494e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a66      	ldr	r2, [pc, #408]	@ (80044c8 <HAL_DMA_Init+0x1b8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a65      	ldr	r2, [pc, #404]	@ (80044cc <HAL_DMA_Init+0x1bc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a63      	ldr	r2, [pc, #396]	@ (80044d0 <HAL_DMA_Init+0x1c0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a62      	ldr	r2, [pc, #392]	@ (80044d4 <HAL_DMA_Init+0x1c4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a60      	ldr	r2, [pc, #384]	@ (80044d8 <HAL_DMA_Init+0x1c8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a5f      	ldr	r2, [pc, #380]	@ (80044dc <HAL_DMA_Init+0x1cc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5d      	ldr	r2, [pc, #372]	@ (80044e0 <HAL_DMA_Init+0x1d0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a5c      	ldr	r2, [pc, #368]	@ (80044e4 <HAL_DMA_Init+0x1d4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5a      	ldr	r2, [pc, #360]	@ (80044e8 <HAL_DMA_Init+0x1d8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a59      	ldr	r2, [pc, #356]	@ (80044ec <HAL_DMA_Init+0x1dc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a57      	ldr	r2, [pc, #348]	@ (80044f0 <HAL_DMA_Init+0x1e0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a56      	ldr	r2, [pc, #344]	@ (80044f4 <HAL_DMA_Init+0x1e4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a54      	ldr	r2, [pc, #336]	@ (80044f8 <HAL_DMA_Init+0x1e8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a53      	ldr	r2, [pc, #332]	@ (80044fc <HAL_DMA_Init+0x1ec>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a51      	ldr	r2, [pc, #324]	@ (8004500 <HAL_DMA_Init+0x1f0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_Init+0xb8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a50      	ldr	r2, [pc, #320]	@ (8004504 <HAL_DMA_Init+0x1f4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_DMA_Init+0xbc>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_DMA_Init+0xbe>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 813c 	beq.w	800464c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a37      	ldr	r2, [pc, #220]	@ (80044c8 <HAL_DMA_Init+0x1b8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04a      	beq.n	8004484 <HAL_DMA_Init+0x174>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <HAL_DMA_Init+0x1bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d045      	beq.n	8004484 <HAL_DMA_Init+0x174>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	@ (80044d0 <HAL_DMA_Init+0x1c0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d040      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a33      	ldr	r2, [pc, #204]	@ (80044d4 <HAL_DMA_Init+0x1c4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d03b      	beq.n	8004484 <HAL_DMA_Init+0x174>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a31      	ldr	r2, [pc, #196]	@ (80044d8 <HAL_DMA_Init+0x1c8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d036      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a30      	ldr	r2, [pc, #192]	@ (80044dc <HAL_DMA_Init+0x1cc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d031      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2e      	ldr	r2, [pc, #184]	@ (80044e0 <HAL_DMA_Init+0x1d0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02c      	beq.n	8004484 <HAL_DMA_Init+0x174>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <HAL_DMA_Init+0x1d4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d027      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_DMA_Init+0x1d8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_DMA_Init+0x174>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <HAL_DMA_Init+0x1dc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a28      	ldr	r2, [pc, #160]	@ (80044f0 <HAL_DMA_Init+0x1e0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a27      	ldr	r2, [pc, #156]	@ (80044f4 <HAL_DMA_Init+0x1e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_DMA_Init+0x174>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a25      	ldr	r2, [pc, #148]	@ (80044f8 <HAL_DMA_Init+0x1e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <HAL_DMA_Init+0x1ec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_DMA_Init+0x174>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <HAL_DMA_Init+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_DMA_Init+0x174>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <HAL_DMA_Init+0x1f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <HAL_DMA_Init+0x186>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e007      	b.n	80044a6 <HAL_DMA_Init+0x196>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044a6:	e02f      	b.n	8004508 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044a8:	f7fd fdea 	bl	8002080 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d928      	bls.n	8004508 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2203      	movs	r2, #3
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e242      	b.n	800494e <HAL_DMA_Init+0x63e>
 80044c8:	40020010 	.word	0x40020010
 80044cc:	40020028 	.word	0x40020028
 80044d0:	40020040 	.word	0x40020040
 80044d4:	40020058 	.word	0x40020058
 80044d8:	40020070 	.word	0x40020070
 80044dc:	40020088 	.word	0x40020088
 80044e0:	400200a0 	.word	0x400200a0
 80044e4:	400200b8 	.word	0x400200b8
 80044e8:	40020410 	.word	0x40020410
 80044ec:	40020428 	.word	0x40020428
 80044f0:	40020440 	.word	0x40020440
 80044f4:	40020458 	.word	0x40020458
 80044f8:	40020470 	.word	0x40020470
 80044fc:	40020488 	.word	0x40020488
 8004500:	400204a0 	.word	0x400204a0
 8004504:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1c8      	bne.n	80044a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4b83      	ldr	r3, [pc, #524]	@ (8004730 <HAL_DMA_Init+0x420>)
 8004522:	4013      	ands	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800452e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004546:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	2b04      	cmp	r3, #4
 800455a:	d107      	bne.n	800456c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	4313      	orrs	r3, r2
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b28      	cmp	r3, #40	@ 0x28
 8004572:	d903      	bls.n	800457c <HAL_DMA_Init+0x26c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b2e      	cmp	r3, #46	@ 0x2e
 800457a:	d91f      	bls.n	80045bc <HAL_DMA_Init+0x2ac>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b3e      	cmp	r3, #62	@ 0x3e
 8004582:	d903      	bls.n	800458c <HAL_DMA_Init+0x27c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b42      	cmp	r3, #66	@ 0x42
 800458a:	d917      	bls.n	80045bc <HAL_DMA_Init+0x2ac>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b46      	cmp	r3, #70	@ 0x46
 8004592:	d903      	bls.n	800459c <HAL_DMA_Init+0x28c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b48      	cmp	r3, #72	@ 0x48
 800459a:	d90f      	bls.n	80045bc <HAL_DMA_Init+0x2ac>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80045a2:	d903      	bls.n	80045ac <HAL_DMA_Init+0x29c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b52      	cmp	r3, #82	@ 0x52
 80045aa:	d907      	bls.n	80045bc <HAL_DMA_Init+0x2ac>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b73      	cmp	r3, #115	@ 0x73
 80045b2:	d905      	bls.n	80045c0 <HAL_DMA_Init+0x2b0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b77      	cmp	r3, #119	@ 0x77
 80045ba:	d801      	bhi.n	80045c0 <HAL_DMA_Init+0x2b0>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_DMA_Init+0x2b2>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0307 	bic.w	r3, r3, #7
 80045e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d117      	bne.n	8004628 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f002 fb2e 	bl	8006c6c <DMA_CheckFifoParam>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2240      	movs	r2, #64	@ 0x40
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e192      	b.n	800494e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f002 fa69 	bl	8006b08 <DMA_CalcBaseAndBitshift>
 8004636:	4603      	mov	r3, r0
 8004638:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	223f      	movs	r2, #63	@ 0x3f
 8004644:	409a      	lsls	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	e0c8      	b.n	80047de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <HAL_DMA_Init+0x424>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_DMA_Init+0x38c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a37      	ldr	r2, [pc, #220]	@ (8004738 <HAL_DMA_Init+0x428>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d01d      	beq.n	800469c <HAL_DMA_Init+0x38c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	@ (800473c <HAL_DMA_Init+0x42c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_DMA_Init+0x38c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a34      	ldr	r2, [pc, #208]	@ (8004740 <HAL_DMA_Init+0x430>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_DMA_Init+0x38c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <HAL_DMA_Init+0x434>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_DMA_Init+0x38c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a31      	ldr	r2, [pc, #196]	@ (8004748 <HAL_DMA_Init+0x438>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_DMA_Init+0x38c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2f      	ldr	r2, [pc, #188]	@ (800474c <HAL_DMA_Init+0x43c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_DMA_Init+0x38c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <HAL_DMA_Init+0x440>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_DMA_Init+0x390>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_DMA_Init+0x392>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8092 	beq.w	80047cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a21      	ldr	r2, [pc, #132]	@ (8004734 <HAL_DMA_Init+0x424>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d021      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a20      	ldr	r2, [pc, #128]	@ (8004738 <HAL_DMA_Init+0x428>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01c      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_DMA_Init+0x42c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d017      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <HAL_DMA_Init+0x430>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d012      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004744 <HAL_DMA_Init+0x434>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00d      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_DMA_Init+0x438>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d008      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a18      	ldr	r2, [pc, #96]	@ (800474c <HAL_DMA_Init+0x43c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <HAL_DMA_Init+0x3e6>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <HAL_DMA_Init+0x440>)
 80046f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_DMA_Init+0x444>)
 8004712:	4013      	ands	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	d01c      	beq.n	8004758 <HAL_DMA_Init+0x448>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d102      	bne.n	800472c <HAL_DMA_Init+0x41c>
 8004726:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800472a:	e016      	b.n	800475a <HAL_DMA_Init+0x44a>
 800472c:	2300      	movs	r3, #0
 800472e:	e014      	b.n	800475a <HAL_DMA_Init+0x44a>
 8004730:	fe10803f 	.word	0xfe10803f
 8004734:	58025408 	.word	0x58025408
 8004738:	5802541c 	.word	0x5802541c
 800473c:	58025430 	.word	0x58025430
 8004740:	58025444 	.word	0x58025444
 8004744:	58025458 	.word	0x58025458
 8004748:	5802546c 	.word	0x5802546c
 800474c:	58025480 	.word	0x58025480
 8004750:	58025494 	.word	0x58025494
 8004754:	fffe000f 	.word	0xfffe000f
 8004758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68d2      	ldr	r2, [r2, #12]
 800475e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	4b6e      	ldr	r3, [pc, #440]	@ (8004958 <HAL_DMA_Init+0x648>)
 80047a0:	4413      	add	r3, r2
 80047a2:	4a6e      	ldr	r2, [pc, #440]	@ (800495c <HAL_DMA_Init+0x64c>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f002 f9a9 	bl	8006b08 <DMA_CalcBaseAndBitshift>
 80047b6:	4603      	mov	r3, r0
 80047b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e008      	b.n	80047de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2240      	movs	r2, #64	@ 0x40
 80047d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0b7      	b.n	800494e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004960 <HAL_DMA_Init+0x650>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d072      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004964 <HAL_DMA_Init+0x654>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d06d      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004968 <HAL_DMA_Init+0x658>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d068      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5a      	ldr	r2, [pc, #360]	@ (800496c <HAL_DMA_Init+0x65c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d063      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a59      	ldr	r2, [pc, #356]	@ (8004970 <HAL_DMA_Init+0x660>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d05e      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a57      	ldr	r2, [pc, #348]	@ (8004974 <HAL_DMA_Init+0x664>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d059      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a56      	ldr	r2, [pc, #344]	@ (8004978 <HAL_DMA_Init+0x668>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d054      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_DMA_Init+0x66c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d04f      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a53      	ldr	r2, [pc, #332]	@ (8004980 <HAL_DMA_Init+0x670>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a51      	ldr	r2, [pc, #324]	@ (8004984 <HAL_DMA_Init+0x674>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a50      	ldr	r2, [pc, #320]	@ (8004988 <HAL_DMA_Init+0x678>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a4e      	ldr	r2, [pc, #312]	@ (800498c <HAL_DMA_Init+0x67c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4d      	ldr	r2, [pc, #308]	@ (8004990 <HAL_DMA_Init+0x680>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a4b      	ldr	r2, [pc, #300]	@ (8004994 <HAL_DMA_Init+0x684>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4a      	ldr	r2, [pc, #296]	@ (8004998 <HAL_DMA_Init+0x688>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a48      	ldr	r2, [pc, #288]	@ (800499c <HAL_DMA_Init+0x68c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a47      	ldr	r2, [pc, #284]	@ (80049a0 <HAL_DMA_Init+0x690>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a45      	ldr	r2, [pc, #276]	@ (80049a4 <HAL_DMA_Init+0x694>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a44      	ldr	r2, [pc, #272]	@ (80049a8 <HAL_DMA_Init+0x698>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_DMA_Init+0x69c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a41      	ldr	r2, [pc, #260]	@ (80049b0 <HAL_DMA_Init+0x6a0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3f      	ldr	r2, [pc, #252]	@ (80049b4 <HAL_DMA_Init+0x6a4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a3e      	ldr	r2, [pc, #248]	@ (80049b8 <HAL_DMA_Init+0x6a8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_Init+0x5be>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3c      	ldr	r2, [pc, #240]	@ (80049bc <HAL_DMA_Init+0x6ac>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Init+0x5c2>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_Init+0x5c4>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d032      	beq.n	800493e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 fa43 	bl	8006d64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d102      	bne.n	80048ec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_DMA_Init+0x61c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d80c      	bhi.n	800492c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f002 fac0 	bl	8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e008      	b.n	800493e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	a7fdabf8 	.word	0xa7fdabf8
 800495c:	cccccccd 	.word	0xcccccccd
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8
 80049a0:	58025408 	.word	0x58025408
 80049a4:	5802541c 	.word	0x5802541c
 80049a8:	58025430 	.word	0x58025430
 80049ac:	58025444 	.word	0x58025444
 80049b0:	58025458 	.word	0x58025458
 80049b4:	5802546c 	.word	0x5802546c
 80049b8:	58025480 	.word	0x58025480
 80049bc:	58025494 	.word	0x58025494

080049c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e226      	b.n	8004e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_DMA_Start_IT+0x2a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e21f      	b.n	8004e2a <HAL_DMA_Start_IT+0x46a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f040 820a 	bne.w	8004e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a68      	ldr	r2, [pc, #416]	@ (8004bb4 <HAL_DMA_Start_IT+0x1f4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d04a      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a66      	ldr	r2, [pc, #408]	@ (8004bb8 <HAL_DMA_Start_IT+0x1f8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d045      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a65      	ldr	r2, [pc, #404]	@ (8004bbc <HAL_DMA_Start_IT+0x1fc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d040      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a63      	ldr	r2, [pc, #396]	@ (8004bc0 <HAL_DMA_Start_IT+0x200>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d03b      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a62      	ldr	r2, [pc, #392]	@ (8004bc4 <HAL_DMA_Start_IT+0x204>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d036      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a60      	ldr	r2, [pc, #384]	@ (8004bc8 <HAL_DMA_Start_IT+0x208>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bcc <HAL_DMA_Start_IT+0x20c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d02c      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd0 <HAL_DMA_Start_IT+0x210>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d027      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5c      	ldr	r2, [pc, #368]	@ (8004bd4 <HAL_DMA_Start_IT+0x214>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8004bd8 <HAL_DMA_Start_IT+0x218>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01d      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a59      	ldr	r2, [pc, #356]	@ (8004bdc <HAL_DMA_Start_IT+0x21c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a57      	ldr	r2, [pc, #348]	@ (8004be0 <HAL_DMA_Start_IT+0x220>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a56      	ldr	r2, [pc, #344]	@ (8004be4 <HAL_DMA_Start_IT+0x224>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a54      	ldr	r2, [pc, #336]	@ (8004be8 <HAL_DMA_Start_IT+0x228>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a53      	ldr	r2, [pc, #332]	@ (8004bec <HAL_DMA_Start_IT+0x22c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_DMA_Start_IT+0xee>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a51      	ldr	r2, [pc, #324]	@ (8004bf0 <HAL_DMA_Start_IT+0x230>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <HAL_DMA_Start_IT+0x100>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e007      	b.n	8004ad0 <HAL_DMA_Start_IT+0x110>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 fe6a 	bl	80067b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <HAL_DMA_Start_IT+0x1f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a33      	ldr	r2, [pc, #204]	@ (8004bb8 <HAL_DMA_Start_IT+0x1f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a31      	ldr	r2, [pc, #196]	@ (8004bbc <HAL_DMA_Start_IT+0x1fc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a30      	ldr	r2, [pc, #192]	@ (8004bc0 <HAL_DMA_Start_IT+0x200>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <HAL_DMA_Start_IT+0x204>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <HAL_DMA_Start_IT+0x208>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bcc <HAL_DMA_Start_IT+0x20c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd0 <HAL_DMA_Start_IT+0x210>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a28      	ldr	r2, [pc, #160]	@ (8004bd4 <HAL_DMA_Start_IT+0x214>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	@ (8004bd8 <HAL_DMA_Start_IT+0x218>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a25      	ldr	r2, [pc, #148]	@ (8004bdc <HAL_DMA_Start_IT+0x21c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a24      	ldr	r2, [pc, #144]	@ (8004be0 <HAL_DMA_Start_IT+0x220>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a22      	ldr	r2, [pc, #136]	@ (8004be4 <HAL_DMA_Start_IT+0x224>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	@ (8004be8 <HAL_DMA_Start_IT+0x228>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <HAL_DMA_Start_IT+0x22c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Start_IT+0x1bc>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf0 <HAL_DMA_Start_IT+0x230>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_DMA_Start_IT+0x1c0>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_DMA_Start_IT+0x1c2>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d036      	beq.n	8004bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 021e 	bic.w	r2, r3, #30
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0216 	orr.w	r2, r2, #22
 8004b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d03e      	beq.n	8004c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e035      	b.n	8004c20 <HAL_DMA_Start_IT+0x260>
 8004bb4:	40020010 	.word	0x40020010
 8004bb8:	40020028 	.word	0x40020028
 8004bbc:	40020040 	.word	0x40020040
 8004bc0:	40020058 	.word	0x40020058
 8004bc4:	40020070 	.word	0x40020070
 8004bc8:	40020088 	.word	0x40020088
 8004bcc:	400200a0 	.word	0x400200a0
 8004bd0:	400200b8 	.word	0x400200b8
 8004bd4:	40020410 	.word	0x40020410
 8004bd8:	40020428 	.word	0x40020428
 8004bdc:	40020440 	.word	0x40020440
 8004be0:	40020458 	.word	0x40020458
 8004be4:	40020470 	.word	0x40020470
 8004be8:	40020488 	.word	0x40020488
 8004bec:	400204a0 	.word	0x400204a0
 8004bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 020e 	bic.w	r2, r3, #14
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 020a 	orr.w	r2, r2, #10
 8004c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0204 	orr.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a83      	ldr	r2, [pc, #524]	@ (8004e34 <HAL_DMA_Start_IT+0x474>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d072      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a82      	ldr	r2, [pc, #520]	@ (8004e38 <HAL_DMA_Start_IT+0x478>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d06d      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a80      	ldr	r2, [pc, #512]	@ (8004e3c <HAL_DMA_Start_IT+0x47c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d068      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7f      	ldr	r2, [pc, #508]	@ (8004e40 <HAL_DMA_Start_IT+0x480>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d063      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e44 <HAL_DMA_Start_IT+0x484>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d05e      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7c      	ldr	r2, [pc, #496]	@ (8004e48 <HAL_DMA_Start_IT+0x488>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d059      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7a      	ldr	r2, [pc, #488]	@ (8004e4c <HAL_DMA_Start_IT+0x48c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d054      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a79      	ldr	r2, [pc, #484]	@ (8004e50 <HAL_DMA_Start_IT+0x490>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04f      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a77      	ldr	r2, [pc, #476]	@ (8004e54 <HAL_DMA_Start_IT+0x494>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a76      	ldr	r2, [pc, #472]	@ (8004e58 <HAL_DMA_Start_IT+0x498>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d045      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a74      	ldr	r2, [pc, #464]	@ (8004e5c <HAL_DMA_Start_IT+0x49c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	@ (8004e60 <HAL_DMA_Start_IT+0x4a0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03b      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a71      	ldr	r2, [pc, #452]	@ (8004e64 <HAL_DMA_Start_IT+0x4a4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d036      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a70      	ldr	r2, [pc, #448]	@ (8004e68 <HAL_DMA_Start_IT+0x4a8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d031      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <HAL_DMA_Start_IT+0x4ac>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6d      	ldr	r2, [pc, #436]	@ (8004e70 <HAL_DMA_Start_IT+0x4b0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d027      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e74 <HAL_DMA_Start_IT+0x4b4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6a      	ldr	r2, [pc, #424]	@ (8004e78 <HAL_DMA_Start_IT+0x4b8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	@ (8004e7c <HAL_DMA_Start_IT+0x4bc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a67      	ldr	r2, [pc, #412]	@ (8004e80 <HAL_DMA_Start_IT+0x4c0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a65      	ldr	r2, [pc, #404]	@ (8004e84 <HAL_DMA_Start_IT+0x4c4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a64      	ldr	r2, [pc, #400]	@ (8004e88 <HAL_DMA_Start_IT+0x4c8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a62      	ldr	r2, [pc, #392]	@ (8004e8c <HAL_DMA_Start_IT+0x4cc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Start_IT+0x350>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a61      	ldr	r2, [pc, #388]	@ (8004e90 <HAL_DMA_Start_IT+0x4d0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA_Start_IT+0x354>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_Start_IT+0x356>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a37      	ldr	r2, [pc, #220]	@ (8004e34 <HAL_DMA_Start_IT+0x474>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04a      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a36      	ldr	r2, [pc, #216]	@ (8004e38 <HAL_DMA_Start_IT+0x478>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d045      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_DMA_Start_IT+0x47c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d040      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <HAL_DMA_Start_IT+0x480>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d03b      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	@ (8004e44 <HAL_DMA_Start_IT+0x484>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d036      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <HAL_DMA_Start_IT+0x488>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d031      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <HAL_DMA_Start_IT+0x48c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02c      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <HAL_DMA_Start_IT+0x490>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d027      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e54 <HAL_DMA_Start_IT+0x494>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <HAL_DMA_Start_IT+0x498>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a28      	ldr	r2, [pc, #160]	@ (8004e5c <HAL_DMA_Start_IT+0x49c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <HAL_DMA_Start_IT+0x4a0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <HAL_DMA_Start_IT+0x4a4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <HAL_DMA_Start_IT+0x4a8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_DMA_Start_IT+0x4ac>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_DMA_Start_IT+0x430>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <HAL_DMA_Start_IT+0x4b0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <HAL_DMA_Start_IT+0x442>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e012      	b.n	8004e28 <HAL_DMA_Start_IT+0x468>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e009      	b.n	8004e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	58025408 	.word	0x58025408
 8004e78:	5802541c 	.word	0x5802541c
 8004e7c:	58025430 	.word	0x58025430
 8004e80:	58025444 	.word	0x58025444
 8004e84:	58025458 	.word	0x58025458
 8004e88:	5802546c 	.word	0x5802546c
 8004e8c:	58025480 	.word	0x58025480
 8004e90:	58025494 	.word	0x58025494

08004e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7fd f8f0 	bl	8002080 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e2dc      	b.n	8005466 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d008      	beq.n	8004eca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2280      	movs	r2, #128	@ 0x80
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e2cd      	b.n	8005466 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a76      	ldr	r2, [pc, #472]	@ (80050a8 <HAL_DMA_Abort+0x214>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d04a      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a74      	ldr	r2, [pc, #464]	@ (80050ac <HAL_DMA_Abort+0x218>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d045      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a73      	ldr	r2, [pc, #460]	@ (80050b0 <HAL_DMA_Abort+0x21c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d040      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a71      	ldr	r2, [pc, #452]	@ (80050b4 <HAL_DMA_Abort+0x220>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d03b      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a70      	ldr	r2, [pc, #448]	@ (80050b8 <HAL_DMA_Abort+0x224>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d036      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6e      	ldr	r2, [pc, #440]	@ (80050bc <HAL_DMA_Abort+0x228>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d031      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80050c0 <HAL_DMA_Abort+0x22c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a6b      	ldr	r2, [pc, #428]	@ (80050c4 <HAL_DMA_Abort+0x230>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d027      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80050c8 <HAL_DMA_Abort+0x234>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a68      	ldr	r2, [pc, #416]	@ (80050cc <HAL_DMA_Abort+0x238>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a67      	ldr	r2, [pc, #412]	@ (80050d0 <HAL_DMA_Abort+0x23c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a65      	ldr	r2, [pc, #404]	@ (80050d4 <HAL_DMA_Abort+0x240>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a64      	ldr	r2, [pc, #400]	@ (80050d8 <HAL_DMA_Abort+0x244>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a62      	ldr	r2, [pc, #392]	@ (80050dc <HAL_DMA_Abort+0x248>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a61      	ldr	r2, [pc, #388]	@ (80050e0 <HAL_DMA_Abort+0x24c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_Abort+0xd6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a5f      	ldr	r2, [pc, #380]	@ (80050e4 <HAL_DMA_Abort+0x250>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_DMA_Abort+0xda>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_DMA_Abort+0xdc>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 021e 	bic.w	r2, r2, #30
 8004f82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e00a      	b.n	8004fb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 020e 	bic.w	r2, r2, #14
 8004faa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80050a8 <HAL_DMA_Abort+0x214>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d072      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80050ac <HAL_DMA_Abort+0x218>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d06d      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a39      	ldr	r2, [pc, #228]	@ (80050b0 <HAL_DMA_Abort+0x21c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d068      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a37      	ldr	r2, [pc, #220]	@ (80050b4 <HAL_DMA_Abort+0x220>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d063      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a36      	ldr	r2, [pc, #216]	@ (80050b8 <HAL_DMA_Abort+0x224>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d05e      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a34      	ldr	r2, [pc, #208]	@ (80050bc <HAL_DMA_Abort+0x228>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d059      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a33      	ldr	r2, [pc, #204]	@ (80050c0 <HAL_DMA_Abort+0x22c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d054      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a31      	ldr	r2, [pc, #196]	@ (80050c4 <HAL_DMA_Abort+0x230>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04f      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a30      	ldr	r2, [pc, #192]	@ (80050c8 <HAL_DMA_Abort+0x234>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d04a      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <HAL_DMA_Abort+0x238>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d045      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <HAL_DMA_Abort+0x23c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d040      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <HAL_DMA_Abort+0x240>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d03b      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2a      	ldr	r2, [pc, #168]	@ (80050d8 <HAL_DMA_Abort+0x244>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d036      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a28      	ldr	r2, [pc, #160]	@ (80050dc <HAL_DMA_Abort+0x248>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d031      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a27      	ldr	r2, [pc, #156]	@ (80050e0 <HAL_DMA_Abort+0x24c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d02c      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <HAL_DMA_Abort+0x250>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d027      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a24      	ldr	r2, [pc, #144]	@ (80050e8 <HAL_DMA_Abort+0x254>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d022      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <HAL_DMA_Abort+0x258>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01d      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a21      	ldr	r2, [pc, #132]	@ (80050f0 <HAL_DMA_Abort+0x25c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <HAL_DMA_Abort+0x260>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <HAL_DMA_Abort+0x264>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1c      	ldr	r2, [pc, #112]	@ (80050fc <HAL_DMA_Abort+0x268>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1b      	ldr	r2, [pc, #108]	@ (8005100 <HAL_DMA_Abort+0x26c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_Abort+0x20e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a19      	ldr	r2, [pc, #100]	@ (8005104 <HAL_DMA_Abort+0x270>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d132      	bne.n	8005108 <HAL_DMA_Abort+0x274>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e031      	b.n	800510a <HAL_DMA_Abort+0x276>
 80050a6:	bf00      	nop
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020058 	.word	0x40020058
 80050b8:	40020070 	.word	0x40020070
 80050bc:	40020088 	.word	0x40020088
 80050c0:	400200a0 	.word	0x400200a0
 80050c4:	400200b8 	.word	0x400200b8
 80050c8:	40020410 	.word	0x40020410
 80050cc:	40020428 	.word	0x40020428
 80050d0:	40020440 	.word	0x40020440
 80050d4:	40020458 	.word	0x40020458
 80050d8:	40020470 	.word	0x40020470
 80050dc:	40020488 	.word	0x40020488
 80050e0:	400204a0 	.word	0x400204a0
 80050e4:	400204b8 	.word	0x400204b8
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800511c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6d      	ldr	r2, [pc, #436]	@ (80052d8 <HAL_DMA_Abort+0x444>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d04a      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6b      	ldr	r2, [pc, #428]	@ (80052dc <HAL_DMA_Abort+0x448>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d045      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6a      	ldr	r2, [pc, #424]	@ (80052e0 <HAL_DMA_Abort+0x44c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d040      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a68      	ldr	r2, [pc, #416]	@ (80052e4 <HAL_DMA_Abort+0x450>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d03b      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a67      	ldr	r2, [pc, #412]	@ (80052e8 <HAL_DMA_Abort+0x454>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d036      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a65      	ldr	r2, [pc, #404]	@ (80052ec <HAL_DMA_Abort+0x458>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a64      	ldr	r2, [pc, #400]	@ (80052f0 <HAL_DMA_Abort+0x45c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d02c      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a62      	ldr	r2, [pc, #392]	@ (80052f4 <HAL_DMA_Abort+0x460>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d027      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a61      	ldr	r2, [pc, #388]	@ (80052f8 <HAL_DMA_Abort+0x464>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a5f      	ldr	r2, [pc, #380]	@ (80052fc <HAL_DMA_Abort+0x468>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_DMA_Abort+0x46c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5c      	ldr	r2, [pc, #368]	@ (8005304 <HAL_DMA_Abort+0x470>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5b      	ldr	r2, [pc, #364]	@ (8005308 <HAL_DMA_Abort+0x474>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a59      	ldr	r2, [pc, #356]	@ (800530c <HAL_DMA_Abort+0x478>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a58      	ldr	r2, [pc, #352]	@ (8005310 <HAL_DMA_Abort+0x47c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_DMA_Abort+0x32a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_DMA_Abort+0x480>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <HAL_DMA_Abort+0x33c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e007      	b.n	80051e0 <HAL_DMA_Abort+0x34c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051e0:	e013      	b.n	800520a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051e2:	f7fc ff4d 	bl	8002080 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d90c      	bls.n	800520a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2203      	movs	r2, #3
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e12d      	b.n	8005466 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2f      	ldr	r2, [pc, #188]	@ (80052d8 <HAL_DMA_Abort+0x444>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2d      	ldr	r2, [pc, #180]	@ (80052dc <HAL_DMA_Abort+0x448>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2c      	ldr	r2, [pc, #176]	@ (80052e0 <HAL_DMA_Abort+0x44c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <HAL_DMA_Abort+0x450>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <HAL_DMA_Abort+0x454>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <HAL_DMA_Abort+0x458>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <HAL_DMA_Abort+0x45c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a24      	ldr	r2, [pc, #144]	@ (80052f4 <HAL_DMA_Abort+0x460>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a23      	ldr	r2, [pc, #140]	@ (80052f8 <HAL_DMA_Abort+0x464>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_DMA_Abort+0x468>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <HAL_DMA_Abort+0x46c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <HAL_DMA_Abort+0x470>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <HAL_DMA_Abort+0x474>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1b      	ldr	r2, [pc, #108]	@ (800530c <HAL_DMA_Abort+0x478>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005310 <HAL_DMA_Abort+0x47c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_DMA_Abort+0x422>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_DMA_Abort+0x480>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <HAL_DMA_Abort+0x426>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <HAL_DMA_Abort+0x428>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02b      	beq.n	8005318 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	223f      	movs	r2, #63	@ 0x3f
 80052d0:	409a      	lsls	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	e02a      	b.n	800532e <HAL_DMA_Abort+0x49a>
 80052d8:	40020010 	.word	0x40020010
 80052dc:	40020028 	.word	0x40020028
 80052e0:	40020040 	.word	0x40020040
 80052e4:	40020058 	.word	0x40020058
 80052e8:	40020070 	.word	0x40020070
 80052ec:	40020088 	.word	0x40020088
 80052f0:	400200a0 	.word	0x400200a0
 80052f4:	400200b8 	.word	0x400200b8
 80052f8:	40020410 	.word	0x40020410
 80052fc:	40020428 	.word	0x40020428
 8005300:	40020440 	.word	0x40020440
 8005304:	40020458 	.word	0x40020458
 8005308:	40020470 	.word	0x40020470
 800530c:	40020488 	.word	0x40020488
 8005310:	400204a0 	.word	0x400204a0
 8005314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2201      	movs	r2, #1
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a4f      	ldr	r2, [pc, #316]	@ (8005470 <HAL_DMA_Abort+0x5dc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d072      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a4d      	ldr	r2, [pc, #308]	@ (8005474 <HAL_DMA_Abort+0x5e0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d06d      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4c      	ldr	r2, [pc, #304]	@ (8005478 <HAL_DMA_Abort+0x5e4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d068      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a4a      	ldr	r2, [pc, #296]	@ (800547c <HAL_DMA_Abort+0x5e8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d063      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a49      	ldr	r2, [pc, #292]	@ (8005480 <HAL_DMA_Abort+0x5ec>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d05e      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a47      	ldr	r2, [pc, #284]	@ (8005484 <HAL_DMA_Abort+0x5f0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d059      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a46      	ldr	r2, [pc, #280]	@ (8005488 <HAL_DMA_Abort+0x5f4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d054      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a44      	ldr	r2, [pc, #272]	@ (800548c <HAL_DMA_Abort+0x5f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d04f      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a43      	ldr	r2, [pc, #268]	@ (8005490 <HAL_DMA_Abort+0x5fc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d04a      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a41      	ldr	r2, [pc, #260]	@ (8005494 <HAL_DMA_Abort+0x600>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d045      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a40      	ldr	r2, [pc, #256]	@ (8005498 <HAL_DMA_Abort+0x604>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d040      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3e      	ldr	r2, [pc, #248]	@ (800549c <HAL_DMA_Abort+0x608>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d03b      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3d      	ldr	r2, [pc, #244]	@ (80054a0 <HAL_DMA_Abort+0x60c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d036      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a3b      	ldr	r2, [pc, #236]	@ (80054a4 <HAL_DMA_Abort+0x610>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d031      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a3a      	ldr	r2, [pc, #232]	@ (80054a8 <HAL_DMA_Abort+0x614>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d02c      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a38      	ldr	r2, [pc, #224]	@ (80054ac <HAL_DMA_Abort+0x618>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d027      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a37      	ldr	r2, [pc, #220]	@ (80054b0 <HAL_DMA_Abort+0x61c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a35      	ldr	r2, [pc, #212]	@ (80054b4 <HAL_DMA_Abort+0x620>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01d      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a34      	ldr	r2, [pc, #208]	@ (80054b8 <HAL_DMA_Abort+0x624>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d018      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a32      	ldr	r2, [pc, #200]	@ (80054bc <HAL_DMA_Abort+0x628>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a31      	ldr	r2, [pc, #196]	@ (80054c0 <HAL_DMA_Abort+0x62c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2f      	ldr	r2, [pc, #188]	@ (80054c4 <HAL_DMA_Abort+0x630>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <HAL_DMA_Abort+0x634>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_DMA_Abort+0x58a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <HAL_DMA_Abort+0x638>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_DMA_Abort+0x58e>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_DMA_Abort+0x590>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005430:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005448:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005452:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40020010 	.word	0x40020010
 8005474:	40020028 	.word	0x40020028
 8005478:	40020040 	.word	0x40020040
 800547c:	40020058 	.word	0x40020058
 8005480:	40020070 	.word	0x40020070
 8005484:	40020088 	.word	0x40020088
 8005488:	400200a0 	.word	0x400200a0
 800548c:	400200b8 	.word	0x400200b8
 8005490:	40020410 	.word	0x40020410
 8005494:	40020428 	.word	0x40020428
 8005498:	40020440 	.word	0x40020440
 800549c:	40020458 	.word	0x40020458
 80054a0:	40020470 	.word	0x40020470
 80054a4:	40020488 	.word	0x40020488
 80054a8:	400204a0 	.word	0x400204a0
 80054ac:	400204b8 	.word	0x400204b8
 80054b0:	58025408 	.word	0x58025408
 80054b4:	5802541c 	.word	0x5802541c
 80054b8:	58025430 	.word	0x58025430
 80054bc:	58025444 	.word	0x58025444
 80054c0:	58025458 	.word	0x58025458
 80054c4:	5802546c 	.word	0x5802546c
 80054c8:	58025480 	.word	0x58025480
 80054cc:	58025494 	.word	0x58025494

080054d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e237      	b.n	8005952 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2280      	movs	r2, #128	@ 0x80
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e22c      	b.n	8005952 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005670 <HAL_DMA_Abort_IT+0x1a0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04a      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a5b      	ldr	r2, [pc, #364]	@ (8005674 <HAL_DMA_Abort_IT+0x1a4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d045      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a59      	ldr	r2, [pc, #356]	@ (8005678 <HAL_DMA_Abort_IT+0x1a8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d040      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a58      	ldr	r2, [pc, #352]	@ (800567c <HAL_DMA_Abort_IT+0x1ac>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d03b      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a56      	ldr	r2, [pc, #344]	@ (8005680 <HAL_DMA_Abort_IT+0x1b0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d036      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a55      	ldr	r2, [pc, #340]	@ (8005684 <HAL_DMA_Abort_IT+0x1b4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d031      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a53      	ldr	r2, [pc, #332]	@ (8005688 <HAL_DMA_Abort_IT+0x1b8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02c      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a52      	ldr	r2, [pc, #328]	@ (800568c <HAL_DMA_Abort_IT+0x1bc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d027      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a50      	ldr	r2, [pc, #320]	@ (8005690 <HAL_DMA_Abort_IT+0x1c0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a4f      	ldr	r2, [pc, #316]	@ (8005694 <HAL_DMA_Abort_IT+0x1c4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01d      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a4d      	ldr	r2, [pc, #308]	@ (8005698 <HAL_DMA_Abort_IT+0x1c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a4c      	ldr	r2, [pc, #304]	@ (800569c <HAL_DMA_Abort_IT+0x1cc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a4a      	ldr	r2, [pc, #296]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a49      	ldr	r2, [pc, #292]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a47      	ldr	r2, [pc, #284]	@ (80056a8 <HAL_DMA_Abort_IT+0x1d8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a46      	ldr	r2, [pc, #280]	@ (80056ac <HAL_DMA_Abort_IT+0x1dc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <HAL_DMA_Abort_IT+0xcc>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <HAL_DMA_Abort_IT+0xce>
 800559c:	2300      	movs	r3, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8086 	beq.w	80056b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2204      	movs	r2, #4
 80055a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005670 <HAL_DMA_Abort_IT+0x1a0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d04a      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <HAL_DMA_Abort_IT+0x1a4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d045      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005678 <HAL_DMA_Abort_IT+0x1a8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d040      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a2b      	ldr	r2, [pc, #172]	@ (800567c <HAL_DMA_Abort_IT+0x1ac>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d03b      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a29      	ldr	r2, [pc, #164]	@ (8005680 <HAL_DMA_Abort_IT+0x1b0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d036      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a28      	ldr	r2, [pc, #160]	@ (8005684 <HAL_DMA_Abort_IT+0x1b4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d031      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a26      	ldr	r2, [pc, #152]	@ (8005688 <HAL_DMA_Abort_IT+0x1b8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d02c      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a25      	ldr	r2, [pc, #148]	@ (800568c <HAL_DMA_Abort_IT+0x1bc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d027      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a23      	ldr	r2, [pc, #140]	@ (8005690 <HAL_DMA_Abort_IT+0x1c0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a22      	ldr	r2, [pc, #136]	@ (8005694 <HAL_DMA_Abort_IT+0x1c4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d01d      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a20      	ldr	r2, [pc, #128]	@ (8005698 <HAL_DMA_Abort_IT+0x1c8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1f      	ldr	r2, [pc, #124]	@ (800569c <HAL_DMA_Abort_IT+0x1cc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <HAL_DMA_Abort_IT+0x1d8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_DMA_Abort_IT+0x17c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <HAL_DMA_Abort_IT+0x1dc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d108      	bne.n	800565e <HAL_DMA_Abort_IT+0x18e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e178      	b.n	8005950 <HAL_DMA_Abort_IT+0x480>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e16f      	b.n	8005950 <HAL_DMA_Abort_IT+0x480>
 8005670:	40020010 	.word	0x40020010
 8005674:	40020028 	.word	0x40020028
 8005678:	40020040 	.word	0x40020040
 800567c:	40020058 	.word	0x40020058
 8005680:	40020070 	.word	0x40020070
 8005684:	40020088 	.word	0x40020088
 8005688:	400200a0 	.word	0x400200a0
 800568c:	400200b8 	.word	0x400200b8
 8005690:	40020410 	.word	0x40020410
 8005694:	40020428 	.word	0x40020428
 8005698:	40020440 	.word	0x40020440
 800569c:	40020458 	.word	0x40020458
 80056a0:	40020470 	.word	0x40020470
 80056a4:	40020488 	.word	0x40020488
 80056a8:	400204a0 	.word	0x400204a0
 80056ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 020e 	bic.w	r2, r2, #14
 80056be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005878 <HAL_DMA_Abort_IT+0x3a8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d04a      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a6b      	ldr	r2, [pc, #428]	@ (800587c <HAL_DMA_Abort_IT+0x3ac>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d045      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a69      	ldr	r2, [pc, #420]	@ (8005880 <HAL_DMA_Abort_IT+0x3b0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d040      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a68      	ldr	r2, [pc, #416]	@ (8005884 <HAL_DMA_Abort_IT+0x3b4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d03b      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a66      	ldr	r2, [pc, #408]	@ (8005888 <HAL_DMA_Abort_IT+0x3b8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d036      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a65      	ldr	r2, [pc, #404]	@ (800588c <HAL_DMA_Abort_IT+0x3bc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a63      	ldr	r2, [pc, #396]	@ (8005890 <HAL_DMA_Abort_IT+0x3c0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02c      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a62      	ldr	r2, [pc, #392]	@ (8005894 <HAL_DMA_Abort_IT+0x3c4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d027      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a60      	ldr	r2, [pc, #384]	@ (8005898 <HAL_DMA_Abort_IT+0x3c8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a5f      	ldr	r2, [pc, #380]	@ (800589c <HAL_DMA_Abort_IT+0x3cc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d01d      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a5d      	ldr	r2, [pc, #372]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a5c      	ldr	r2, [pc, #368]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5a      	ldr	r2, [pc, #360]	@ (80058a8 <HAL_DMA_Abort_IT+0x3d8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a59      	ldr	r2, [pc, #356]	@ (80058ac <HAL_DMA_Abort_IT+0x3dc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a57      	ldr	r2, [pc, #348]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_DMA_Abort_IT+0x290>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a56      	ldr	r2, [pc, #344]	@ (80058b4 <HAL_DMA_Abort_IT+0x3e4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <HAL_DMA_Abort_IT+0x2a2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e007      	b.n	8005782 <HAL_DMA_Abort_IT+0x2b2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3c      	ldr	r2, [pc, #240]	@ (8005878 <HAL_DMA_Abort_IT+0x3a8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d072      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3a      	ldr	r2, [pc, #232]	@ (800587c <HAL_DMA_Abort_IT+0x3ac>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d06d      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a39      	ldr	r2, [pc, #228]	@ (8005880 <HAL_DMA_Abort_IT+0x3b0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d068      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a37      	ldr	r2, [pc, #220]	@ (8005884 <HAL_DMA_Abort_IT+0x3b4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d063      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a36      	ldr	r2, [pc, #216]	@ (8005888 <HAL_DMA_Abort_IT+0x3b8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d05e      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a34      	ldr	r2, [pc, #208]	@ (800588c <HAL_DMA_Abort_IT+0x3bc>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d059      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	@ (8005890 <HAL_DMA_Abort_IT+0x3c0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d054      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a31      	ldr	r2, [pc, #196]	@ (8005894 <HAL_DMA_Abort_IT+0x3c4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d04f      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a30      	ldr	r2, [pc, #192]	@ (8005898 <HAL_DMA_Abort_IT+0x3c8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	@ (800589c <HAL_DMA_Abort_IT+0x3cc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2d      	ldr	r2, [pc, #180]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2a      	ldr	r2, [pc, #168]	@ (80058a8 <HAL_DMA_Abort_IT+0x3d8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a28      	ldr	r2, [pc, #160]	@ (80058ac <HAL_DMA_Abort_IT+0x3dc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <HAL_DMA_Abort_IT+0x3e4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a24      	ldr	r2, [pc, #144]	@ (80058b8 <HAL_DMA_Abort_IT+0x3e8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <HAL_DMA_Abort_IT+0x3ec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a21      	ldr	r2, [pc, #132]	@ (80058c0 <HAL_DMA_Abort_IT+0x3f0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1f      	ldr	r2, [pc, #124]	@ (80058c4 <HAL_DMA_Abort_IT+0x3f4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1e      	ldr	r2, [pc, #120]	@ (80058c8 <HAL_DMA_Abort_IT+0x3f8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1c      	ldr	r2, [pc, #112]	@ (80058cc <HAL_DMA_Abort_IT+0x3fc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1b      	ldr	r2, [pc, #108]	@ (80058d0 <HAL_DMA_Abort_IT+0x400>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_DMA_Abort_IT+0x3a2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <HAL_DMA_Abort_IT+0x404>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d132      	bne.n	80058d8 <HAL_DMA_Abort_IT+0x408>
 8005872:	2301      	movs	r3, #1
 8005874:	e031      	b.n	80058da <HAL_DMA_Abort_IT+0x40a>
 8005876:	bf00      	nop
 8005878:	40020010 	.word	0x40020010
 800587c:	40020028 	.word	0x40020028
 8005880:	40020040 	.word	0x40020040
 8005884:	40020058 	.word	0x40020058
 8005888:	40020070 	.word	0x40020070
 800588c:	40020088 	.word	0x40020088
 8005890:	400200a0 	.word	0x400200a0
 8005894:	400200b8 	.word	0x400200b8
 8005898:	40020410 	.word	0x40020410
 800589c:	40020428 	.word	0x40020428
 80058a0:	40020440 	.word	0x40020440
 80058a4:	40020458 	.word	0x40020458
 80058a8:	40020470 	.word	0x40020470
 80058ac:	40020488 	.word	0x40020488
 80058b0:	400204a0 	.word	0x400204a0
 80058b4:	400204b8 	.word	0x400204b8
 80058b8:	58025408 	.word	0x58025408
 80058bc:	5802541c 	.word	0x5802541c
 80058c0:	58025430 	.word	0x58025430
 80058c4:	58025444 	.word	0x58025444
 80058c8:	58025458 	.word	0x58025458
 80058cc:	5802546c 	.word	0x5802546c
 80058d0:	58025480 	.word	0x58025480
 80058d4:	58025494 	.word	0x58025494
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d028      	beq.n	8005930 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800590c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005924:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800592e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop

0800595c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	@ 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005968:	4b67      	ldr	r3, [pc, #412]	@ (8005b08 <HAL_DMA_IRQHandler+0x1ac>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a67      	ldr	r2, [pc, #412]	@ (8005b0c <HAL_DMA_IRQHandler+0x1b0>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005980:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5f      	ldr	r2, [pc, #380]	@ (8005b10 <HAL_DMA_IRQHandler+0x1b4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d04a      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_DMA_IRQHandler+0x1b8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d045      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005b18 <HAL_DMA_IRQHandler+0x1bc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d040      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5a      	ldr	r2, [pc, #360]	@ (8005b1c <HAL_DMA_IRQHandler+0x1c0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d03b      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a59      	ldr	r2, [pc, #356]	@ (8005b20 <HAL_DMA_IRQHandler+0x1c4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d036      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a57      	ldr	r2, [pc, #348]	@ (8005b24 <HAL_DMA_IRQHandler+0x1c8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d031      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a56      	ldr	r2, [pc, #344]	@ (8005b28 <HAL_DMA_IRQHandler+0x1cc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d02c      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a54      	ldr	r2, [pc, #336]	@ (8005b2c <HAL_DMA_IRQHandler+0x1d0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d027      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a53      	ldr	r2, [pc, #332]	@ (8005b30 <HAL_DMA_IRQHandler+0x1d4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a51      	ldr	r2, [pc, #324]	@ (8005b34 <HAL_DMA_IRQHandler+0x1d8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01d      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a50      	ldr	r2, [pc, #320]	@ (8005b38 <HAL_DMA_IRQHandler+0x1dc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a4e      	ldr	r2, [pc, #312]	@ (8005b3c <HAL_DMA_IRQHandler+0x1e0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8005b40 <HAL_DMA_IRQHandler+0x1e4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4b      	ldr	r2, [pc, #300]	@ (8005b44 <HAL_DMA_IRQHandler+0x1e8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b48 <HAL_DMA_IRQHandler+0x1ec>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xd2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a48      	ldr	r2, [pc, #288]	@ (8005b4c <HAL_DMA_IRQHandler+0x1f0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_IRQHandler+0xd6>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_DMA_IRQHandler+0xd8>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 842b 	beq.w	8006290 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2208      	movs	r2, #8
 8005a44:	409a      	lsls	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80a2 	beq.w	8005b94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	@ (8005b10 <HAL_DMA_IRQHandler+0x1b4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b14 <HAL_DMA_IRQHandler+0x1b8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d045      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <HAL_DMA_IRQHandler+0x1bc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d040      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <HAL_DMA_IRQHandler+0x1c0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	@ (8005b20 <HAL_DMA_IRQHandler+0x1c4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d036      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a27      	ldr	r2, [pc, #156]	@ (8005b24 <HAL_DMA_IRQHandler+0x1c8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d031      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a25      	ldr	r2, [pc, #148]	@ (8005b28 <HAL_DMA_IRQHandler+0x1cc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <HAL_DMA_IRQHandler+0x1d0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d027      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	@ (8005b30 <HAL_DMA_IRQHandler+0x1d4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a21      	ldr	r2, [pc, #132]	@ (8005b34 <HAL_DMA_IRQHandler+0x1d8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b38 <HAL_DMA_IRQHandler+0x1dc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <HAL_DMA_IRQHandler+0x1e0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b40 <HAL_DMA_IRQHandler+0x1e4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <HAL_DMA_IRQHandler+0x1e8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <HAL_DMA_IRQHandler+0x1ec>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x194>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <HAL_DMA_IRQHandler+0x1f0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d12f      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x1f4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e02e      	b.n	8005b64 <HAL_DMA_IRQHandler+0x208>
 8005b06:	bf00      	nop
 8005b08:	24000010 	.word	0x24000010
 8005b0c:	1b4e81b5 	.word	0x1b4e81b5
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0204 	bic.w	r2, r2, #4
 8005b76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2208      	movs	r2, #8
 8005b82:	409a      	lsls	r2, r3
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	f043 0201 	orr.w	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d06e      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a69      	ldr	r2, [pc, #420]	@ (8005d54 <HAL_DMA_IRQHandler+0x3f8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d04a      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a67      	ldr	r2, [pc, #412]	@ (8005d58 <HAL_DMA_IRQHandler+0x3fc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d045      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a66      	ldr	r2, [pc, #408]	@ (8005d5c <HAL_DMA_IRQHandler+0x400>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d040      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a64      	ldr	r2, [pc, #400]	@ (8005d60 <HAL_DMA_IRQHandler+0x404>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d03b      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a63      	ldr	r2, [pc, #396]	@ (8005d64 <HAL_DMA_IRQHandler+0x408>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d036      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a61      	ldr	r2, [pc, #388]	@ (8005d68 <HAL_DMA_IRQHandler+0x40c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d031      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a60      	ldr	r2, [pc, #384]	@ (8005d6c <HAL_DMA_IRQHandler+0x410>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d02c      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d70 <HAL_DMA_IRQHandler+0x414>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d027      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8005d74 <HAL_DMA_IRQHandler+0x418>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5b      	ldr	r2, [pc, #364]	@ (8005d78 <HAL_DMA_IRQHandler+0x41c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01d      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a5a      	ldr	r2, [pc, #360]	@ (8005d7c <HAL_DMA_IRQHandler+0x420>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a58      	ldr	r2, [pc, #352]	@ (8005d80 <HAL_DMA_IRQHandler+0x424>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a57      	ldr	r2, [pc, #348]	@ (8005d84 <HAL_DMA_IRQHandler+0x428>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a55      	ldr	r2, [pc, #340]	@ (8005d88 <HAL_DMA_IRQHandler+0x42c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a54      	ldr	r2, [pc, #336]	@ (8005d8c <HAL_DMA_IRQHandler+0x430>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x2ee>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a52      	ldr	r2, [pc, #328]	@ (8005d90 <HAL_DMA_IRQHandler+0x434>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10a      	bne.n	8005c60 <HAL_DMA_IRQHandler+0x304>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf14      	ite	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	2300      	moveq	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e003      	b.n	8005c68 <HAL_DMA_IRQHandler+0x30c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	f043 0202 	orr.w	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	2204      	movs	r2, #4
 8005c92:	409a      	lsls	r2, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 808f 	beq.w	8005dbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <HAL_DMA_IRQHandler+0x3f8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04a      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2a      	ldr	r2, [pc, #168]	@ (8005d58 <HAL_DMA_IRQHandler+0x3fc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d045      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a29      	ldr	r2, [pc, #164]	@ (8005d5c <HAL_DMA_IRQHandler+0x400>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a27      	ldr	r2, [pc, #156]	@ (8005d60 <HAL_DMA_IRQHandler+0x404>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d03b      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a26      	ldr	r2, [pc, #152]	@ (8005d64 <HAL_DMA_IRQHandler+0x408>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a24      	ldr	r2, [pc, #144]	@ (8005d68 <HAL_DMA_IRQHandler+0x40c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d031      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a23      	ldr	r2, [pc, #140]	@ (8005d6c <HAL_DMA_IRQHandler+0x410>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02c      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a21      	ldr	r2, [pc, #132]	@ (8005d70 <HAL_DMA_IRQHandler+0x414>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a20      	ldr	r2, [pc, #128]	@ (8005d74 <HAL_DMA_IRQHandler+0x418>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <HAL_DMA_IRQHandler+0x41c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <HAL_DMA_IRQHandler+0x420>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	@ (8005d80 <HAL_DMA_IRQHandler+0x424>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d84 <HAL_DMA_IRQHandler+0x428>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	@ (8005d88 <HAL_DMA_IRQHandler+0x42c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	@ (8005d8c <HAL_DMA_IRQHandler+0x430>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x3e2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <HAL_DMA_IRQHandler+0x434>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d12a      	bne.n	8005d94 <HAL_DMA_IRQHandler+0x438>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e023      	b.n	8005d9c <HAL_DMA_IRQHandler+0x440>
 8005d54:	40020010 	.word	0x40020010
 8005d58:	40020028 	.word	0x40020028
 8005d5c:	40020040 	.word	0x40020040
 8005d60:	40020058 	.word	0x40020058
 8005d64:	40020070 	.word	0x40020070
 8005d68:	40020088 	.word	0x40020088
 8005d6c:	400200a0 	.word	0x400200a0
 8005d70:	400200b8 	.word	0x400200b8
 8005d74:	40020410 	.word	0x40020410
 8005d78:	40020428 	.word	0x40020428
 8005d7c:	40020440 	.word	0x40020440
 8005d80:	40020458 	.word	0x40020458
 8005d84:	40020470 	.word	0x40020470
 8005d88:	40020488 	.word	0x40020488
 8005d8c:	400204a0 	.word	0x400204a0
 8005d90:	400204b8 	.word	0x400204b8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00d      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2204      	movs	r2, #4
 8005daa:	409a      	lsls	r2, r3
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db4:	f043 0204 	orr.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80a6 	beq.w	8005f1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a85      	ldr	r2, [pc, #532]	@ (8005fec <HAL_DMA_IRQHandler+0x690>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04a      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a83      	ldr	r2, [pc, #524]	@ (8005ff0 <HAL_DMA_IRQHandler+0x694>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d045      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a82      	ldr	r2, [pc, #520]	@ (8005ff4 <HAL_DMA_IRQHandler+0x698>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d040      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a80      	ldr	r2, [pc, #512]	@ (8005ff8 <HAL_DMA_IRQHandler+0x69c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a7f      	ldr	r2, [pc, #508]	@ (8005ffc <HAL_DMA_IRQHandler+0x6a0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d036      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a7d      	ldr	r2, [pc, #500]	@ (8006000 <HAL_DMA_IRQHandler+0x6a4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d031      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7c      	ldr	r2, [pc, #496]	@ (8006004 <HAL_DMA_IRQHandler+0x6a8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d02c      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006008 <HAL_DMA_IRQHandler+0x6ac>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a79      	ldr	r2, [pc, #484]	@ (800600c <HAL_DMA_IRQHandler+0x6b0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a77      	ldr	r2, [pc, #476]	@ (8006010 <HAL_DMA_IRQHandler+0x6b4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a76      	ldr	r2, [pc, #472]	@ (8006014 <HAL_DMA_IRQHandler+0x6b8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a74      	ldr	r2, [pc, #464]	@ (8006018 <HAL_DMA_IRQHandler+0x6bc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a73      	ldr	r2, [pc, #460]	@ (800601c <HAL_DMA_IRQHandler+0x6c0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a71      	ldr	r2, [pc, #452]	@ (8006020 <HAL_DMA_IRQHandler+0x6c4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a70      	ldr	r2, [pc, #448]	@ (8006024 <HAL_DMA_IRQHandler+0x6c8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x516>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006028 <HAL_DMA_IRQHandler+0x6cc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10a      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x52c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e009      	b.n	8005e9c <HAL_DMA_IRQHandler+0x540>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d03e      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2210      	movs	r2, #16
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d108      	bne.n	8005ede <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d024      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
 8005edc:	e01f      	b.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01b      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	e016      	b.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0208 	bic.w	r2, r2, #8
 8005f0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2220      	movs	r2, #32
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8110 	beq.w	8006154 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2c      	ldr	r2, [pc, #176]	@ (8005fec <HAL_DMA_IRQHandler+0x690>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d04a      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff0 <HAL_DMA_IRQHandler+0x694>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d045      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	@ (8005ff4 <HAL_DMA_IRQHandler+0x698>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d040      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a28      	ldr	r2, [pc, #160]	@ (8005ff8 <HAL_DMA_IRQHandler+0x69c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d03b      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_DMA_IRQHandler+0x6a0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d036      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a25      	ldr	r2, [pc, #148]	@ (8006000 <HAL_DMA_IRQHandler+0x6a4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d031      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	@ (8006004 <HAL_DMA_IRQHandler+0x6a8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d02c      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a22      	ldr	r2, [pc, #136]	@ (8006008 <HAL_DMA_IRQHandler+0x6ac>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d027      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <HAL_DMA_IRQHandler+0x6b0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d022      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1f      	ldr	r2, [pc, #124]	@ (8006010 <HAL_DMA_IRQHandler+0x6b4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d01d      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006014 <HAL_DMA_IRQHandler+0x6b8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d018      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006018 <HAL_DMA_IRQHandler+0x6bc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800601c <HAL_DMA_IRQHandler+0x6c0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a19      	ldr	r2, [pc, #100]	@ (8006020 <HAL_DMA_IRQHandler+0x6c4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <HAL_DMA_IRQHandler+0x6c8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x678>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <HAL_DMA_IRQHandler+0x6cc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d12b      	bne.n	800602c <HAL_DMA_IRQHandler+0x6d0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	e02a      	b.n	8006040 <HAL_DMA_IRQHandler+0x6e4>
 8005fea:	bf00      	nop
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf14      	ite	ne
 800603a:	2301      	movne	r3, #1
 800603c:	2300      	moveq	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8087 	beq.w	8006154 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2220      	movs	r2, #32
 8006050:	409a      	lsls	r2, r3
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b04      	cmp	r3, #4
 8006060:	d139      	bne.n	80060d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0216 	bic.w	r2, r2, #22
 8006070:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006080:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <HAL_DMA_IRQHandler+0x736>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0208 	bic.w	r2, r2, #8
 80060a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	223f      	movs	r2, #63	@ 0x3f
 80060ac:	409a      	lsls	r2, r3
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 834a 	beq.w	8006760 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
          }
          return;
 80060d4:	e344      	b.n	8006760 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d018      	beq.n	8006116 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d02c      	beq.n	8006154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	e027      	b.n	8006154 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d023      	beq.n	8006154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
 8006114:	e01e      	b.n	8006154 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0210 	bic.w	r2, r2, #16
 8006132:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8306 	beq.w	800676a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8088 	beq.w	800627c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2204      	movs	r2, #4
 8006170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7a      	ldr	r2, [pc, #488]	@ (8006364 <HAL_DMA_IRQHandler+0xa08>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d04a      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a79      	ldr	r2, [pc, #484]	@ (8006368 <HAL_DMA_IRQHandler+0xa0c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d045      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a77      	ldr	r2, [pc, #476]	@ (800636c <HAL_DMA_IRQHandler+0xa10>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d040      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a76      	ldr	r2, [pc, #472]	@ (8006370 <HAL_DMA_IRQHandler+0xa14>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d03b      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a74      	ldr	r2, [pc, #464]	@ (8006374 <HAL_DMA_IRQHandler+0xa18>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d036      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	@ (8006378 <HAL_DMA_IRQHandler+0xa1c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d031      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a71      	ldr	r2, [pc, #452]	@ (800637c <HAL_DMA_IRQHandler+0xa20>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02c      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a70      	ldr	r2, [pc, #448]	@ (8006380 <HAL_DMA_IRQHandler+0xa24>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d027      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006384 <HAL_DMA_IRQHandler+0xa28>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d022      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006388 <HAL_DMA_IRQHandler+0xa2c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01d      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6b      	ldr	r2, [pc, #428]	@ (800638c <HAL_DMA_IRQHandler+0xa30>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d018      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006390 <HAL_DMA_IRQHandler+0xa34>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a68      	ldr	r2, [pc, #416]	@ (8006394 <HAL_DMA_IRQHandler+0xa38>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00e      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a67      	ldr	r2, [pc, #412]	@ (8006398 <HAL_DMA_IRQHandler+0xa3c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a65      	ldr	r2, [pc, #404]	@ (800639c <HAL_DMA_IRQHandler+0xa40>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_DMA_IRQHandler+0x8b8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a64      	ldr	r2, [pc, #400]	@ (80063a0 <HAL_DMA_IRQHandler+0xa44>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <HAL_DMA_IRQHandler+0x8ca>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e007      	b.n	8006236 <HAL_DMA_IRQHandler+0x8da>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623e:	429a      	cmp	r2, r3
 8006240:	d307      	bcc.n	8006252 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f2      	bne.n	8006236 <HAL_DMA_IRQHandler+0x8da>
 8006250:	e000      	b.n	8006254 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006252:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800626a:	e003      	b.n	8006274 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8272 	beq.w	800676a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
 800628e:	e26c      	b.n	800676a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a43      	ldr	r2, [pc, #268]	@ (80063a4 <HAL_DMA_IRQHandler+0xa48>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d022      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a42      	ldr	r2, [pc, #264]	@ (80063a8 <HAL_DMA_IRQHandler+0xa4c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d01d      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a40      	ldr	r2, [pc, #256]	@ (80063ac <HAL_DMA_IRQHandler+0xa50>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d018      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a3f      	ldr	r2, [pc, #252]	@ (80063b0 <HAL_DMA_IRQHandler+0xa54>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3d      	ldr	r2, [pc, #244]	@ (80063b4 <HAL_DMA_IRQHandler+0xa58>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a3c      	ldr	r2, [pc, #240]	@ (80063b8 <HAL_DMA_IRQHandler+0xa5c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3a      	ldr	r2, [pc, #232]	@ (80063bc <HAL_DMA_IRQHandler+0xa60>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x984>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a39      	ldr	r2, [pc, #228]	@ (80063c0 <HAL_DMA_IRQHandler+0xa64>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d101      	bne.n	80062e4 <HAL_DMA_IRQHandler+0x988>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <HAL_DMA_IRQHandler+0x98a>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 823f 	beq.w	800676a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2204      	movs	r2, #4
 80062fe:	409a      	lsls	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80cd 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xb48>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80c7 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2204      	movs	r2, #4
 8006320:	409a      	lsls	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d049      	beq.n	80063c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8210 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800634c:	e20a      	b.n	8006764 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8206 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006360:	e200      	b.n	8006764 <HAL_DMA_IRQHandler+0xe08>
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d160      	bne.n	8006490 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7f      	ldr	r2, [pc, #508]	@ (80065d0 <HAL_DMA_IRQHandler+0xc74>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d04a      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a7d      	ldr	r2, [pc, #500]	@ (80065d4 <HAL_DMA_IRQHandler+0xc78>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d045      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7c      	ldr	r2, [pc, #496]	@ (80065d8 <HAL_DMA_IRQHandler+0xc7c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d040      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7a      	ldr	r2, [pc, #488]	@ (80065dc <HAL_DMA_IRQHandler+0xc80>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03b      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a79      	ldr	r2, [pc, #484]	@ (80065e0 <HAL_DMA_IRQHandler+0xc84>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d036      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a77      	ldr	r2, [pc, #476]	@ (80065e4 <HAL_DMA_IRQHandler+0xc88>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d031      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a76      	ldr	r2, [pc, #472]	@ (80065e8 <HAL_DMA_IRQHandler+0xc8c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d02c      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a74      	ldr	r2, [pc, #464]	@ (80065ec <HAL_DMA_IRQHandler+0xc90>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d027      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a73      	ldr	r2, [pc, #460]	@ (80065f0 <HAL_DMA_IRQHandler+0xc94>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a71      	ldr	r2, [pc, #452]	@ (80065f4 <HAL_DMA_IRQHandler+0xc98>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01d      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a70      	ldr	r2, [pc, #448]	@ (80065f8 <HAL_DMA_IRQHandler+0xc9c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a6e      	ldr	r2, [pc, #440]	@ (80065fc <HAL_DMA_IRQHandler+0xca0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6d      	ldr	r2, [pc, #436]	@ (8006600 <HAL_DMA_IRQHandler+0xca4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6b      	ldr	r2, [pc, #428]	@ (8006604 <HAL_DMA_IRQHandler+0xca8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6a      	ldr	r2, [pc, #424]	@ (8006608 <HAL_DMA_IRQHandler+0xcac>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_DMA_IRQHandler+0xb12>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a68      	ldr	r2, [pc, #416]	@ (800660c <HAL_DMA_IRQHandler+0xcb0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d108      	bne.n	8006480 <HAL_DMA_IRQHandler+0xb24>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0208 	bic.w	r2, r2, #8
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e007      	b.n	8006490 <HAL_DMA_IRQHandler+0xb34>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0204 	bic.w	r2, r2, #4
 800648e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8165 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a2:	e15f      	b.n	8006764 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2202      	movs	r2, #2
 80064ae:	409a      	lsls	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80c5 	beq.w	8006644 <HAL_DMA_IRQHandler+0xce8>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80bf 	beq.w	8006644 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2202      	movs	r2, #2
 80064d0:	409a      	lsls	r2, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d018      	beq.n	8006512 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 813a 	beq.w	8006768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064fc:	e134      	b.n	8006768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8130 	beq.w	8006768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006510:	e12a      	b.n	8006768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 8089 	bne.w	8006630 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <HAL_DMA_IRQHandler+0xc74>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a29      	ldr	r2, [pc, #164]	@ (80065d4 <HAL_DMA_IRQHandler+0xc78>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a28      	ldr	r2, [pc, #160]	@ (80065d8 <HAL_DMA_IRQHandler+0xc7c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a26      	ldr	r2, [pc, #152]	@ (80065dc <HAL_DMA_IRQHandler+0xc80>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a25      	ldr	r2, [pc, #148]	@ (80065e0 <HAL_DMA_IRQHandler+0xc84>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a23      	ldr	r2, [pc, #140]	@ (80065e4 <HAL_DMA_IRQHandler+0xc88>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a22      	ldr	r2, [pc, #136]	@ (80065e8 <HAL_DMA_IRQHandler+0xc8c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a20      	ldr	r2, [pc, #128]	@ (80065ec <HAL_DMA_IRQHandler+0xc90>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1f      	ldr	r2, [pc, #124]	@ (80065f0 <HAL_DMA_IRQHandler+0xc94>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1d      	ldr	r2, [pc, #116]	@ (80065f4 <HAL_DMA_IRQHandler+0xc98>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <HAL_DMA_IRQHandler+0xc9c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1a      	ldr	r2, [pc, #104]	@ (80065fc <HAL_DMA_IRQHandler+0xca0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a19      	ldr	r2, [pc, #100]	@ (8006600 <HAL_DMA_IRQHandler+0xca4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a17      	ldr	r2, [pc, #92]	@ (8006604 <HAL_DMA_IRQHandler+0xca8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a16      	ldr	r2, [pc, #88]	@ (8006608 <HAL_DMA_IRQHandler+0xcac>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_IRQHandler+0xc62>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a14      	ldr	r2, [pc, #80]	@ (800660c <HAL_DMA_IRQHandler+0xcb0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d128      	bne.n	8006610 <HAL_DMA_IRQHandler+0xcb4>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0214 	bic.w	r2, r2, #20
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e027      	b.n	8006620 <HAL_DMA_IRQHandler+0xcc4>
 80065d0:	40020010 	.word	0x40020010
 80065d4:	40020028 	.word	0x40020028
 80065d8:	40020040 	.word	0x40020040
 80065dc:	40020058 	.word	0x40020058
 80065e0:	40020070 	.word	0x40020070
 80065e4:	40020088 	.word	0x40020088
 80065e8:	400200a0 	.word	0x400200a0
 80065ec:	400200b8 	.word	0x400200b8
 80065f0:	40020410 	.word	0x40020410
 80065f4:	40020428 	.word	0x40020428
 80065f8:	40020440 	.word	0x40020440
 80065fc:	40020458 	.word	0x40020458
 8006600:	40020470 	.word	0x40020470
 8006604:	40020488 	.word	0x40020488
 8006608:	400204a0 	.word	0x400204a0
 800660c:	400204b8 	.word	0x400204b8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 020a 	bic.w	r2, r2, #10
 800661e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8097 	beq.w	8006768 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006642:	e091      	b.n	8006768 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2208      	movs	r2, #8
 800664e:	409a      	lsls	r2, r3
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8088 	beq.w	800676a <HAL_DMA_IRQHandler+0xe0e>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8082 	beq.w	800676a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a41      	ldr	r2, [pc, #260]	@ (8006770 <HAL_DMA_IRQHandler+0xe14>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d04a      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3f      	ldr	r2, [pc, #252]	@ (8006774 <HAL_DMA_IRQHandler+0xe18>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d045      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3e      	ldr	r2, [pc, #248]	@ (8006778 <HAL_DMA_IRQHandler+0xe1c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d040      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3c      	ldr	r2, [pc, #240]	@ (800677c <HAL_DMA_IRQHandler+0xe20>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d03b      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3b      	ldr	r2, [pc, #236]	@ (8006780 <HAL_DMA_IRQHandler+0xe24>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d036      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a39      	ldr	r2, [pc, #228]	@ (8006784 <HAL_DMA_IRQHandler+0xe28>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d031      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <HAL_DMA_IRQHandler+0xe2c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d02c      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a36      	ldr	r2, [pc, #216]	@ (800678c <HAL_DMA_IRQHandler+0xe30>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d027      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a35      	ldr	r2, [pc, #212]	@ (8006790 <HAL_DMA_IRQHandler+0xe34>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d022      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <HAL_DMA_IRQHandler+0xe38>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01d      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a32      	ldr	r2, [pc, #200]	@ (8006798 <HAL_DMA_IRQHandler+0xe3c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a30      	ldr	r2, [pc, #192]	@ (800679c <HAL_DMA_IRQHandler+0xe40>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <HAL_DMA_IRQHandler+0xe44>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2d      	ldr	r2, [pc, #180]	@ (80067a4 <HAL_DMA_IRQHandler+0xe48>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2c      	ldr	r2, [pc, #176]	@ (80067a8 <HAL_DMA_IRQHandler+0xe4c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_DMA_IRQHandler+0xdaa>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2a      	ldr	r2, [pc, #168]	@ (80067ac <HAL_DMA_IRQHandler+0xe50>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d108      	bne.n	8006718 <HAL_DMA_IRQHandler+0xdbc>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 021c 	bic.w	r2, r2, #28
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e007      	b.n	8006728 <HAL_DMA_IRQHandler+0xdcc>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 020e 	bic.w	r2, r2, #14
 8006726:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2201      	movs	r2, #1
 8006732:	409a      	lsls	r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
 800675e:	e004      	b.n	800676a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006768:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800676a:	3728      	adds	r7, #40	@ 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8

080067b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a7f      	ldr	r2, [pc, #508]	@ (80069cc <DMA_SetConfig+0x21c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d072      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7d      	ldr	r2, [pc, #500]	@ (80069d0 <DMA_SetConfig+0x220>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d06d      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7c      	ldr	r2, [pc, #496]	@ (80069d4 <DMA_SetConfig+0x224>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d068      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7a      	ldr	r2, [pc, #488]	@ (80069d8 <DMA_SetConfig+0x228>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d063      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a79      	ldr	r2, [pc, #484]	@ (80069dc <DMA_SetConfig+0x22c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d05e      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a77      	ldr	r2, [pc, #476]	@ (80069e0 <DMA_SetConfig+0x230>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d059      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a76      	ldr	r2, [pc, #472]	@ (80069e4 <DMA_SetConfig+0x234>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d054      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	@ (80069e8 <DMA_SetConfig+0x238>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d04f      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a73      	ldr	r2, [pc, #460]	@ (80069ec <DMA_SetConfig+0x23c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04a      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	@ (80069f0 <DMA_SetConfig+0x240>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d045      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a70      	ldr	r2, [pc, #448]	@ (80069f4 <DMA_SetConfig+0x244>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d040      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6e      	ldr	r2, [pc, #440]	@ (80069f8 <DMA_SetConfig+0x248>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d03b      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6d      	ldr	r2, [pc, #436]	@ (80069fc <DMA_SetConfig+0x24c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d036      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6b      	ldr	r2, [pc, #428]	@ (8006a00 <DMA_SetConfig+0x250>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d031      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6a      	ldr	r2, [pc, #424]	@ (8006a04 <DMA_SetConfig+0x254>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d02c      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a68      	ldr	r2, [pc, #416]	@ (8006a08 <DMA_SetConfig+0x258>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d027      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a67      	ldr	r2, [pc, #412]	@ (8006a0c <DMA_SetConfig+0x25c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a65      	ldr	r2, [pc, #404]	@ (8006a10 <DMA_SetConfig+0x260>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01d      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a64      	ldr	r2, [pc, #400]	@ (8006a14 <DMA_SetConfig+0x264>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a62      	ldr	r2, [pc, #392]	@ (8006a18 <DMA_SetConfig+0x268>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <DMA_SetConfig+0x10a>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a61      	ldr	r2, [pc, #388]	@ (8006a1c <DMA_SetConfig+0x26c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <DMA_SetConfig+0x10a>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5f      	ldr	r2, [pc, #380]	@ (8006a20 <DMA_SetConfig+0x270>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5e      	ldr	r2, [pc, #376]	@ (8006a24 <DMA_SetConfig+0x274>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <DMA_SetConfig+0x10a>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5c      	ldr	r2, [pc, #368]	@ (8006a28 <DMA_SetConfig+0x278>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <DMA_SetConfig+0x10e>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <DMA_SetConfig+0x110>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80068cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80068de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a39      	ldr	r2, [pc, #228]	@ (80069cc <DMA_SetConfig+0x21c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d04a      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a38      	ldr	r2, [pc, #224]	@ (80069d0 <DMA_SetConfig+0x220>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d045      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a36      	ldr	r2, [pc, #216]	@ (80069d4 <DMA_SetConfig+0x224>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d040      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a35      	ldr	r2, [pc, #212]	@ (80069d8 <DMA_SetConfig+0x228>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d03b      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a33      	ldr	r2, [pc, #204]	@ (80069dc <DMA_SetConfig+0x22c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d036      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a32      	ldr	r2, [pc, #200]	@ (80069e0 <DMA_SetConfig+0x230>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d031      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a30      	ldr	r2, [pc, #192]	@ (80069e4 <DMA_SetConfig+0x234>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02c      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2f      	ldr	r2, [pc, #188]	@ (80069e8 <DMA_SetConfig+0x238>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d027      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2d      	ldr	r2, [pc, #180]	@ (80069ec <DMA_SetConfig+0x23c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d022      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2c      	ldr	r2, [pc, #176]	@ (80069f0 <DMA_SetConfig+0x240>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d01d      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2a      	ldr	r2, [pc, #168]	@ (80069f4 <DMA_SetConfig+0x244>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d018      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a29      	ldr	r2, [pc, #164]	@ (80069f8 <DMA_SetConfig+0x248>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a27      	ldr	r2, [pc, #156]	@ (80069fc <DMA_SetConfig+0x24c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00e      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a26      	ldr	r2, [pc, #152]	@ (8006a00 <DMA_SetConfig+0x250>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d009      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a24      	ldr	r2, [pc, #144]	@ (8006a04 <DMA_SetConfig+0x254>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <DMA_SetConfig+0x1d0>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a23      	ldr	r2, [pc, #140]	@ (8006a08 <DMA_SetConfig+0x258>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d101      	bne.n	8006984 <DMA_SetConfig+0x1d4>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <DMA_SetConfig+0x1d6>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d059      	beq.n	8006a3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	223f      	movs	r2, #63	@ 0x3f
 8006994:	409a      	lsls	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80069a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d138      	bne.n	8006a2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069ca:	e086      	b.n	8006ada <DMA_SetConfig+0x32a>
 80069cc:	40020010 	.word	0x40020010
 80069d0:	40020028 	.word	0x40020028
 80069d4:	40020040 	.word	0x40020040
 80069d8:	40020058 	.word	0x40020058
 80069dc:	40020070 	.word	0x40020070
 80069e0:	40020088 	.word	0x40020088
 80069e4:	400200a0 	.word	0x400200a0
 80069e8:	400200b8 	.word	0x400200b8
 80069ec:	40020410 	.word	0x40020410
 80069f0:	40020428 	.word	0x40020428
 80069f4:	40020440 	.word	0x40020440
 80069f8:	40020458 	.word	0x40020458
 80069fc:	40020470 	.word	0x40020470
 8006a00:	40020488 	.word	0x40020488
 8006a04:	400204a0 	.word	0x400204a0
 8006a08:	400204b8 	.word	0x400204b8
 8006a0c:	58025408 	.word	0x58025408
 8006a10:	5802541c 	.word	0x5802541c
 8006a14:	58025430 	.word	0x58025430
 8006a18:	58025444 	.word	0x58025444
 8006a1c:	58025458 	.word	0x58025458
 8006a20:	5802546c 	.word	0x5802546c
 8006a24:	58025480 	.word	0x58025480
 8006a28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]
}
 8006a3c:	e04d      	b.n	8006ada <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a29      	ldr	r2, [pc, #164]	@ (8006ae8 <DMA_SetConfig+0x338>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d022      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a27      	ldr	r2, [pc, #156]	@ (8006aec <DMA_SetConfig+0x33c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01d      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a26      	ldr	r2, [pc, #152]	@ (8006af0 <DMA_SetConfig+0x340>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a24      	ldr	r2, [pc, #144]	@ (8006af4 <DMA_SetConfig+0x344>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a23      	ldr	r2, [pc, #140]	@ (8006af8 <DMA_SetConfig+0x348>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a21      	ldr	r2, [pc, #132]	@ (8006afc <DMA_SetConfig+0x34c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a20      	ldr	r2, [pc, #128]	@ (8006b00 <DMA_SetConfig+0x350>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <DMA_SetConfig+0x2de>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1e      	ldr	r2, [pc, #120]	@ (8006b04 <DMA_SetConfig+0x354>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d101      	bne.n	8006a92 <DMA_SetConfig+0x2e2>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <DMA_SetConfig+0x2e4>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d020      	beq.n	8006ada <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b40      	cmp	r3, #64	@ 0x40
 8006ab6:	d108      	bne.n	8006aca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	60da      	str	r2, [r3, #12]
}
 8006ac8:	e007      	b.n	8006ada <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	58025408 	.word	0x58025408
 8006aec:	5802541c 	.word	0x5802541c
 8006af0:	58025430 	.word	0x58025430
 8006af4:	58025444 	.word	0x58025444
 8006af8:	58025458 	.word	0x58025458
 8006afc:	5802546c 	.word	0x5802546c
 8006b00:	58025480 	.word	0x58025480
 8006b04:	58025494 	.word	0x58025494

08006b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a42      	ldr	r2, [pc, #264]	@ (8006c20 <DMA_CalcBaseAndBitshift+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a41      	ldr	r2, [pc, #260]	@ (8006c24 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3f      	ldr	r2, [pc, #252]	@ (8006c28 <DMA_CalcBaseAndBitshift+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3e      	ldr	r2, [pc, #248]	@ (8006c2c <DMA_CalcBaseAndBitshift+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c30 <DMA_CalcBaseAndBitshift+0x128>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3b      	ldr	r2, [pc, #236]	@ (8006c34 <DMA_CalcBaseAndBitshift+0x12c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a39      	ldr	r2, [pc, #228]	@ (8006c38 <DMA_CalcBaseAndBitshift+0x130>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a38      	ldr	r2, [pc, #224]	@ (8006c3c <DMA_CalcBaseAndBitshift+0x134>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a36      	ldr	r2, [pc, #216]	@ (8006c40 <DMA_CalcBaseAndBitshift+0x138>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a33      	ldr	r2, [pc, #204]	@ (8006c48 <DMA_CalcBaseAndBitshift+0x140>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a32      	ldr	r2, [pc, #200]	@ (8006c4c <DMA_CalcBaseAndBitshift+0x144>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a30      	ldr	r2, [pc, #192]	@ (8006c50 <DMA_CalcBaseAndBitshift+0x148>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2f      	ldr	r2, [pc, #188]	@ (8006c54 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8006c58 <DMA_CalcBaseAndBitshift+0x150>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2c      	ldr	r2, [pc, #176]	@ (8006c5c <DMA_CalcBaseAndBitshift+0x154>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <DMA_CalcBaseAndBitshift+0xac>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <DMA_CalcBaseAndBitshift+0xae>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d024      	beq.n	8006c04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3b10      	subs	r3, #16
 8006bc2:	4a27      	ldr	r2, [pc, #156]	@ (8006c60 <DMA_CalcBaseAndBitshift+0x158>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	4a24      	ldr	r2, [pc, #144]	@ (8006c64 <DMA_CalcBaseAndBitshift+0x15c>)
 8006bd4:	5cd3      	ldrb	r3, [r2, r3]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d908      	bls.n	8006bf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c68 <DMA_CalcBaseAndBitshift+0x160>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bf2:	e00d      	b.n	8006c10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <DMA_CalcBaseAndBitshift+0x160>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c02:	e005      	b.n	8006c10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
 8006c60:	aaaaaaab 	.word	0xaaaaaaab
 8006c64:	080107c0 	.word	0x080107c0
 8006c68:	fffffc00 	.word	0xfffffc00

08006c6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d120      	bne.n	8006cc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d858      	bhi.n	8006d3a <DMA_CheckFifoParam+0xce>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <DMA_CheckFifoParam+0x24>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006cb3 	.word	0x08006cb3
 8006c98:	08006ca1 	.word	0x08006ca1
 8006c9c:	08006d3b 	.word	0x08006d3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d048      	beq.n	8006d3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cb0:	e045      	b.n	8006d3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006cba:	d142      	bne.n	8006d42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cc0:	e03f      	b.n	8006d42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cca:	d123      	bne.n	8006d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d838      	bhi.n	8006d46 <DMA_CheckFifoParam+0xda>
 8006cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <DMA_CheckFifoParam+0x70>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006ced 	.word	0x08006ced
 8006ce0:	08006cf3 	.word	0x08006cf3
 8006ce4:	08006ced 	.word	0x08006ced
 8006ce8:	08006d05 	.word	0x08006d05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
        break;
 8006cf0:	e030      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d025      	beq.n	8006d4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d02:	e022      	b.n	8006d4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d0c:	d11f      	bne.n	8006d4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d12:	e01c      	b.n	8006d4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d902      	bls.n	8006d22 <DMA_CheckFifoParam+0xb6>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d003      	beq.n	8006d28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d20:	e018      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
        break;
 8006d26:	e015      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	e00b      	b.n	8006d52 <DMA_CheckFifoParam+0xe6>
        break;
 8006d3a:	bf00      	nop
 8006d3c:	e00a      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e008      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        break;
 8006d42:	bf00      	nop
 8006d44:	e006      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        break;
 8006d46:	bf00      	nop
 8006d48:	e004      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e002      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e000      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
    break;
 8006d52:	bf00      	nop
    }
  }

  return status;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a38      	ldr	r2, [pc, #224]	@ (8006e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a36      	ldr	r2, [pc, #216]	@ (8006e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a33      	ldr	r2, [pc, #204]	@ (8006e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a32      	ldr	r2, [pc, #200]	@ (8006e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a30      	ldr	r2, [pc, #192]	@ (8006e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d101      	bne.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01a      	beq.n	8006e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	3b08      	subs	r3, #8
 8006dd4:	4a28      	ldr	r2, [pc, #160]	@ (8006e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4b26      	ldr	r3, [pc, #152]	@ (8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a24      	ldr	r2, [pc, #144]	@ (8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006df0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2201      	movs	r2, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e00:	e024      	b.n	8006e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	3b10      	subs	r3, #16
 8006e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	091b      	lsrs	r3, r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4a1c      	ldr	r2, [pc, #112]	@ (8006e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d806      	bhi.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d902      	bls.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3308      	adds	r3, #8
 8006e28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4b18      	ldr	r3, [pc, #96]	@ (8006e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	461a      	mov	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2201      	movs	r2, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	58025408 	.word	0x58025408
 8006e5c:	5802541c 	.word	0x5802541c
 8006e60:	58025430 	.word	0x58025430
 8006e64:	58025444 	.word	0x58025444
 8006e68:	58025458 	.word	0x58025458
 8006e6c:	5802546c 	.word	0x5802546c
 8006e70:	58025480 	.word	0x58025480
 8006e74:	58025494 	.word	0x58025494
 8006e78:	cccccccd 	.word	0xcccccccd
 8006e7c:	16009600 	.word	0x16009600
 8006e80:	58025880 	.word	0x58025880
 8006e84:	aaaaaaab 	.word	0xaaaaaaab
 8006e88:	400204b8 	.word	0x400204b8
 8006e8c:	4002040f 	.word	0x4002040f
 8006e90:	10008200 	.word	0x10008200
 8006e94:	40020880 	.word	0x40020880

08006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d04a      	beq.n	8006f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d847      	bhi.n	8006f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a25      	ldr	r2, [pc, #148]	@ (8006f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a24      	ldr	r2, [pc, #144]	@ (8006f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d01d      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a22      	ldr	r2, [pc, #136]	@ (8006f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a21      	ldr	r2, [pc, #132]	@ (8006f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d101      	bne.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4b17      	ldr	r3, [pc, #92]	@ (8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f20:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f22:	e009      	b.n	8006f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4b14      	ldr	r3, [pc, #80]	@ (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a11      	ldr	r2, [pc, #68]	@ (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f36:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	58025408 	.word	0x58025408
 8006f54:	5802541c 	.word	0x5802541c
 8006f58:	58025430 	.word	0x58025430
 8006f5c:	58025444 	.word	0x58025444
 8006f60:	58025458 	.word	0x58025458
 8006f64:	5802546c 	.word	0x5802546c
 8006f68:	58025480 	.word	0x58025480
 8006f6c:	58025494 	.word	0x58025494
 8006f70:	1600963f 	.word	0x1600963f
 8006f74:	58025940 	.word	0x58025940
 8006f78:	1000823f 	.word	0x1000823f
 8006f7c:	40020940 	.word	0x40020940

08006f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b089      	sub	sp, #36	@ 0x24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f8e:	4b86      	ldr	r3, [pc, #536]	@ (80071a8 <HAL_GPIO_Init+0x228>)
 8006f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f92:	e18c      	b.n	80072ae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 817e 	beq.w	80072a8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d005      	beq.n	8006fc4 <HAL_GPIO_Init+0x44>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d130      	bne.n	8007026 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	2203      	movs	r2, #3
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	f003 0201 	and.w	r2, r3, #1
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4313      	orrs	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d017      	beq.n	8007062 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	2203      	movs	r2, #3
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	43db      	mvns	r3, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4013      	ands	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	4313      	orrs	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d123      	bne.n	80070b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	220f      	movs	r2, #15
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43db      	mvns	r3, r3
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	4013      	ands	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	08da      	lsrs	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3208      	adds	r2, #8
 80070b0:	69b9      	ldr	r1, [r7, #24]
 80070b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	2203      	movs	r2, #3
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	4013      	ands	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0203 	and.w	r2, r3, #3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80d8 	beq.w	80072a8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070f8:	4b2c      	ldr	r3, [pc, #176]	@ (80071ac <HAL_GPIO_Init+0x22c>)
 80070fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fe:	4a2b      	ldr	r2, [pc, #172]	@ (80071ac <HAL_GPIO_Init+0x22c>)
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007108:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <HAL_GPIO_Init+0x22c>)
 800710a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007116:	4a26      	ldr	r2, [pc, #152]	@ (80071b0 <HAL_GPIO_Init+0x230>)
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	089b      	lsrs	r3, r3, #2
 800711c:	3302      	adds	r3, #2
 800711e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	220f      	movs	r2, #15
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	43db      	mvns	r3, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4013      	ands	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <HAL_GPIO_Init+0x234>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_GPIO_Init+0x258>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1c      	ldr	r2, [pc, #112]	@ (80071b8 <HAL_GPIO_Init+0x238>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d02b      	beq.n	80071a2 <HAL_GPIO_Init+0x222>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <HAL_GPIO_Init+0x23c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d025      	beq.n	800719e <HAL_GPIO_Init+0x21e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1a      	ldr	r2, [pc, #104]	@ (80071c0 <HAL_GPIO_Init+0x240>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01f      	beq.n	800719a <HAL_GPIO_Init+0x21a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <HAL_GPIO_Init+0x244>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d019      	beq.n	8007196 <HAL_GPIO_Init+0x216>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a18      	ldr	r2, [pc, #96]	@ (80071c8 <HAL_GPIO_Init+0x248>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <HAL_GPIO_Init+0x212>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a17      	ldr	r2, [pc, #92]	@ (80071cc <HAL_GPIO_Init+0x24c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00d      	beq.n	800718e <HAL_GPIO_Init+0x20e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a16      	ldr	r2, [pc, #88]	@ (80071d0 <HAL_GPIO_Init+0x250>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <HAL_GPIO_Init+0x20a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <HAL_GPIO_Init+0x254>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <HAL_GPIO_Init+0x206>
 8007182:	2309      	movs	r3, #9
 8007184:	e029      	b.n	80071da <HAL_GPIO_Init+0x25a>
 8007186:	230a      	movs	r3, #10
 8007188:	e027      	b.n	80071da <HAL_GPIO_Init+0x25a>
 800718a:	2307      	movs	r3, #7
 800718c:	e025      	b.n	80071da <HAL_GPIO_Init+0x25a>
 800718e:	2306      	movs	r3, #6
 8007190:	e023      	b.n	80071da <HAL_GPIO_Init+0x25a>
 8007192:	2305      	movs	r3, #5
 8007194:	e021      	b.n	80071da <HAL_GPIO_Init+0x25a>
 8007196:	2304      	movs	r3, #4
 8007198:	e01f      	b.n	80071da <HAL_GPIO_Init+0x25a>
 800719a:	2303      	movs	r3, #3
 800719c:	e01d      	b.n	80071da <HAL_GPIO_Init+0x25a>
 800719e:	2302      	movs	r3, #2
 80071a0:	e01b      	b.n	80071da <HAL_GPIO_Init+0x25a>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e019      	b.n	80071da <HAL_GPIO_Init+0x25a>
 80071a6:	bf00      	nop
 80071a8:	58000080 	.word	0x58000080
 80071ac:	58024400 	.word	0x58024400
 80071b0:	58000400 	.word	0x58000400
 80071b4:	58020000 	.word	0x58020000
 80071b8:	58020400 	.word	0x58020400
 80071bc:	58020800 	.word	0x58020800
 80071c0:	58020c00 	.word	0x58020c00
 80071c4:	58021000 	.word	0x58021000
 80071c8:	58021400 	.word	0x58021400
 80071cc:	58021800 	.word	0x58021800
 80071d0:	58021c00 	.word	0x58021c00
 80071d4:	58022400 	.word	0x58022400
 80071d8:	2300      	movs	r3, #0
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	f002 0203 	and.w	r2, r2, #3
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	4093      	lsls	r3, r2
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071ea:	4938      	ldr	r1, [pc, #224]	@ (80072cc <HAL_GPIO_Init+0x34c>)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	3302      	adds	r3, #2
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800721e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	43db      	mvns	r3, r3
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	4013      	ands	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800724c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	43db      	mvns	r3, r3
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	4013      	ands	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	43db      	mvns	r3, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4013      	ands	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f47f ae6b 	bne.w	8006f94 <HAL_GPIO_Init+0x14>
  }
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	3724      	adds	r7, #36	@ 0x24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	58000400 	.word	0x58000400

080072d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
 80072dc:	4613      	mov	r3, r2
 80072de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072e0:	787b      	ldrb	r3, [r7, #1]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072e6:	887a      	ldrh	r2, [r7, #2]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80072ec:	e003      	b.n	80072f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	041a      	lsls	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	619a      	str	r2, [r3, #24]
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007314:	887a      	ldrh	r2, [r7, #2]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4013      	ands	r3, r2
 800731a:	041a      	lsls	r2, r3, #16
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	43d9      	mvns	r1, r3
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	400b      	ands	r3, r1
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	4603      	mov	r3, r0
 800733e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	4618      	mov	r0, r3
 800735e:	f7fa f9f5 	bl	800174c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e08b      	b.n	8007496 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7f9 fd5e 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2224      	movs	r2, #36	@ 0x24
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80073bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d107      	bne.n	80073e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	e006      	b.n	80073f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d108      	bne.n	800740e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	e007      	b.n	800741e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800741c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b1d      	ldr	r3, [pc, #116]	@ (80074a0 <HAL_I2C_Init+0x134>)
 800742a:	430b      	orrs	r3, r1
 800742c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800743c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	02008000 	.word	0x02008000

080074a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	461a      	mov	r2, r3
 80074b0:	460b      	mov	r3, r1
 80074b2:	817b      	strh	r3, [r7, #10]
 80074b4:	4613      	mov	r3, r2
 80074b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	f040 80fd 	bne.w	80076c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_I2C_Master_Transmit+0x30>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e0f6      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074dc:	f7fa fdd0 	bl	8002080 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	2319      	movs	r3, #25
 80074e8:	2201      	movs	r2, #1
 80074ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f914 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e0e1      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2221      	movs	r2, #33	@ 0x21
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2210      	movs	r2, #16
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	893a      	ldrh	r2, [r7, #8]
 800751e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	2bff      	cmp	r3, #255	@ 0xff
 800752e:	d906      	bls.n	800753e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	22ff      	movs	r2, #255	@ 0xff
 8007534:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e007      	b.n	800754e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800754c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d024      	beq.n	80075a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800758a:	b2db      	uxtb	r3, r3
 800758c:	3301      	adds	r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	8979      	ldrh	r1, [r7, #10]
 8007592:	4b4e      	ldr	r3, [pc, #312]	@ (80076cc <HAL_I2C_Master_Transmit+0x228>)
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa83 	bl	8007aa4 <I2C_TransferConfig>
 800759e:	e066      	b.n	800766e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	8979      	ldrh	r1, [r7, #10]
 80075a8:	4b48      	ldr	r3, [pc, #288]	@ (80076cc <HAL_I2C_Master_Transmit+0x228>)
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fa78 	bl	8007aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80075b4:	e05b      	b.n	800766e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	6a39      	ldr	r1, [r7, #32]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f907 	bl	80077ce <I2C_WaitOnTXISFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e07b      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d034      	beq.n	800766e <HAL_I2C_Master_Transmit+0x1ca>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d130      	bne.n	800766e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	2200      	movs	r2, #0
 8007614:	2180      	movs	r1, #128	@ 0x80
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f880 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e04d      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800762a:	b29b      	uxth	r3, r3
 800762c:	2bff      	cmp	r3, #255	@ 0xff
 800762e:	d90e      	bls.n	800764e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	22ff      	movs	r2, #255	@ 0xff
 8007634:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800763a:	b2da      	uxtb	r2, r3
 800763c:	8979      	ldrh	r1, [r7, #10]
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa2c 	bl	8007aa4 <I2C_TransferConfig>
 800764c:	e00f      	b.n	800766e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765c:	b2da      	uxtb	r2, r3
 800765e:	8979      	ldrh	r1, [r7, #10]
 8007660:	2300      	movs	r3, #0
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fa1b 	bl	8007aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d19e      	bne.n	80075b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	6a39      	ldr	r1, [r7, #32]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f8ed 	bl	800785c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e01a      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2220      	movs	r2, #32
 8007692:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6859      	ldr	r1, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <HAL_I2C_Master_Transmit+0x22c>)
 80076a0:	400b      	ands	r3, r1
 80076a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e000      	b.n	80076c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	80002000 	.word	0x80002000
 80076d0:	fe00e800 	.word	0xfe00e800

080076d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d103      	bne.n	80076f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d007      	beq.n	8007710 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	619a      	str	r2, [r3, #24]
  }
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800772c:	e03b      	b.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f8d6 	bl	80078e4 <I2C_IsErrorOccurred>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e041      	b.n	80077c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d02d      	beq.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774a:	f7fa fc99 	bl	8002080 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <I2C_WaitOnFlagUntilTimeout+0x44>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d122      	bne.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	429a      	cmp	r2, r3
 800777c:	d113      	bne.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007782:	f043 0220 	orr.w	r2, r3, #32
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e00f      	b.n	80077c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d0b4      	beq.n	800772e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077da:	e033      	b.n	8007844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f87f 	bl	80078e4 <I2C_IsErrorOccurred>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e031      	b.n	8007854 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d025      	beq.n	8007844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f8:	f7fa fc42 	bl	8002080 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	d302      	bcc.n	800780e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11a      	bne.n	8007844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d013      	beq.n	8007844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007820:	f043 0220 	orr.w	r2, r3, #32
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e007      	b.n	8007854 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d1c4      	bne.n	80077dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007868:	e02f      	b.n	80078ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f838 	bl	80078e4 <I2C_IsErrorOccurred>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e02d      	b.n	80078da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787e:	f7fa fbff 	bl	8002080 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	d302      	bcc.n	8007894 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11a      	bne.n	80078ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d013      	beq.n	80078ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e007      	b.n	80078da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d1c8      	bne.n	800786a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	@ 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d068      	beq.n	80079e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2210      	movs	r2, #16
 8007916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007918:	e049      	b.n	80079ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d045      	beq.n	80079ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007922:	f7fa fbad 	bl	8002080 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	d302      	bcc.n	8007938 <I2C_IsErrorOccurred+0x54>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d13a      	bne.n	80079ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800794a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800795a:	d121      	bne.n	80079a0 <I2C_IsErrorOccurred+0xbc>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007962:	d01d      	beq.n	80079a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007964:	7cfb      	ldrb	r3, [r7, #19]
 8007966:	2b20      	cmp	r3, #32
 8007968:	d01a      	beq.n	80079a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800797a:	f7fa fb81 	bl	8002080 <HAL_GetTick>
 800797e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007980:	e00e      	b.n	80079a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007982:	f7fa fb7d 	bl	8002080 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b19      	cmp	r3, #25
 800798e:	d907      	bls.n	80079a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f043 0320 	orr.w	r3, r3, #32
 8007996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800799e:	e006      	b.n	80079ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d1e9      	bne.n	8007982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d003      	beq.n	80079c4 <I2C_IsErrorOccurred+0xe0>
 80079bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0aa      	beq.n	800791a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80079c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2220      	movs	r2, #32
 80079d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f043 0302 	orr.w	r3, r3, #2
 8007a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01c      	beq.n	8007a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fe3b 	bl	80076d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6859      	ldr	r1, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <I2C_IsErrorOccurred+0x1bc>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	@ 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	fe00e800 	.word	0xfe00e800

08007aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	817b      	strh	r3, [r7, #10]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007abc:	7a7b      	ldrb	r3, [r7, #9]
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	0d5b      	lsrs	r3, r3, #21
 8007ade:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007ae2:	4b08      	ldr	r3, [pc, #32]	@ (8007b04 <I2C_TransferConfig+0x60>)
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	ea02 0103 	and.w	r1, r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	03ff63ff 	.word	0x03ff63ff

08007b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d138      	bne.n	8007b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e032      	b.n	8007b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	@ 0x24
 8007b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6819      	ldr	r1, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e000      	b.n	8007b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b90:	2302      	movs	r3, #2
  }
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d139      	bne.n	8007c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e033      	b.n	8007c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2224      	movs	r2, #36	@ 0x24
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e000      	b.n	8007c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c40:	4b19      	ldr	r3, [pc, #100]	@ (8007ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d00a      	beq.n	8007c62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c4c:	4b16      	ldr	r3, [pc, #88]	@ (8007ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d001      	beq.n	8007c5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e01f      	b.n	8007c9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e01d      	b.n	8007c9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c62:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f023 0207 	bic.w	r2, r3, #7
 8007c6a:	490f      	ldr	r1, [pc, #60]	@ (8007ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c72:	f7fa fa05 	bl	8002080 <HAL_GetTick>
 8007c76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c78:	e009      	b.n	8007c8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c7a:	f7fa fa01 	bl	8002080 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c88:	d901      	bls.n	8007c8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e007      	b.n	8007c9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9a:	d1ee      	bne.n	8007c7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	58024800 	.word	0x58024800

08007cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08c      	sub	sp, #48	@ 0x30
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e3c8      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8087 	beq.w	8007dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ccc:	4b88      	ldr	r3, [pc, #544]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cd6:	4b86      	ldr	r3, [pc, #536]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d007      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x46>
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	2b18      	cmp	r3, #24
 8007ce6:	d110      	bne.n	8007d0a <HAL_RCC_OscConfig+0x5e>
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d10b      	bne.n	8007d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d06c      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x12c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d168      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e3a2      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d12:	d106      	bne.n	8007d22 <HAL_RCC_OscConfig+0x76>
 8007d14:	4b76      	ldr	r3, [pc, #472]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a75      	ldr	r2, [pc, #468]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	e02e      	b.n	8007d80 <HAL_RCC_OscConfig+0xd4>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <HAL_RCC_OscConfig+0x98>
 8007d2a:	4b71      	ldr	r3, [pc, #452]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a70      	ldr	r2, [pc, #448]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	4b6e      	ldr	r3, [pc, #440]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	e01d      	b.n	8007d80 <HAL_RCC_OscConfig+0xd4>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d4c:	d10c      	bne.n	8007d68 <HAL_RCC_OscConfig+0xbc>
 8007d4e:	4b68      	ldr	r3, [pc, #416]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a67      	ldr	r2, [pc, #412]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	4b65      	ldr	r3, [pc, #404]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a64      	ldr	r2, [pc, #400]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	e00b      	b.n	8007d80 <HAL_RCC_OscConfig+0xd4>
 8007d68:	4b61      	ldr	r3, [pc, #388]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a60      	ldr	r2, [pc, #384]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	4b5e      	ldr	r3, [pc, #376]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a5d      	ldr	r2, [pc, #372]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d013      	beq.n	8007db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fa f97a 	bl	8002080 <HAL_GetTick>
 8007d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d90:	f7fa f976 	bl	8002080 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b64      	cmp	r3, #100	@ 0x64
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e356      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007da2:	4b53      	ldr	r3, [pc, #332]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f0      	beq.n	8007d90 <HAL_RCC_OscConfig+0xe4>
 8007dae:	e014      	b.n	8007dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db0:	f7fa f966 	bl	8002080 <HAL_GetTick>
 8007db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007db6:	e008      	b.n	8007dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007db8:	f7fa f962 	bl	8002080 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b64      	cmp	r3, #100	@ 0x64
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e342      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dca:	4b49      	ldr	r3, [pc, #292]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1f0      	bne.n	8007db8 <HAL_RCC_OscConfig+0x10c>
 8007dd6:	e000      	b.n	8007dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 808c 	beq.w	8007f00 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de8:	4b41      	ldr	r3, [pc, #260]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007df2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_RCC_OscConfig+0x162>
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	2b18      	cmp	r3, #24
 8007e02:	d137      	bne.n	8007e74 <HAL_RCC_OscConfig+0x1c8>
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d132      	bne.n	8007e74 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e0e:	4b38      	ldr	r3, [pc, #224]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_RCC_OscConfig+0x17a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e314      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e26:	4b32      	ldr	r3, [pc, #200]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f023 0219 	bic.w	r2, r3, #25
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	492f      	ldr	r1, [pc, #188]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e38:	f7fa f922 	bl	8002080 <HAL_GetTick>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e40:	f7fa f91e 	bl	8002080 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e2fe      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e52:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	061b      	lsls	r3, r3, #24
 8007e6c:	4920      	ldr	r1, [pc, #128]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e72:	e045      	b.n	8007f00 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d026      	beq.n	8007eca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f023 0219 	bic.w	r2, r3, #25
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4919      	ldr	r1, [pc, #100]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8e:	f7fa f8f7 	bl	8002080 <HAL_GetTick>
 8007e92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e94:	e008      	b.n	8007ea8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e96:	f7fa f8f3 	bl	8002080 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e2d3      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ea8:	4b11      	ldr	r3, [pc, #68]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0f0      	beq.n	8007e96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	061b      	lsls	r3, r3, #24
 8007ec2:	490b      	ldr	r1, [pc, #44]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	604b      	str	r3, [r1, #4]
 8007ec8:	e01a      	b.n	8007f00 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eca:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a08      	ldr	r2, [pc, #32]	@ (8007ef0 <HAL_RCC_OscConfig+0x244>)
 8007ed0:	f023 0301 	bic.w	r3, r3, #1
 8007ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed6:	f7fa f8d3 	bl	8002080 <HAL_GetTick>
 8007eda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007edc:	e00a      	b.n	8007ef4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ede:	f7fa f8cf 	bl	8002080 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d903      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e2af      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
 8007ef0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ef4:	4b96      	ldr	r3, [pc, #600]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1ee      	bne.n	8007ede <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d06a      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f0c:	4b90      	ldr	r3, [pc, #576]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f14:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f16:	4b8e      	ldr	r3, [pc, #568]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d007      	beq.n	8007f32 <HAL_RCC_OscConfig+0x286>
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b18      	cmp	r3, #24
 8007f26:	d11b      	bne.n	8007f60 <HAL_RCC_OscConfig+0x2b4>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d116      	bne.n	8007f60 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f32:	4b87      	ldr	r3, [pc, #540]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_RCC_OscConfig+0x29e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	2b80      	cmp	r3, #128	@ 0x80
 8007f44:	d001      	beq.n	8007f4a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e282      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f4a:	4b81      	ldr	r3, [pc, #516]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	497d      	ldr	r1, [pc, #500]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f5e:	e040      	b.n	8007fe2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d023      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f68:	4b79      	ldr	r3, [pc, #484]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a78      	ldr	r2, [pc, #480]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fa f884 	bl	8002080 <HAL_GetTick>
 8007f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f7c:	f7fa f880 	bl	8002080 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e260      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f8e:	4b70      	ldr	r3, [pc, #448]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0f0      	beq.n	8007f7c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	061b      	lsls	r3, r3, #24
 8007fa8:	4969      	ldr	r1, [pc, #420]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60cb      	str	r3, [r1, #12]
 8007fae:	e018      	b.n	8007fe2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fb0:	4b67      	ldr	r3, [pc, #412]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a66      	ldr	r2, [pc, #408]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbc:	f7fa f860 	bl	8002080 <HAL_GetTick>
 8007fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fc4:	f7fa f85c 	bl	8002080 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e23c      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f0      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d036      	beq.n	800805c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d019      	beq.n	800802a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ff6:	4b56      	ldr	r3, [pc, #344]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ffa:	4a55      	ldr	r2, [pc, #340]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008002:	f7fa f83d 	bl	8002080 <HAL_GetTick>
 8008006:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008008:	e008      	b.n	800801c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800800a:	f7fa f839 	bl	8002080 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e219      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800801c:	4b4c      	ldr	r3, [pc, #304]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 800801e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0f0      	beq.n	800800a <HAL_RCC_OscConfig+0x35e>
 8008028:	e018      	b.n	800805c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800802a:	4b49      	ldr	r3, [pc, #292]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 800802c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800802e:	4a48      	ldr	r2, [pc, #288]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008036:	f7fa f823 	bl	8002080 <HAL_GetTick>
 800803a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800803e:	f7fa f81f 	bl	8002080 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e1ff      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008050:	4b3f      	ldr	r3, [pc, #252]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f0      	bne.n	800803e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d036      	beq.n	80080d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008070:	4b37      	ldr	r3, [pc, #220]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a36      	ldr	r2, [pc, #216]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008076:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800807a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800807c:	f7fa f800 	bl	8002080 <HAL_GetTick>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008084:	f7f9 fffc 	bl	8002080 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e1dc      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008096:	4b2e      	ldr	r3, [pc, #184]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x3d8>
 80080a2:	e018      	b.n	80080d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a29      	ldr	r2, [pc, #164]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 80080aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080b0:	f7f9 ffe6 	bl	8002080 <HAL_GetTick>
 80080b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080b8:	f7f9 ffe2 	bl	8002080 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e1c2      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ca:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f0      	bne.n	80080b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8086 	beq.w	80081f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008154 <HAL_RCC_OscConfig+0x4a8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008154 <HAL_RCC_OscConfig+0x4a8>)
 80080ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080f0:	f7f9 ffc6 	bl	8002080 <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080f8:	f7f9 ffc2 	bl	8002080 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	@ 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e1a2      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800810a:	4b12      	ldr	r3, [pc, #72]	@ (8008154 <HAL_RCC_OscConfig+0x4a8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d106      	bne.n	800812c <HAL_RCC_OscConfig+0x480>
 800811e:	4b0c      	ldr	r3, [pc, #48]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008122:	4a0b      	ldr	r2, [pc, #44]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008124:	f043 0301 	orr.w	r3, r3, #1
 8008128:	6713      	str	r3, [r2, #112]	@ 0x70
 800812a:	e032      	b.n	8008192 <HAL_RCC_OscConfig+0x4e6>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d111      	bne.n	8008158 <HAL_RCC_OscConfig+0x4ac>
 8008134:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008138:	4a05      	ldr	r2, [pc, #20]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008140:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008144:	4a02      	ldr	r2, [pc, #8]	@ (8008150 <HAL_RCC_OscConfig+0x4a4>)
 8008146:	f023 0304 	bic.w	r3, r3, #4
 800814a:	6713      	str	r3, [r2, #112]	@ 0x70
 800814c:	e021      	b.n	8008192 <HAL_RCC_OscConfig+0x4e6>
 800814e:	bf00      	nop
 8008150:	58024400 	.word	0x58024400
 8008154:	58024800 	.word	0x58024800
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d10c      	bne.n	800817a <HAL_RCC_OscConfig+0x4ce>
 8008160:	4b83      	ldr	r3, [pc, #524]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008164:	4a82      	ldr	r2, [pc, #520]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008166:	f043 0304 	orr.w	r3, r3, #4
 800816a:	6713      	str	r3, [r2, #112]	@ 0x70
 800816c:	4b80      	ldr	r3, [pc, #512]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008170:	4a7f      	ldr	r2, [pc, #508]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	6713      	str	r3, [r2, #112]	@ 0x70
 8008178:	e00b      	b.n	8008192 <HAL_RCC_OscConfig+0x4e6>
 800817a:	4b7d      	ldr	r3, [pc, #500]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800817c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817e:	4a7c      	ldr	r2, [pc, #496]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	6713      	str	r3, [r2, #112]	@ 0x70
 8008186:	4b7a      	ldr	r3, [pc, #488]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818a:	4a79      	ldr	r2, [pc, #484]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d015      	beq.n	80081c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819a:	f7f9 ff71 	bl	8002080 <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081a0:	e00a      	b.n	80081b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a2:	f7f9 ff6d 	bl	8002080 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e14b      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081b8:	4b6d      	ldr	r3, [pc, #436]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0ee      	beq.n	80081a2 <HAL_RCC_OscConfig+0x4f6>
 80081c4:	e014      	b.n	80081f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c6:	f7f9 ff5b 	bl	8002080 <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7f9 ff57 	bl	8002080 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e135      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081e4:	4b62      	ldr	r3, [pc, #392]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ee      	bne.n	80081ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 812a 	beq.w	800844e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80081fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008202:	2b18      	cmp	r3, #24
 8008204:	f000 80ba 	beq.w	800837c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	2b02      	cmp	r3, #2
 800820e:	f040 8095 	bne.w	800833c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008212:	4b57      	ldr	r3, [pc, #348]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a56      	ldr	r2, [pc, #344]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800821c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821e:	f7f9 ff2f 	bl	8002080 <HAL_GetTick>
 8008222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008224:	e008      	b.n	8008238 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008226:	f7f9 ff2b 	bl	8002080 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d901      	bls.n	8008238 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e10b      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008238:	4b4d      	ldr	r3, [pc, #308]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f0      	bne.n	8008226 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008244:	4b4a      	ldr	r3, [pc, #296]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008246:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008248:	4b4a      	ldr	r3, [pc, #296]	@ (8008374 <HAL_RCC_OscConfig+0x6c8>)
 800824a:	4013      	ands	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008254:	0112      	lsls	r2, r2, #4
 8008256:	430a      	orrs	r2, r1
 8008258:	4945      	ldr	r1, [pc, #276]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	4313      	orrs	r3, r2
 800825c:	628b      	str	r3, [r1, #40]	@ 0x28
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008262:	3b01      	subs	r3, #1
 8008264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826c:	3b01      	subs	r3, #1
 800826e:	025b      	lsls	r3, r3, #9
 8008270:	b29b      	uxth	r3, r3
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	3b01      	subs	r3, #1
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008286:	3b01      	subs	r3, #1
 8008288:	061b      	lsls	r3, r3, #24
 800828a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800828e:	4938      	ldr	r1, [pc, #224]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008290:	4313      	orrs	r3, r2
 8008292:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008294:	4b36      	ldr	r3, [pc, #216]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	4a35      	ldr	r2, [pc, #212]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082a0:	4b33      	ldr	r3, [pc, #204]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a4:	4b34      	ldr	r3, [pc, #208]	@ (8008378 <HAL_RCC_OscConfig+0x6cc>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	4930      	ldr	r1, [pc, #192]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082b4:	4b2e      	ldr	r3, [pc, #184]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	f023 020c 	bic.w	r2, r3, #12
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	492b      	ldr	r1, [pc, #172]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	f023 0202 	bic.w	r2, r3, #2
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	4927      	ldr	r1, [pc, #156]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082d8:	4b25      	ldr	r3, [pc, #148]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	4a24      	ldr	r2, [pc, #144]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e4:	4b22      	ldr	r3, [pc, #136]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	4a21      	ldr	r2, [pc, #132]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80082f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80082fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	4a1b      	ldr	r2, [pc, #108]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008308:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a18      	ldr	r2, [pc, #96]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800830e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008314:	f7f9 feb4 	bl	8002080 <HAL_GetTick>
 8008318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800831a:	e008      	b.n	800832e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800831c:	f7f9 feb0 	bl	8002080 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d901      	bls.n	800832e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e090      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800832e:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f0      	beq.n	800831c <HAL_RCC_OscConfig+0x670>
 800833a:	e088      	b.n	800844e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800833c:	4b0c      	ldr	r3, [pc, #48]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0b      	ldr	r2, [pc, #44]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7f9 fe9a 	bl	8002080 <HAL_GetTick>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008350:	f7f9 fe96 	bl	8002080 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e076      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008362:	4b03      	ldr	r3, [pc, #12]	@ (8008370 <HAL_RCC_OscConfig+0x6c4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f0      	bne.n	8008350 <HAL_RCC_OscConfig+0x6a4>
 800836e:	e06e      	b.n	800844e <HAL_RCC_OscConfig+0x7a2>
 8008370:	58024400 	.word	0x58024400
 8008374:	fffffc0c 	.word	0xfffffc0c
 8008378:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800837c:	4b36      	ldr	r3, [pc, #216]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 800837e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008380:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008382:	4b35      	ldr	r3, [pc, #212]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008386:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	2b01      	cmp	r3, #1
 800838e:	d031      	beq.n	80083f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f003 0203 	and.w	r2, r3, #3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	d12a      	bne.n	80083f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	091b      	lsrs	r3, r3, #4
 80083a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d122      	bne.n	80083f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d11a      	bne.n	80083f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	0a5b      	lsrs	r3, r3, #9
 80083c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d111      	bne.n	80083f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083de:	429a      	cmp	r2, r3
 80083e0:	d108      	bne.n	80083f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	0e1b      	lsrs	r3, r3, #24
 80083e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d001      	beq.n	80083f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e02b      	b.n	8008450 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80083f8:	4b17      	ldr	r3, [pc, #92]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 80083fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008402:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	429a      	cmp	r2, r3
 800840c:	d01f      	beq.n	800844e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800840e:	4b12      	ldr	r3, [pc, #72]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	4a11      	ldr	r2, [pc, #68]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800841a:	f7f9 fe31 	bl	8002080 <HAL_GetTick>
 800841e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008420:	bf00      	nop
 8008422:	f7f9 fe2d 	bl	8002080 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	4293      	cmp	r3, r2
 800842c:	d0f9      	beq.n	8008422 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800842e:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008432:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <HAL_RCC_OscConfig+0x7b0>)
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800843a:	00d2      	lsls	r2, r2, #3
 800843c:	4906      	ldr	r1, [pc, #24]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 800843e:	4313      	orrs	r3, r2
 8008440:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008442:	4b05      	ldr	r3, [pc, #20]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4a04      	ldr	r2, [pc, #16]	@ (8008458 <HAL_RCC_OscConfig+0x7ac>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3730      	adds	r7, #48	@ 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	58024400 	.word	0x58024400
 800845c:	ffff0007 	.word	0xffff0007

08008460 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e19c      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008474:	4b8a      	ldr	r3, [pc, #552]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d910      	bls.n	80084a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b87      	ldr	r3, [pc, #540]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 020f 	bic.w	r2, r3, #15
 800848a:	4985      	ldr	r1, [pc, #532]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b83      	ldr	r3, [pc, #524]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e184      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	4b7b      	ldr	r3, [pc, #492]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084bc:	429a      	cmp	r2, r3
 80084be:	d908      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084c0:	4b78      	ldr	r3, [pc, #480]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	4975      	ldr	r1, [pc, #468]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695a      	ldr	r2, [r3, #20]
 80084e2:	4b70      	ldr	r3, [pc, #448]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d908      	bls.n	8008500 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084ee:	4b6d      	ldr	r3, [pc, #436]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	496a      	ldr	r1, [pc, #424]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	4b64      	ldr	r3, [pc, #400]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008518:	429a      	cmp	r2, r3
 800851a:	d908      	bls.n	800852e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800851c:	4b61      	ldr	r3, [pc, #388]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	495e      	ldr	r1, [pc, #376]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800852a:	4313      	orrs	r3, r2
 800852c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	4b59      	ldr	r3, [pc, #356]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008546:	429a      	cmp	r2, r3
 8008548:	d908      	bls.n	800855c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800854a:	4b56      	ldr	r3, [pc, #344]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4953      	ldr	r1, [pc, #332]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008558:	4313      	orrs	r3, r2
 800855a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	4b4d      	ldr	r3, [pc, #308]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	429a      	cmp	r2, r3
 8008576:	d908      	bls.n	800858a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008578:	4b4a      	ldr	r3, [pc, #296]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f023 020f 	bic.w	r2, r3, #15
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4947      	ldr	r1, [pc, #284]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008586:	4313      	orrs	r3, r2
 8008588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d055      	beq.n	8008642 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008596:	4b43      	ldr	r3, [pc, #268]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4940      	ldr	r1, [pc, #256]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d107      	bne.n	80085c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085b0:	4b3c      	ldr	r3, [pc, #240]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d121      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e0f6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d107      	bne.n	80085d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085c8:	4b36      	ldr	r3, [pc, #216]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d115      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0ea      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d107      	bne.n	80085f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085e0:	4b30      	ldr	r3, [pc, #192]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0de      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085f0:	4b2c      	ldr	r3, [pc, #176]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0d6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008600:	4b28      	ldr	r3, [pc, #160]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f023 0207 	bic.w	r2, r3, #7
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4925      	ldr	r1, [pc, #148]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800860e:	4313      	orrs	r3, r2
 8008610:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7f9 fd35 	bl	8002080 <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008618:	e00a      	b.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861a:	f7f9 fd31 	bl	8002080 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008628:	4293      	cmp	r3, r2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0be      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008630:	4b1c      	ldr	r3, [pc, #112]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	429a      	cmp	r2, r3
 8008640:	d1eb      	bne.n	800861a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	429a      	cmp	r2, r3
 800865c:	d208      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f023 020f 	bic.w	r2, r3, #15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	490e      	ldr	r1, [pc, #56]	@ (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800866c:	4313      	orrs	r3, r2
 800866e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008670:	4b0b      	ldr	r3, [pc, #44]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d214      	bcs.n	80086a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867e:	4b08      	ldr	r3, [pc, #32]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f023 020f 	bic.w	r2, r3, #15
 8008686:	4906      	ldr	r1, [pc, #24]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868e:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d005      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e086      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
 80086a0:	52002000 	.word	0x52002000
 80086a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	4b3f      	ldr	r3, [pc, #252]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d208      	bcs.n	80086d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086c4:	4b3c      	ldr	r3, [pc, #240]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	4939      	ldr	r1, [pc, #228]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	4b34      	ldr	r3, [pc, #208]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d208      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086f2:	4b31      	ldr	r3, [pc, #196]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	492e      	ldr	r1, [pc, #184]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008700:	4313      	orrs	r3, r2
 8008702:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	4b28      	ldr	r3, [pc, #160]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800871c:	429a      	cmp	r2, r3
 800871e:	d208      	bcs.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008720:	4b25      	ldr	r3, [pc, #148]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4922      	ldr	r1, [pc, #136]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800872e:	4313      	orrs	r3, r2
 8008730:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	4b1d      	ldr	r3, [pc, #116]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800874a:	429a      	cmp	r2, r3
 800874c:	d208      	bcs.n	8008760 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800874e:	4b1a      	ldr	r3, [pc, #104]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	4917      	ldr	r1, [pc, #92]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800875c:	4313      	orrs	r3, r2
 800875e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008760:	f000 f834 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b14      	ldr	r3, [pc, #80]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	4912      	ldr	r1, [pc, #72]	@ (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
 800877c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800877e:	4b0e      	ldr	r3, [pc, #56]	@ (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	4a0d      	ldr	r2, [pc, #52]	@ (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008788:	5cd3      	ldrb	r3, [r2, r3]
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	4a0a      	ldr	r2, [pc, #40]	@ (80087c0 <HAL_RCC_ClockConfig+0x360>)
 8008796:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008798:	4a0a      	ldr	r2, [pc, #40]	@ (80087c4 <HAL_RCC_ClockConfig+0x364>)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800879e:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <HAL_RCC_ClockConfig+0x368>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f9 fc22 	bl	8001fec <HAL_InitTick>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	58024400 	.word	0x58024400
 80087bc:	080107b0 	.word	0x080107b0
 80087c0:	24000014 	.word	0x24000014
 80087c4:	24000010 	.word	0x24000010
 80087c8:	24000018 	.word	0x24000018

080087cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b089      	sub	sp, #36	@ 0x24
 80087d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d2:	4bb3      	ldr	r3, [pc, #716]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087da:	2b18      	cmp	r3, #24
 80087dc:	f200 8155 	bhi.w	8008a8a <HAL_RCC_GetSysClockFreq+0x2be>
 80087e0:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	08008a8b 	.word	0x08008a8b
 80087f0:	08008a8b 	.word	0x08008a8b
 80087f4:	08008a8b 	.word	0x08008a8b
 80087f8:	08008a8b 	.word	0x08008a8b
 80087fc:	08008a8b 	.word	0x08008a8b
 8008800:	08008a8b 	.word	0x08008a8b
 8008804:	08008a8b 	.word	0x08008a8b
 8008808:	08008873 	.word	0x08008873
 800880c:	08008a8b 	.word	0x08008a8b
 8008810:	08008a8b 	.word	0x08008a8b
 8008814:	08008a8b 	.word	0x08008a8b
 8008818:	08008a8b 	.word	0x08008a8b
 800881c:	08008a8b 	.word	0x08008a8b
 8008820:	08008a8b 	.word	0x08008a8b
 8008824:	08008a8b 	.word	0x08008a8b
 8008828:	08008879 	.word	0x08008879
 800882c:	08008a8b 	.word	0x08008a8b
 8008830:	08008a8b 	.word	0x08008a8b
 8008834:	08008a8b 	.word	0x08008a8b
 8008838:	08008a8b 	.word	0x08008a8b
 800883c:	08008a8b 	.word	0x08008a8b
 8008840:	08008a8b 	.word	0x08008a8b
 8008844:	08008a8b 	.word	0x08008a8b
 8008848:	0800887f 	.word	0x0800887f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884c:	4b94      	ldr	r3, [pc, #592]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008858:	4b91      	ldr	r3, [pc, #580]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	4a90      	ldr	r2, [pc, #576]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800886a:	e111      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800886c:	4b8d      	ldr	r3, [pc, #564]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800886e:	61bb      	str	r3, [r7, #24]
      break;
 8008870:	e10e      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008872:	4b8d      	ldr	r3, [pc, #564]	@ (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008874:	61bb      	str	r3, [r7, #24]
      break;
 8008876:	e10b      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008878:	4b8c      	ldr	r3, [pc, #560]	@ (8008aac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800887a:	61bb      	str	r3, [r7, #24]
      break;
 800887c:	e108      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800887e:	4b88      	ldr	r3, [pc, #544]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008888:	4b85      	ldr	r3, [pc, #532]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008892:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008894:	4b82      	ldr	r3, [pc, #520]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800889e:	4b80      	ldr	r3, [pc, #512]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80e1 	beq.w	8008a84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	f000 8083 	beq.w	80089d0 <HAL_RCC_GetSysClockFreq+0x204>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	f200 80a1 	bhi.w	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCC_GetSysClockFreq+0x114>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d056      	beq.n	800898c <HAL_RCC_GetSysClockFreq+0x1c0>
 80088de:	e099      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e0:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02d      	beq.n	8008948 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ec:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	08db      	lsrs	r3, r3, #3
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	4a6b      	ldr	r2, [pc, #428]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
 80088fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b62      	ldr	r3, [pc, #392]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a02 	vldr	s12, [r7, #8]
 800892a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008946:	e087      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ab4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b51      	ldr	r3, [pc, #324]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a02 	vldr	s12, [r7, #8]
 800896e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800898a:	e065      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800899a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899e:	4b40      	ldr	r3, [pc, #256]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80089b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ce:	e043      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008abc <HAL_RCC_GetSysClockFreq+0x2f0>
 80089de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e2:	4b2f      	ldr	r3, [pc, #188]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a12:	e021      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a26:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008a58:	4b11      	ldr	r3, [pc, #68]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a62:	3301      	adds	r3, #1
 8008a64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a7c:	ee17 3a90 	vmov	r3, s15
 8008a80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
      break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008a8a:	4b07      	ldr	r3, [pc, #28]	@ (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a8c:	61bb      	str	r3, [r7, #24]
      break;
 8008a8e:	bf00      	nop
  }

  return sysclockfreq;
 8008a90:	69bb      	ldr	r3, [r7, #24]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	@ 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	003d0900 	.word	0x003d0900
 8008aac:	007a1200 	.word	0x007a1200
 8008ab0:	46000000 	.word	0x46000000
 8008ab4:	4c742400 	.word	0x4c742400
 8008ab8:	4a742400 	.word	0x4a742400
 8008abc:	4af42400 	.word	0x4af42400

08008ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ac6:	f7ff fe81 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b10      	ldr	r3, [pc, #64]	@ (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	0a1b      	lsrs	r3, r3, #8
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	490f      	ldr	r1, [pc, #60]	@ (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ad8:	5ccb      	ldrb	r3, [r1, r3]
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	4a09      	ldr	r2, [pc, #36]	@ (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008aee:	5cd3      	ldrb	r3, [r2, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	fa22 f303 	lsr.w	r3, r2, r3
 8008afa:	4a07      	ldr	r2, [pc, #28]	@ (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008afc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008afe:	4a07      	ldr	r2, [pc, #28]	@ (8008b1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b04:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	58024400 	.word	0x58024400
 8008b14:	080107b0 	.word	0x080107b0
 8008b18:	24000014 	.word	0x24000014
 8008b1c:	24000010 	.word	0x24000010

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b24:	f7ff ffcc 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b06      	ldr	r3, [pc, #24]	@ (8008b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4904      	ldr	r1, [pc, #16]	@ (8008b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	58024400 	.word	0x58024400
 8008b48:	080107b0 	.word	0x080107b0

08008b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b50:	f7ff ffb6 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4904      	ldr	r1, [pc, #16]	@ (8008b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	58024400 	.word	0x58024400
 8008b74:	080107b0 	.word	0x080107b0

08008b78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b0c6      	sub	sp, #280	@ 0x118
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b84:	2300      	movs	r3, #0
 8008b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	ea54 0305 	orrs.w	r3, r4, r5
 8008ba2:	d049      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bae:	d02f      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb4:	d828      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bba:	d01a      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bc0:	d822      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bca:	d007      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bcc:	e01c      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bce:	4bab      	ldr	r3, [pc, #684]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4aaa      	ldr	r2, [pc, #680]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008bda:	e01a      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be0:	3308      	adds	r3, #8
 8008be2:	2102      	movs	r1, #2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f002 fa49 	bl	800b07c <RCCEx_PLL2_Config>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008bf0:	e00f      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf6:	3328      	adds	r3, #40	@ 0x28
 8008bf8:	2102      	movs	r1, #2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 faf0 	bl	800b1e0 <RCCEx_PLL3_Config>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c06:	e004      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c0e:	e000      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c1a:	4b98      	ldr	r3, [pc, #608]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c28:	4a94      	ldr	r2, [pc, #592]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c2e:	e003      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008c44:	f04f 0900 	mov.w	r9, #0
 8008c48:	ea58 0309 	orrs.w	r3, r8, r9
 8008c4c:	d047      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d82a      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008c58:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c83 	.word	0x08008c83
 8008c68:	08008c99 	.word	0x08008c99
 8008c6c:	08008cb7 	.word	0x08008cb7
 8008c70:	08008cb7 	.word	0x08008cb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c74:	4b81      	ldr	r3, [pc, #516]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	4a80      	ldr	r2, [pc, #512]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c80:	e01a      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c86:	3308      	adds	r3, #8
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 f9f6 	bl	800b07c <RCCEx_PLL2_Config>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c96:	e00f      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9c:	3328      	adds	r3, #40	@ 0x28
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fa9d 	bl	800b1e0 <RCCEx_PLL3_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cac:	e004      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cb4:	e000      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cc0:	4b6e      	ldr	r3, [pc, #440]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc4:	f023 0107 	bic.w	r1, r3, #7
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	4a6b      	ldr	r2, [pc, #428]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cd4:	e003      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008cea:	f04f 0b00 	mov.w	fp, #0
 8008cee:	ea5a 030b 	orrs.w	r3, sl, fp
 8008cf2:	d05b      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cfc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d00:	d03b      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008d02:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d06:	d834      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d0c:	d037      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d12:	d82e      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d18:	d033      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d1e:	d828      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d24:	d01a      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d2a:	d822      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d34:	d007      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008d36:	e01c      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d38:	4b50      	ldr	r3, [pc, #320]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d44:	e01e      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 f994 	bl	800b07c <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e013      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d60:	3328      	adds	r3, #40	@ 0x28
 8008d62:	2100      	movs	r1, #0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 fa3b 	bl	800b1e0 <RCCEx_PLL3_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d70:	e008      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d78:	e004      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e002      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008d7e:	bf00      	nop
 8008d80:	e000      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10b      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d90:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d9c:	4a37      	ldr	r2, [pc, #220]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d9e:	430b      	orrs	r3, r1
 8008da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008da2:	e003      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	d05d      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008dd4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008dd8:	d03b      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008dda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008dde:	d834      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008de0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008de4:	d037      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dea:	d82e      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008dec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008df0:	d033      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008df2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008df6:	d828      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008df8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dfc:	d01a      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008dfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e02:	d822      	bhi.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e0c:	d007      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e0e:	e01c      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e10:	4b1a      	ldr	r3, [pc, #104]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e1c:	e01e      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e22:	3308      	adds	r3, #8
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f002 f928 	bl	800b07c <RCCEx_PLL2_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e32:	e013      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e38:	3328      	adds	r3, #40	@ 0x28
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f002 f9cf 	bl	800b1e0 <RCCEx_PLL3_Config>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e48:	e008      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e50:	e004      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e52:	bf00      	nop
 8008e54:	e002      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e64:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e74:	4a01      	ldr	r2, [pc, #4]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e76:	430b      	orrs	r3, r1
 8008e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e7a:	e005      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008e94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d03a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eae:	2b30      	cmp	r3, #48	@ 0x30
 8008eb0:	d01f      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008eb2:	2b30      	cmp	r3, #48	@ 0x30
 8008eb4:	d819      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d00c      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d815      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d019      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d111      	bne.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec6:	4baa      	ldr	r3, [pc, #680]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eca:	4aa9      	ldr	r2, [pc, #676]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ed2:	e011      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed8:	3308      	adds	r3, #8
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 f8cd 	bl	800b07c <RCCEx_PLL2_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ee8:	e006      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ef0:	e002      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008ef2:	bf00      	nop
 8008ef4:	e000      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f00:	4b9b      	ldr	r3, [pc, #620]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f0e:	4a98      	ldr	r2, [pc, #608]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f10:	430b      	orrs	r3, r1
 8008f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f14:	e003      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	d051      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f48:	d035      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f4e:	d82e      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f54:	d031      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008f56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f5a:	d828      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f60:	d01a      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f66:	d822      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f70:	d007      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008f72:	e01c      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f74:	4b7e      	ldr	r3, [pc, #504]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	4a7d      	ldr	r2, [pc, #500]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f80:	e01c      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f86:	3308      	adds	r3, #8
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 f876 	bl	800b07c <RCCEx_PLL2_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f96:	e011      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9c:	3328      	adds	r3, #40	@ 0x28
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 f91d 	bl	800b1e0 <RCCEx_PLL3_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fac:	e006      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd2:	4a67      	ldr	r2, [pc, #412]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fd8:	e003      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008fee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ff8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4313      	orrs	r3, r2
 8009000:	d053      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800900c:	d033      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800900e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009012:	d82c      	bhi.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009018:	d02f      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800901a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800901e:	d826      	bhi.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009020:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009024:	d02b      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800902a:	d820      	bhi.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800902c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009030:	d012      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009036:	d81a      	bhi.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d022      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800903c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009040:	d115      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009046:	3308      	adds	r3, #8
 8009048:	2101      	movs	r1, #1
 800904a:	4618      	mov	r0, r3
 800904c:	f002 f816 	bl	800b07c <RCCEx_PLL2_Config>
 8009050:	4603      	mov	r3, r0
 8009052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009056:	e015      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905c:	3328      	adds	r3, #40	@ 0x28
 800905e:	2101      	movs	r1, #1
 8009060:	4618      	mov	r0, r3
 8009062:	f002 f8bd 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800906c:	e00a      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009074:	e006      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009076:	bf00      	nop
 8009078:	e004      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800907a:	bf00      	nop
 800907c:	e002      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800908c:	4b38      	ldr	r3, [pc, #224]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009090:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800909a:	4a35      	ldr	r2, [pc, #212]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800909c:	430b      	orrs	r3, r1
 800909e:	6513      	str	r3, [r2, #80]	@ 0x50
 80090a0:	e003      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80090b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090ba:	2300      	movs	r3, #0
 80090bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d058      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090d6:	d033      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80090d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090dc:	d82c      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80090de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e2:	d02f      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80090e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e8:	d826      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80090ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090ee:	d02b      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80090f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090f4:	d820      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090fa:	d012      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80090fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009100:	d81a      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d022      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800910a:	d115      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800910c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009110:	3308      	adds	r3, #8
 8009112:	2101      	movs	r1, #1
 8009114:	4618      	mov	r0, r3
 8009116:	f001 ffb1 	bl	800b07c <RCCEx_PLL2_Config>
 800911a:	4603      	mov	r3, r0
 800911c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009120:	e015      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009126:	3328      	adds	r3, #40	@ 0x28
 8009128:	2101      	movs	r1, #1
 800912a:	4618      	mov	r0, r3
 800912c:	f002 f858 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009136:	e00a      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800913e:	e006      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009140:	bf00      	nop
 8009142:	e004      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009144:	bf00      	nop
 8009146:	e002      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009148:	bf00      	nop
 800914a:	e000      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800914c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800914e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10e      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009156:	4b06      	ldr	r3, [pc, #24]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800915e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009166:	4a02      	ldr	r2, [pc, #8]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009168:	430b      	orrs	r3, r1
 800916a:	6593      	str	r3, [r2, #88]	@ 0x58
 800916c:	e006      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800916e:	bf00      	nop
 8009170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800918c:	2300      	movs	r3, #0
 800918e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009192:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009196:	460b      	mov	r3, r1
 8009198:	4313      	orrs	r3, r2
 800919a:	d037      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a6:	d00e      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80091a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ac:	d816      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d018      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80091b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091b6:	d111      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b8:	4bc4      	ldr	r3, [pc, #784]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	4ac3      	ldr	r2, [pc, #780]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091c4:	e00f      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ca:	3308      	adds	r3, #8
 80091cc:	2101      	movs	r1, #1
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 ff54 	bl	800b07c <RCCEx_PLL2_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091da:	e004      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091e2:	e000      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80091e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091ee:	4bb7      	ldr	r3, [pc, #732]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80091f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fc:	4ab3      	ldr	r2, [pc, #716]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091fe:	430b      	orrs	r3, r1
 8009200:	6513      	str	r3, [r2, #80]	@ 0x50
 8009202:	e003      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800921c:	2300      	movs	r3, #0
 800921e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009222:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d039      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009232:	2b03      	cmp	r3, #3
 8009234:	d81c      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009236:	a201      	add	r2, pc, #4	@ (adr r2, 800923c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	08009279 	.word	0x08009279
 8009240:	0800924d 	.word	0x0800924d
 8009244:	0800925b 	.word	0x0800925b
 8009248:	08009279 	.word	0x08009279
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800924c:	4b9f      	ldr	r3, [pc, #636]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800924e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009250:	4a9e      	ldr	r2, [pc, #632]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009258:	e00f      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800925a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925e:	3308      	adds	r3, #8
 8009260:	2102      	movs	r1, #2
 8009262:	4618      	mov	r0, r3
 8009264:	f001 ff0a 	bl	800b07c <RCCEx_PLL2_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800926e:	e004      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009276:	e000      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009282:	4b92      	ldr	r3, [pc, #584]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009286:	f023 0103 	bic.w	r1, r3, #3
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009290:	4a8e      	ldr	r2, [pc, #568]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009292:	430b      	orrs	r3, r1
 8009294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009296:	e003      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800929c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80092ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	f000 8099 	beq.w	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092c2:	4b83      	ldr	r3, [pc, #524]	@ (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a82      	ldr	r2, [pc, #520]	@ (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ce:	f7f8 fed7 	bl	8002080 <HAL_GetTick>
 80092d2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092d6:	e00b      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d8:	f7f8 fed2 	bl	8002080 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b64      	cmp	r3, #100	@ 0x64
 80092e6:	d903      	bls.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092ee:	e005      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f0:	4b77      	ldr	r3, [pc, #476]	@ (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0ed      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80092fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009300:	2b00      	cmp	r3, #0
 8009302:	d173      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009304:	4b71      	ldr	r3, [pc, #452]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009306:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009310:	4053      	eors	r3, r2
 8009312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009316:	2b00      	cmp	r3, #0
 8009318:	d015      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800931a:	4b6c      	ldr	r3, [pc, #432]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800931c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009322:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009326:	4b69      	ldr	r3, [pc, #420]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932a:	4a68      	ldr	r2, [pc, #416]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009330:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009332:	4b66      	ldr	r3, [pc, #408]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009336:	4a65      	ldr	r2, [pc, #404]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800933c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800933e:	4a63      	ldr	r2, [pc, #396]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009344:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800934a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800934e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009352:	d118      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009354:	f7f8 fe94 	bl	8002080 <HAL_GetTick>
 8009358:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800935c:	e00d      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935e:	f7f8 fe8f 	bl	8002080 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009368:	1ad2      	subs	r2, r2, r3
 800936a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800936e:	429a      	cmp	r2, r3
 8009370:	d903      	bls.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009378:	e005      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800937a:	4b54      	ldr	r3, [pc, #336]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800937c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0eb      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800938a:	2b00      	cmp	r3, #0
 800938c:	d129      	bne.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800939a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800939e:	d10e      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x846>
 80093a0:	4b4a      	ldr	r3, [pc, #296]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093b0:	091a      	lsrs	r2, r3, #4
 80093b2:	4b48      	ldr	r3, [pc, #288]	@ (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	4a45      	ldr	r2, [pc, #276]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093b8:	430b      	orrs	r3, r1
 80093ba:	6113      	str	r3, [r2, #16]
 80093bc:	e005      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x852>
 80093be:	4b43      	ldr	r3, [pc, #268]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	4a42      	ldr	r2, [pc, #264]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093c8:	6113      	str	r3, [r2, #16]
 80093ca:	4b40      	ldr	r3, [pc, #256]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80093ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093da:	4a3c      	ldr	r2, [pc, #240]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093dc:	430b      	orrs	r3, r1
 80093de:	6713      	str	r3, [r2, #112]	@ 0x70
 80093e0:	e008      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80093ea:	e003      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f002 0301 	and.w	r3, r2, #1
 8009400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009404:	2300      	movs	r3, #0
 8009406:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800940a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	f000 808f 	beq.w	8009534 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800941c:	2b28      	cmp	r3, #40	@ 0x28
 800941e:	d871      	bhi.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009420:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	0800950d 	.word	0x0800950d
 800942c:	08009505 	.word	0x08009505
 8009430:	08009505 	.word	0x08009505
 8009434:	08009505 	.word	0x08009505
 8009438:	08009505 	.word	0x08009505
 800943c:	08009505 	.word	0x08009505
 8009440:	08009505 	.word	0x08009505
 8009444:	08009505 	.word	0x08009505
 8009448:	080094d9 	.word	0x080094d9
 800944c:	08009505 	.word	0x08009505
 8009450:	08009505 	.word	0x08009505
 8009454:	08009505 	.word	0x08009505
 8009458:	08009505 	.word	0x08009505
 800945c:	08009505 	.word	0x08009505
 8009460:	08009505 	.word	0x08009505
 8009464:	08009505 	.word	0x08009505
 8009468:	080094ef 	.word	0x080094ef
 800946c:	08009505 	.word	0x08009505
 8009470:	08009505 	.word	0x08009505
 8009474:	08009505 	.word	0x08009505
 8009478:	08009505 	.word	0x08009505
 800947c:	08009505 	.word	0x08009505
 8009480:	08009505 	.word	0x08009505
 8009484:	08009505 	.word	0x08009505
 8009488:	0800950d 	.word	0x0800950d
 800948c:	08009505 	.word	0x08009505
 8009490:	08009505 	.word	0x08009505
 8009494:	08009505 	.word	0x08009505
 8009498:	08009505 	.word	0x08009505
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009505 	.word	0x08009505
 80094a4:	08009505 	.word	0x08009505
 80094a8:	0800950d 	.word	0x0800950d
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009505 	.word	0x08009505
 80094b8:	08009505 	.word	0x08009505
 80094bc:	08009505 	.word	0x08009505
 80094c0:	08009505 	.word	0x08009505
 80094c4:	08009505 	.word	0x08009505
 80094c8:	0800950d 	.word	0x0800950d
 80094cc:	58024400 	.word	0x58024400
 80094d0:	58024800 	.word	0x58024800
 80094d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094dc:	3308      	adds	r3, #8
 80094de:	2101      	movs	r1, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fdcb 	bl	800b07c <RCCEx_PLL2_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094ec:	e00f      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f2:	3328      	adds	r3, #40	@ 0x28
 80094f4:	2101      	movs	r1, #1
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fe72 	bl	800b1e0 <RCCEx_PLL3_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009502:	e004      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800950a:	e000      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800950c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800950e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009516:	4bbf      	ldr	r3, [pc, #764]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009524:	4abb      	ldr	r2, [pc, #748]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009526:	430b      	orrs	r3, r1
 8009528:	6553      	str	r3, [r2, #84]	@ 0x54
 800952a:	e003      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f002 0302 	and.w	r3, r2, #2
 8009540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009544:	2300      	movs	r3, #0
 8009546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800954a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800954e:	460b      	mov	r3, r1
 8009550:	4313      	orrs	r3, r2
 8009552:	d041      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800955a:	2b05      	cmp	r3, #5
 800955c:	d824      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800955e:	a201      	add	r2, pc, #4	@ (adr r2, 8009564 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	080095b1 	.word	0x080095b1
 8009568:	0800957d 	.word	0x0800957d
 800956c:	08009593 	.word	0x08009593
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	080095b1 	.word	0x080095b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800957c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009580:	3308      	adds	r3, #8
 8009582:	2101      	movs	r1, #1
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fd79 	bl	800b07c <RCCEx_PLL2_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009590:	e00f      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009596:	3328      	adds	r3, #40	@ 0x28
 8009598:	2101      	movs	r1, #1
 800959a:	4618      	mov	r0, r3
 800959c:	f001 fe20 	bl	800b1e0 <RCCEx_PLL3_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095ae:	e000      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80095b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ba:	4b96      	ldr	r3, [pc, #600]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f023 0107 	bic.w	r1, r3, #7
 80095c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095c8:	4a92      	ldr	r2, [pc, #584]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095ca:	430b      	orrs	r3, r1
 80095cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80095ce:	e003      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f002 0304 	and.w	r3, r2, #4
 80095e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d044      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009600:	2b05      	cmp	r3, #5
 8009602:	d825      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009604:	a201      	add	r2, pc, #4	@ (adr r2, 800960c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009659 	.word	0x08009659
 8009610:	08009625 	.word	0x08009625
 8009614:	0800963b 	.word	0x0800963b
 8009618:	08009659 	.word	0x08009659
 800961c:	08009659 	.word	0x08009659
 8009620:	08009659 	.word	0x08009659
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009628:	3308      	adds	r3, #8
 800962a:	2101      	movs	r1, #1
 800962c:	4618      	mov	r0, r3
 800962e:	f001 fd25 	bl	800b07c <RCCEx_PLL2_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009638:	e00f      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963e:	3328      	adds	r3, #40	@ 0x28
 8009640:	2101      	movs	r1, #1
 8009642:	4618      	mov	r0, r3
 8009644:	f001 fdcc 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800964e:	e004      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009656:	e000      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009662:	4b6c      	ldr	r3, [pc, #432]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009666:	f023 0107 	bic.w	r1, r3, #7
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009672:	4a68      	ldr	r2, [pc, #416]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009674:	430b      	orrs	r3, r1
 8009676:	6593      	str	r3, [r2, #88]	@ 0x58
 8009678:	e003      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800967e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f002 0320 	and.w	r3, r2, #32
 800968e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009692:	2300      	movs	r3, #0
 8009694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009698:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800969c:	460b      	mov	r3, r1
 800969e:	4313      	orrs	r3, r2
 80096a0:	d055      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096ae:	d033      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80096b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096b4:	d82c      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ba:	d02f      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c0:	d826      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096c6:	d02b      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80096c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096cc:	d820      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d2:	d012      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80096d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d8:	d81a      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d022      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80096de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e2:	d115      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e8:	3308      	adds	r3, #8
 80096ea:	2100      	movs	r1, #0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 fcc5 	bl	800b07c <RCCEx_PLL2_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096f8:	e015      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fe:	3328      	adds	r3, #40	@ 0x28
 8009700:	2102      	movs	r1, #2
 8009702:	4618      	mov	r0, r3
 8009704:	f001 fd6c 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800970e:	e00a      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009716:	e006      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009718:	bf00      	nop
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800971c:	bf00      	nop
 800971e:	e002      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009720:	bf00      	nop
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800972e:	4b39      	ldr	r3, [pc, #228]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800973e:	4a35      	ldr	r2, [pc, #212]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009740:	430b      	orrs	r3, r1
 8009742:	6553      	str	r3, [r2, #84]	@ 0x54
 8009744:	e003      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800974e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800975a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800975e:	2300      	movs	r3, #0
 8009760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009764:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009768:	460b      	mov	r3, r1
 800976a:	4313      	orrs	r3, r2
 800976c:	d058      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009776:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800977a:	d033      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800977c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009780:	d82c      	bhi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009786:	d02f      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800978c:	d826      	bhi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800978e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009792:	d02b      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009794:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009798:	d820      	bhi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800979a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800979e:	d012      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80097a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097a4:	d81a      	bhi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d022      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80097aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ae:	d115      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b4:	3308      	adds	r3, #8
 80097b6:	2100      	movs	r1, #0
 80097b8:	4618      	mov	r0, r3
 80097ba:	f001 fc5f 	bl	800b07c <RCCEx_PLL2_Config>
 80097be:	4603      	mov	r3, r0
 80097c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097c4:	e015      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ca:	3328      	adds	r3, #40	@ 0x28
 80097cc:	2102      	movs	r1, #2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 fd06 	bl	800b1e0 <RCCEx_PLL3_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097da:	e00a      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097e2:	e006      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80097e4:	bf00      	nop
 80097e6:	e004      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80097e8:	bf00      	nop
 80097ea:	e002      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80097f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10e      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097fa:	4b06      	ldr	r3, [pc, #24]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800980a:	4a02      	ldr	r2, [pc, #8]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800980c:	430b      	orrs	r3, r1
 800980e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009810:	e006      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800981c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800982c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009830:	2300      	movs	r3, #0
 8009832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009836:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800983a:	460b      	mov	r3, r1
 800983c:	4313      	orrs	r3, r2
 800983e:	d055      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009848:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800984c:	d033      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800984e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009852:	d82c      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009858:	d02f      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800985a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800985e:	d826      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009860:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009864:	d02b      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009866:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800986a:	d820      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800986c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009870:	d012      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009876:	d81a      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d022      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800987c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009880:	d115      	bne.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009886:	3308      	adds	r3, #8
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fbf6 	bl	800b07c <RCCEx_PLL2_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009896:	e015      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989c:	3328      	adds	r3, #40	@ 0x28
 800989e:	2102      	movs	r1, #2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fc9d 	bl	800b1e0 <RCCEx_PLL3_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098ac:	e00a      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098b6:	bf00      	nop
 80098b8:	e004      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098ba:	bf00      	nop
 80098bc:	e002      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098cc:	4ba0      	ldr	r3, [pc, #640]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80098d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098dc:	4a9c      	ldr	r2, [pc, #624]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098de:	430b      	orrs	r3, r1
 80098e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80098e2:	e003      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f002 0308 	and.w	r3, r2, #8
 80098f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009902:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d01e      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009918:	d10c      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	3328      	adds	r3, #40	@ 0x28
 8009920:	2102      	movs	r1, #2
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fc5c 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009934:	4b86      	ldr	r3, [pc, #536]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009938:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009944:	4a82      	ldr	r2, [pc, #520]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009946:	430b      	orrs	r3, r1
 8009948:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f002 0310 	and.w	r3, r2, #16
 8009956:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800995a:	2300      	movs	r3, #0
 800995c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009960:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009964:	460b      	mov	r3, r1
 8009966:	4313      	orrs	r3, r2
 8009968:	d01e      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009976:	d10c      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997c:	3328      	adds	r3, #40	@ 0x28
 800997e:	2102      	movs	r1, #2
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fc2d 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009992:	4b6f      	ldr	r3, [pc, #444]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800999a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099a2:	4a6b      	ldr	r2, [pc, #428]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80099b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099b6:	2300      	movs	r3, #0
 80099b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099be:	460b      	mov	r3, r1
 80099c0:	4313      	orrs	r3, r2
 80099c2:	d03e      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d0:	d022      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80099d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d6:	d81b      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80099dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e0:	d00b      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80099e2:	e015      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e8:	3308      	adds	r3, #8
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 fb45 	bl	800b07c <RCCEx_PLL2_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099f8:	e00f      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fe:	3328      	adds	r3, #40	@ 0x28
 8009a00:	2102      	movs	r1, #2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fbec 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a0e:	e004      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a16:	e000      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a22:	4b4b      	ldr	r3, [pc, #300]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a32:	4a47      	ldr	r2, [pc, #284]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a34:	430b      	orrs	r3, r1
 8009a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a38:	e003      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a50:	2300      	movs	r3, #0
 8009a52:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	d03b      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a6a:	d01f      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009a6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a70:	d818      	bhi.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a76:	d003      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a7c:	d007      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009a7e:	e011      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a80:	4b33      	ldr	r3, [pc, #204]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4a32      	ldr	r2, [pc, #200]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a8c:	e00f      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a92:	3328      	adds	r3, #40	@ 0x28
 8009a94:	2101      	movs	r1, #1
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fba2 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009aa2:	e004      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009aaa:	e000      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ab6:	4b26      	ldr	r3, [pc, #152]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac6:	4a22      	ldr	r2, [pc, #136]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	6553      	str	r3, [r2, #84]	@ 0x54
 8009acc:	e003      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ae8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009aec:	460b      	mov	r3, r1
 8009aee:	4313      	orrs	r3, r2
 8009af0:	d034      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b00:	d007      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009b02:	e011      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b04:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	4a11      	ldr	r2, [pc, #68]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b10:	e00e      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	3308      	adds	r3, #8
 8009b18:	2102      	movs	r1, #2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 faae 	bl	800b07c <RCCEx_PLL2_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b26:	e003      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10d      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b46:	4a02      	ldr	r2, [pc, #8]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b4c:	e006      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009b4e:	bf00      	nop
 8009b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009b72:	460b      	mov	r3, r1
 8009b74:	4313      	orrs	r3, r2
 8009b76:	d00c      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7c:	3328      	adds	r3, #40	@ 0x28
 8009b7e:	2102      	movs	r1, #2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fb2d 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ba4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4313      	orrs	r3, r2
 8009bac:	d036      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bb8:	d018      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bbe:	d811      	bhi.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc4:	d014      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bca:	d80b      	bhi.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d011      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bd4:	d106      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd6:	4bb7      	ldr	r3, [pc, #732]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bda:	4ab6      	ldr	r2, [pc, #728]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009be2:	e008      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bea:	e004      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009bec:	bf00      	nop
 8009bee:	e002      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009bf0:	bf00      	nop
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bfe:	4bad      	ldr	r3, [pc, #692]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c0c:	4aa9      	ldr	r2, [pc, #676]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c12:	e003      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c28:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009c32:	460b      	mov	r3, r1
 8009c34:	4313      	orrs	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c38:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c46:	4a9b      	ldr	r2, [pc, #620]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c5e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009c62:	460b      	mov	r3, r1
 8009c64:	4313      	orrs	r3, r2
 8009c66:	d009      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c68:	4b92      	ldr	r3, [pc, #584]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c76:	4a8f      	ldr	r2, [pc, #572]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c8e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d00e      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c98:	4b86      	ldr	r3, [pc, #536]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	4a85      	ldr	r2, [pc, #532]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ca2:	6113      	str	r3, [r2, #16]
 8009ca4:	4b83      	ldr	r3, [pc, #524]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ca6:	6919      	ldr	r1, [r3, #16]
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cb0:	4a80      	ldr	r2, [pc, #512]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cc8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	d009      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cd2:	4b78      	ldr	r3, [pc, #480]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce0:	4a74      	ldr	r2, [pc, #464]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d00a      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d02:	4b6c      	ldr	r3, [pc, #432]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d06:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d12:	4a68      	ldr	r2, [pc, #416]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	2100      	movs	r1, #0
 8009d22:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4313      	orrs	r3, r2
 8009d32:	d011      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d38:	3308      	adds	r3, #8
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 f99d 	bl	800b07c <RCCEx_PLL2_Config>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	2100      	movs	r1, #0
 8009d62:	6239      	str	r1, [r7, #32]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4313      	orrs	r3, r2
 8009d72:	d011      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	3308      	adds	r3, #8
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 f97d 	bl	800b07c <RCCEx_PLL2_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009d88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	2100      	movs	r1, #0
 8009da2:	61b9      	str	r1, [r7, #24]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009dae:	460b      	mov	r3, r1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	d011      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	3308      	adds	r3, #8
 8009dba:	2102      	movs	r1, #2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f95d 	bl	800b07c <RCCEx_PLL2_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	2100      	movs	r1, #0
 8009de2:	6139      	str	r1, [r7, #16]
 8009de4:	f003 0308 	and.w	r3, r3, #8
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009dee:	460b      	mov	r3, r1
 8009df0:	4313      	orrs	r3, r2
 8009df2:	d011      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df8:	3328      	adds	r3, #40	@ 0x28
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 f9ef 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	2100      	movs	r1, #0
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4313      	orrs	r3, r2
 8009e32:	d011      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e38:	3328      	adds	r3, #40	@ 0x28
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f9cf 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	2100      	movs	r1, #0
 8009e62:	6039      	str	r1, [r7, #0]
 8009e64:	f003 0320 	and.w	r3, r3, #32
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4313      	orrs	r3, r2
 8009e72:	d011      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e78:	3328      	adds	r3, #40	@ 0x28
 8009e7a:	2102      	movs	r1, #2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 f9af 	bl	800b1e0 <RCCEx_PLL3_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009e98:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009eac:	46bd      	mov	sp, r7
 8009eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eb2:	bf00      	nop
 8009eb4:	58024400 	.word	0x58024400

08009eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b090      	sub	sp, #64	@ 0x40
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	f040 8094 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ed0:	4b9b      	ldr	r3, [pc, #620]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	f200 8087 	bhi.w	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009efd 	.word	0x08009efd
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f4d 	.word	0x08009f4d
 8009ef4:	08009fe9 	.word	0x08009fe9
 8009ef8:	08009f75 	.word	0x08009f75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009efc:	4b90      	ldr	r3, [pc, #576]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f08:	d108      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 ff62 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f18:	f000 bc93 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f20:	f000 bc8f 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f24:	4b86      	ldr	r3, [pc, #536]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f30:	d108      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0318 	add.w	r3, r7, #24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fca6 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f40:	f000 bc7f 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	f000 bc7b 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f4c:	4b7c      	ldr	r3, [pc, #496]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f58:	d108      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fde6 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f68:	f000 bc6b 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f70:	f000 bc67 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f74:	4b72      	ldr	r3, [pc, #456]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f7e:	4b70      	ldr	r3, [pc, #448]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f90:	4b6b      	ldr	r3, [pc, #428]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	4a6a      	ldr	r2, [pc, #424]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa2:	e01f      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa4:	4b66      	ldr	r3, [pc, #408]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fb8:	d102      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fba:	4b63      	ldr	r3, [pc, #396]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fbe:	e011      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc0:	4b5f      	ldr	r3, [pc, #380]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fcc:	d106      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd4:	d102      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fda:	e003      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fe0:	f000 bc2f 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fe4:	f000 bc2d 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fe8:	4b59      	ldr	r3, [pc, #356]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fec:	f000 bc29 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff4:	f000 bc25 	b.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a000:	430b      	orrs	r3, r1
 800a002:	f040 80a7 	bne.w	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a006:	4b4e      	ldr	r3, [pc, #312]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a00a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a016:	d054      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a01e:	f200 808b 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a028:	f000 8083 	beq.w	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a032:	f200 8081 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a03c:	d02f      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a044:	d878      	bhi.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a052:	d012      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a054:	e070      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a056:	4b3a      	ldr	r3, [pc, #232]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a05e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a062:	d107      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 feb5 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a072:	e3e6      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	e3e3      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a07a:	4b31      	ldr	r3, [pc, #196]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a088:	f107 0318 	add.w	r3, r7, #24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fbfb 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a096:	e3d4      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09c:	e3d1      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a09e:	4b28      	ldr	r3, [pc, #160]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fd3d 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e3c2      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e3bf      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d10c      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0de:	4b18      	ldr	r3, [pc, #96]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	4a16      	ldr	r2, [pc, #88]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f0:	e01e      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0f2:	4b13      	ldr	r3, [pc, #76]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0fe:	d106      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a106:	d102      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a108:	4b0f      	ldr	r3, [pc, #60]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10c:	e010      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11a:	d106      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a122:	d102      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a124:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a12e:	e388      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a130:	e387      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a136:	e384      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a13c:	e381      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
 800a144:	03d09000 	.word	0x03d09000
 800a148:	003d0900 	.word	0x003d0900
 800a14c:	007a1200 	.word	0x007a1200
 800a150:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a158:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a15c:	430b      	orrs	r3, r1
 800a15e:	f040 809c 	bne.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a162:	4b9e      	ldr	r3, [pc, #632]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a166:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a16a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a172:	d054      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a17a:	f200 808b 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a184:	f000 8083 	beq.w	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a18e:	f200 8081 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a198:	d02f      	beq.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1a0:	d878      	bhi.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ae:	d012      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a1b0:	e070      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1b2:	4b8a      	ldr	r3, [pc, #552]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fe07 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ce:	e338      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d4:	e335      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1d6:	4b81      	ldr	r3, [pc, #516]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1e2:	d107      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e4:	f107 0318 	add.w	r3, r7, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fb4d 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f2:	e326      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f8:	e323      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1fa:	4b78      	ldr	r3, [pc, #480]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a206:	d107      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a208:	f107 030c 	add.w	r3, r7, #12
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fc8f 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a216:	e314      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a21c:	e311      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a21e:	4b6f      	ldr	r3, [pc, #444]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a222:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a228:	4b6c      	ldr	r3, [pc, #432]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b04      	cmp	r3, #4
 800a232:	d10c      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	2b00      	cmp	r3, #0
 800a238:	d109      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23a:	4b68      	ldr	r3, [pc, #416]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a66      	ldr	r2, [pc, #408]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a24c:	e01e      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a24e:	4b63      	ldr	r3, [pc, #396]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a25a:	d106      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a262:	d102      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a264:	4b5f      	ldr	r3, [pc, #380]	@ (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a268:	e010      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a26a:	4b5c      	ldr	r3, [pc, #368]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27e:	d102      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a280:	4b59      	ldr	r3, [pc, #356]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a284:	e002      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a28a:	e2da      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a28c:	e2d9      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a28e:	4b57      	ldr	r3, [pc, #348]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a292:	e2d6      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a298:	e2d3      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a29e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	f040 80a7 	bne.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2a8:	4b4c      	ldr	r3, [pc, #304]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2b8:	d055      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2c0:	f200 8096 	bhi.w	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2ca:	f000 8084 	beq.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2d4:	f200 808c 	bhi.w	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2de:	d030      	beq.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e6:	f200 8083 	bhi.w	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d004      	beq.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f6:	d012      	beq.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a2f8:	e07a      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2fa:	4b38      	ldr	r3, [pc, #224]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a306:	d107      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 fd63 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a316:	e294      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e291      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a31e:	4b2f      	ldr	r3, [pc, #188]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a32a:	d107      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32c:	f107 0318 	add.w	r3, r7, #24
 800a330:	4618      	mov	r0, r3
 800a332:	f000 faa9 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33a:	e282      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	e27f      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a342:	4b26      	ldr	r3, [pc, #152]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34e:	d107      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a350:	f107 030c 	add.w	r3, r7, #12
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fbeb 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35e:	e270      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a364:	e26d      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a366:	4b1d      	ldr	r3, [pc, #116]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a36a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a370:	4b1a      	ldr	r3, [pc, #104]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d10c      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a382:	4b16      	ldr	r3, [pc, #88]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	08db      	lsrs	r3, r3, #3
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	4a14      	ldr	r2, [pc, #80]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a38e:	fa22 f303 	lsr.w	r3, r2, r3
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a394:	e01e      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a396:	4b11      	ldr	r3, [pc, #68]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a2:	d106      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3aa:	d102      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b0:	e010      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3be:	d106      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c6:	d102      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3c8:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3cc:	e002      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3d2:	e236      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3d4:	e235      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3d6:	4b05      	ldr	r3, [pc, #20]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3da:	e232      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3dc:	58024400 	.word	0x58024400
 800a3e0:	03d09000 	.word	0x03d09000
 800a3e4:	003d0900 	.word	0x003d0900
 800a3e8:	007a1200 	.word	0x007a1200
 800a3ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f4:	e225      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a3fe:	430b      	orrs	r3, r1
 800a400:	f040 8085 	bne.w	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a404:	4b9c      	ldr	r3, [pc, #624]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a408:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a40c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a414:	d06b      	beq.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a41c:	d874      	bhi.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a424:	d056      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a42c:	d86c      	bhi.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a434:	d03b      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a43c:	d864      	bhi.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a444:	d021      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a44c:	d85c      	bhi.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d004      	beq.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a45a:	d004      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a45c:	e054      	b.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a45e:	f7fe fb5f 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a464:	e1ed      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a466:	4b84      	ldr	r3, [pc, #528]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a46e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a472:	d107      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a474:	f107 0318 	add.w	r3, r7, #24
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fa05 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a482:	e1de      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a488:	e1db      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a48a:	4b7b      	ldr	r3, [pc, #492]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a496:	d107      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fb47 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a6:	e1cc      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e1c9      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4ae:	4b72      	ldr	r3, [pc, #456]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d109      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	08db      	lsrs	r3, r3, #3
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	4a6d      	ldr	r2, [pc, #436]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4cc:	e1b9      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d2:	e1b6      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4d4:	4b68      	ldr	r3, [pc, #416]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4e0:	d102      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a4e2:	4b67      	ldr	r3, [pc, #412]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e6:	e1ac      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ec:	e1a9      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4ee:	4b62      	ldr	r3, [pc, #392]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4fa:	d102      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a4fc:	4b61      	ldr	r3, [pc, #388]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a500:	e19f      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a506:	e19c      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	e199      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a512:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a516:	430b      	orrs	r3, r1
 800a518:	d173      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a51a:	4b57      	ldr	r3, [pc, #348]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52a:	d02f      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a532:	d863      	bhi.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a540:	d012      	beq.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a542:	e05b      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a544:	4b4c      	ldr	r3, [pc, #304]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a550:	d107      	bne.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a552:	f107 0318 	add.w	r3, r7, #24
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f996 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a560:	e16f      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a566:	e16c      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a568:	4b43      	ldr	r3, [pc, #268]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a574:	d107      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a576:	f107 030c 	add.w	r3, r7, #12
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fad8 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a584:	e15d      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58a:	e15a      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a58c:	4b3a      	ldr	r3, [pc, #232]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a590:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a594:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a596:	4b38      	ldr	r3, [pc, #224]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d10c      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d109      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a8:	4b33      	ldr	r3, [pc, #204]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	08db      	lsrs	r3, r3, #3
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	4a32      	ldr	r2, [pc, #200]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ba:	e01e      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5bc:	4b2e      	ldr	r3, [pc, #184]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c8:	d106      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5d0:	d102      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5d2:	4b2b      	ldr	r3, [pc, #172]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d6:	e010      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5d8:	4b27      	ldr	r3, [pc, #156]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e4:	d106      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ec:	d102      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ee:	4b25      	ldr	r3, [pc, #148]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f2:	e002      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5f8:	e123      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5fa:	e122      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a600:	e11f      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a602:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a606:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a60a:	430b      	orrs	r3, r1
 800a60c:	d13c      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a60e:	4b1a      	ldr	r3, [pc, #104]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a616:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d004      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a624:	d012      	beq.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a626:	e023      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a628:	4b13      	ldr	r3, [pc, #76]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a634:	d107      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fbcc 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a644:	e0fd      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64a:	e0fa      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64c:	4b0a      	ldr	r3, [pc, #40]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a658:	d107      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65a:	f107 0318 	add.w	r3, r7, #24
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f912 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a668:	e0eb      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66e:	e0e8      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a674:	e0e5      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a676:	bf00      	nop
 800a678:	58024400 	.word	0x58024400
 800a67c:	03d09000 	.word	0x03d09000
 800a680:	003d0900 	.word	0x003d0900
 800a684:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a68c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a690:	430b      	orrs	r3, r1
 800a692:	f040 8085 	bne.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a696:	4b6d      	ldr	r3, [pc, #436]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a69a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a69e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6a6:	d06b      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6ae:	d874      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b6:	d056      	beq.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6be:	d86c      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6c6:	d03b      	beq.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6ce:	d864      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6d6:	d021      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6de:	d85c      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ec:	d004      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a6ee:	e054      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6f0:	f000 f8b4 	bl	800a85c <HAL_RCCEx_GetD3PCLK1Freq>
 800a6f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6f6:	e0a4      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f8:	4b54      	ldr	r3, [pc, #336]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a704:	d107      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a706:	f107 0318 	add.w	r3, r7, #24
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f8bc 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e095      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71a:	e092      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a71c:	4b4b      	ldr	r3, [pc, #300]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72a:	f107 030c 	add.w	r3, r7, #12
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f9fe 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	e083      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e080      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a740:	4b42      	ldr	r3, [pc, #264]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d109      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a74c:	4b3f      	ldr	r3, [pc, #252]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	08db      	lsrs	r3, r3, #3
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	4a3e      	ldr	r2, [pc, #248]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a758:	fa22 f303 	lsr.w	r3, r2, r3
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a75e:	e070      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e06d      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a766:	4b39      	ldr	r3, [pc, #228]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a76e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a772:	d102      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a774:	4b37      	ldr	r3, [pc, #220]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	e063      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77e:	e060      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a780:	4b32      	ldr	r3, [pc, #200]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a78c:	d102      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a78e:	4b32      	ldr	r3, [pc, #200]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a792:	e056      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a798:	e053      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79e:	e050      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	d148      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7ac:	4b27      	ldr	r3, [pc, #156]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7bc:	d02a      	beq.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c4:	d838      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a7d4:	e030      	b.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e8:	e02b      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ee:	e028      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7f0:	4b16      	ldr	r3, [pc, #88]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7fc:	d107      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fae8 	bl	800add8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a80c:	e019      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a812:	e016      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a814:	4b0d      	ldr	r3, [pc, #52]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a81c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a820:	d107      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f82e 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a830:	e007      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83c:	e001      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a844:	4618      	mov	r0, r3
 800a846:	3740      	adds	r7, #64	@ 0x40
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	58024400 	.word	0x58024400
 800a850:	03d09000 	.word	0x03d09000
 800a854:	003d0900 	.word	0x003d0900
 800a858:	007a1200 	.word	0x007a1200

0800a85c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a860:	f7fe f92e 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 800a864:	4602      	mov	r2, r0
 800a866:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	091b      	lsrs	r3, r3, #4
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	4904      	ldr	r1, [pc, #16]	@ (800a884 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a872:	5ccb      	ldrb	r3, [r1, r3]
 800a874:	f003 031f 	and.w	r3, r3, #31
 800a878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	58024400 	.word	0x58024400
 800a884:	080107b0 	.word	0x080107b0

0800a888 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a888:	b480      	push	{r7}
 800a88a:	b089      	sub	sp, #36	@ 0x24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a890:	4ba1      	ldr	r3, [pc, #644]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a89a:	4b9f      	ldr	r3, [pc, #636]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89e:	0b1b      	lsrs	r3, r3, #12
 800a8a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8a6:	4b9c      	ldr	r3, [pc, #624]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8aa:	091b      	lsrs	r3, r3, #4
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8b2:	4b99      	ldr	r3, [pc, #612]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b6:	08db      	lsrs	r3, r3, #3
 800a8b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	fb02 f303 	mul.w	r3, r2, r3
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8111 	beq.w	800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	f000 8083 	beq.w	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	f200 80a1 	bhi.w	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d056      	beq.n	800a9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8f2:	e099      	b.n	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8f4:	4b88      	ldr	r3, [pc, #544]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0320 	and.w	r3, r3, #32
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d02d      	beq.n	800a95c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a900:	4b85      	ldr	r3, [pc, #532]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	08db      	lsrs	r3, r3, #3
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	4a84      	ldr	r2, [pc, #528]	@ (800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a90c:	fa22 f303 	lsr.w	r3, r2, r3
 800a910:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	ee07 3a90 	vmov	s15, r3
 800a918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a92a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a93e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a956:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a95a:	e087      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a966:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a96e:	4b6a      	ldr	r3, [pc, #424]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a982:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a98e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a99e:	e065      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b2:	4b59      	ldr	r3, [pc, #356]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9e2:	e043      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f6:	4b48      	ldr	r3, [pc, #288]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa26:	e021      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b37      	ldr	r3, [pc, #220]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa6c:	4b2a      	ldr	r3, [pc, #168]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa70:	0a5b      	lsrs	r3, r3, #9
 800aa72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa86:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa92:	ee17 2a90 	vmov	r2, s15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	0c1b      	lsrs	r3, r3, #16
 800aaa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aab4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aabc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac0:	ee17 2a90 	vmov	r2, s15
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aac8:	4b13      	ldr	r3, [pc, #76]	@ (800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aacc:	0e1b      	lsrs	r3, r3, #24
 800aace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aade:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aae2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaee:	ee17 2a90 	vmov	r2, s15
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aaf6:	e008      	b.n	800ab0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	609a      	str	r2, [r3, #8]
}
 800ab0a:	bf00      	nop
 800ab0c:	3724      	adds	r7, #36	@ 0x24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	03d09000 	.word	0x03d09000
 800ab20:	46000000 	.word	0x46000000
 800ab24:	4c742400 	.word	0x4c742400
 800ab28:	4a742400 	.word	0x4a742400
 800ab2c:	4af42400 	.word	0x4af42400

0800ab30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b089      	sub	sp, #36	@ 0x24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab38:	4ba1      	ldr	r3, [pc, #644]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3c:	f003 0303 	and.w	r3, r3, #3
 800ab40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab42:	4b9f      	ldr	r3, [pc, #636]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab46:	0d1b      	lsrs	r3, r3, #20
 800ab48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab4e:	4b9c      	ldr	r3, [pc, #624]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab5a:	4b99      	ldr	r3, [pc, #612]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab5e:	08db      	lsrs	r3, r3, #3
 800ab60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	fb02 f303 	mul.w	r3, r2, r3
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 8111 	beq.w	800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	f000 8083 	beq.w	800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	f200 80a1 	bhi.w	800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d056      	beq.n	800ac48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab9a:	e099      	b.n	800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab9c:	4b88      	ldr	r3, [pc, #544]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0320 	and.w	r3, r3, #32
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d02d      	beq.n	800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aba8:	4b85      	ldr	r3, [pc, #532]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	08db      	lsrs	r3, r3, #3
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	4a84      	ldr	r2, [pc, #528]	@ (800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abb4:	fa22 f303 	lsr.w	r3, r2, r3
 800abb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	ee07 3a90 	vmov	s15, r3
 800abc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd2:	4b7b      	ldr	r3, [pc, #492]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac02:	e087      	b.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800adcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac16:	4b6a      	ldr	r3, [pc, #424]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac46:	e065      	b.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5a:	4b59      	ldr	r3, [pc, #356]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac8a:	e043      	b.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9e:	4b48      	ldr	r3, [pc, #288]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acce:	e021      	b.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace2:	4b37      	ldr	r3, [pc, #220]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad14:	4b2a      	ldr	r3, [pc, #168]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad18:	0a5b      	lsrs	r3, r3, #9
 800ad1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad3a:	ee17 2a90 	vmov	r2, s15
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad42:	4b1f      	ldr	r3, [pc, #124]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	0c1b      	lsrs	r3, r3, #16
 800ad48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad4c:	ee07 3a90 	vmov	s15, r3
 800ad50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad68:	ee17 2a90 	vmov	r2, s15
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad70:	4b13      	ldr	r3, [pc, #76]	@ (800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad74:	0e1b      	lsrs	r3, r3, #24
 800ad76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad96:	ee17 2a90 	vmov	r2, s15
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad9e:	e008      	b.n	800adb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	609a      	str	r2, [r3, #8]
}
 800adb2:	bf00      	nop
 800adb4:	3724      	adds	r7, #36	@ 0x24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	58024400 	.word	0x58024400
 800adc4:	03d09000 	.word	0x03d09000
 800adc8:	46000000 	.word	0x46000000
 800adcc:	4c742400 	.word	0x4c742400
 800add0:	4a742400 	.word	0x4a742400
 800add4:	4af42400 	.word	0x4af42400

0800add8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800add8:	b480      	push	{r7}
 800adda:	b089      	sub	sp, #36	@ 0x24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ade0:	4ba0      	ldr	r3, [pc, #640]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade4:	f003 0303 	and.w	r3, r3, #3
 800ade8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800adea:	4b9e      	ldr	r3, [pc, #632]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adee:	091b      	lsrs	r3, r3, #4
 800adf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adf4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800adf6:	4b9b      	ldr	r3, [pc, #620]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae00:	4b98      	ldr	r3, [pc, #608]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae04:	08db      	lsrs	r3, r3, #3
 800ae06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	fb02 f303 	mul.w	r3, r2, r3
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 8111 	beq.w	800b046 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	f000 8083 	beq.w	800af32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	f200 80a1 	bhi.w	800af76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d056      	beq.n	800aeee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae40:	e099      	b.n	800af76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae42:	4b88      	ldr	r3, [pc, #544]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d02d      	beq.n	800aeaa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae4e:	4b85      	ldr	r3, [pc, #532]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	08db      	lsrs	r3, r3, #3
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	4a83      	ldr	r2, [pc, #524]	@ (800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	ee07 3a90 	vmov	s15, r3
 800ae70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae78:	4b7a      	ldr	r3, [pc, #488]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae88:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aea8:	e087      	b.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b070 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aeb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebc:	4b69      	ldr	r3, [pc, #420]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aecc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aedc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeec:	e065      	b.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aefc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af00:	4b58      	ldr	r3, [pc, #352]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af10:	ed97 6a03 	vldr	s12, [r7, #12]
 800af14:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af30:	e043      	b.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af44:	4b47      	ldr	r3, [pc, #284]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4c:	ee07 3a90 	vmov	s15, r3
 800af50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af54:	ed97 6a03 	vldr	s12, [r7, #12]
 800af58:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af74:	e021      	b.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af80:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b070 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af88:	4b36      	ldr	r3, [pc, #216]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af90:	ee07 3a90 	vmov	s15, r3
 800af94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af98:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afba:	4b2a      	ldr	r3, [pc, #168]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afbe:	0a5b      	lsrs	r3, r3, #9
 800afc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afc4:	ee07 3a90 	vmov	s15, r3
 800afc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afe0:	ee17 2a90 	vmov	r2, s15
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800afe8:	4b1e      	ldr	r3, [pc, #120]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	0c1b      	lsrs	r3, r3, #16
 800afee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800affe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b002:	edd7 6a07 	vldr	s13, [r7, #28]
 800b006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b00e:	ee17 2a90 	vmov	r2, s15
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b016:	4b13      	ldr	r3, [pc, #76]	@ (800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b01a:	0e1b      	lsrs	r3, r3, #24
 800b01c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b030:	edd7 6a07 	vldr	s13, [r7, #28]
 800b034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b03c:	ee17 2a90 	vmov	r2, s15
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b044:	e008      	b.n	800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	609a      	str	r2, [r3, #8]
}
 800b058:	bf00      	nop
 800b05a:	3724      	adds	r7, #36	@ 0x24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	58024400 	.word	0x58024400
 800b068:	03d09000 	.word	0x03d09000
 800b06c:	46000000 	.word	0x46000000
 800b070:	4c742400 	.word	0x4c742400
 800b074:	4a742400 	.word	0x4a742400
 800b078:	4af42400 	.word	0x4af42400

0800b07c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b08a:	4b53      	ldr	r3, [pc, #332]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d101      	bne.n	800b09a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e099      	b.n	800b1ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b09a:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a4e      	ldr	r2, [pc, #312]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b0a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0a6:	f7f6 ffeb 	bl	8002080 <HAL_GetTick>
 800b0aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0ac:	e008      	b.n	800b0c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0ae:	f7f6 ffe7 	bl	8002080 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d901      	bls.n	800b0c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e086      	b.n	800b1ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0c0:	4b45      	ldr	r3, [pc, #276]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1f0      	bne.n	800b0ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0cc:	4b42      	ldr	r3, [pc, #264]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	031b      	lsls	r3, r3, #12
 800b0da:	493f      	ldr	r1, [pc, #252]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	628b      	str	r3, [r1, #40]	@ 0x28
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	025b      	lsls	r3, r3, #9
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	041b      	lsls	r3, r3, #16
 800b0fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b102:	431a      	orrs	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	3b01      	subs	r3, #1
 800b10a:	061b      	lsls	r3, r3, #24
 800b10c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b110:	4931      	ldr	r1, [pc, #196]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b112:	4313      	orrs	r3, r2
 800b114:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b116:	4b30      	ldr	r3, [pc, #192]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	492d      	ldr	r1, [pc, #180]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b124:	4313      	orrs	r3, r2
 800b126:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b128:	4b2b      	ldr	r3, [pc, #172]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12c:	f023 0220 	bic.w	r2, r3, #32
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	4928      	ldr	r1, [pc, #160]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b136:	4313      	orrs	r3, r2
 800b138:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b13a:	4b27      	ldr	r3, [pc, #156]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13e:	4a26      	ldr	r2, [pc, #152]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b140:	f023 0310 	bic.w	r3, r3, #16
 800b144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b146:	4b24      	ldr	r3, [pc, #144]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b14a:	4b24      	ldr	r3, [pc, #144]	@ (800b1dc <RCCEx_PLL2_Config+0x160>)
 800b14c:	4013      	ands	r3, r2
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	69d2      	ldr	r2, [r2, #28]
 800b152:	00d2      	lsls	r2, r2, #3
 800b154:	4920      	ldr	r1, [pc, #128]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b156:	4313      	orrs	r3, r2
 800b158:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b15a:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15e:	4a1e      	ldr	r2, [pc, #120]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b160:	f043 0310 	orr.w	r3, r3, #16
 800b164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b16c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b170:	4a19      	ldr	r2, [pc, #100]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b172:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b178:	e00f      	b.n	800b19a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d106      	bne.n	800b18e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b180:	4b15      	ldr	r3, [pc, #84]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	4a14      	ldr	r2, [pc, #80]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b18a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b18c:	e005      	b.n	800b19a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b18e:	4b12      	ldr	r3, [pc, #72]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b192:	4a11      	ldr	r2, [pc, #68]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b19a:	4b0f      	ldr	r3, [pc, #60]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a0e      	ldr	r2, [pc, #56]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b1a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a6:	f7f6 ff6b 	bl	8002080 <HAL_GetTick>
 800b1aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1ac:	e008      	b.n	800b1c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1ae:	f7f6 ff67 	bl	8002080 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d901      	bls.n	800b1c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e006      	b.n	800b1ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1c0:	4b05      	ldr	r3, [pc, #20]	@ (800b1d8 <RCCEx_PLL2_Config+0x15c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f0      	beq.n	800b1ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	58024400 	.word	0x58024400
 800b1dc:	ffff0007 	.word	0xffff0007

0800b1e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1ee:	4b53      	ldr	r3, [pc, #332]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d101      	bne.n	800b1fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e099      	b.n	800b332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1fe:	4b4f      	ldr	r3, [pc, #316]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a4e      	ldr	r2, [pc, #312]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b20a:	f7f6 ff39 	bl	8002080 <HAL_GetTick>
 800b20e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b210:	e008      	b.n	800b224 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b212:	f7f6 ff35 	bl	8002080 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d901      	bls.n	800b224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e086      	b.n	800b332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b224:	4b45      	ldr	r3, [pc, #276]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f0      	bne.n	800b212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b230:	4b42      	ldr	r3, [pc, #264]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	051b      	lsls	r3, r3, #20
 800b23e:	493f      	ldr	r1, [pc, #252]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b240:	4313      	orrs	r3, r2
 800b242:	628b      	str	r3, [r1, #40]	@ 0x28
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	3b01      	subs	r3, #1
 800b24a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	3b01      	subs	r3, #1
 800b254:	025b      	lsls	r3, r3, #9
 800b256:	b29b      	uxth	r3, r3
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	3b01      	subs	r3, #1
 800b260:	041b      	lsls	r3, r3, #16
 800b262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	061b      	lsls	r3, r3, #24
 800b270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b274:	4931      	ldr	r1, [pc, #196]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b276:	4313      	orrs	r3, r2
 800b278:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b27a:	4b30      	ldr	r3, [pc, #192]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	492d      	ldr	r1, [pc, #180]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b28c:	4b2b      	ldr	r3, [pc, #172]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b290:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	4928      	ldr	r1, [pc, #160]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b29e:	4b27      	ldr	r3, [pc, #156]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a2:	4a26      	ldr	r2, [pc, #152]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2aa:	4b24      	ldr	r3, [pc, #144]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ae:	4b24      	ldr	r3, [pc, #144]	@ (800b340 <RCCEx_PLL3_Config+0x160>)
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	69d2      	ldr	r2, [r2, #28]
 800b2b6:	00d2      	lsls	r2, r2, #3
 800b2b8:	4920      	ldr	r1, [pc, #128]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2be:	4b1f      	ldr	r3, [pc, #124]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	4a1e      	ldr	r2, [pc, #120]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d106      	bne.n	800b2de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	4a19      	ldr	r2, [pc, #100]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b2da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2dc:	e00f      	b.n	800b2fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d106      	bne.n	800b2f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2e4:	4b15      	ldr	r3, [pc, #84]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e8:	4a14      	ldr	r2, [pc, #80]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b2ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2f0:	e005      	b.n	800b2fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2f2:	4b12      	ldr	r3, [pc, #72]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f6:	4a11      	ldr	r2, [pc, #68]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b2f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a0e      	ldr	r2, [pc, #56]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b30a:	f7f6 feb9 	bl	8002080 <HAL_GetTick>
 800b30e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b310:	e008      	b.n	800b324 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b312:	f7f6 feb5 	bl	8002080 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d901      	bls.n	800b324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e006      	b.n	800b332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b324:	4b05      	ldr	r3, [pc, #20]	@ (800b33c <RCCEx_PLL3_Config+0x15c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0f0      	beq.n	800b312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b330:	7bfb      	ldrb	r3, [r7, #15]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	58024400 	.word	0x58024400
 800b340:	ffff0007 	.word	0xffff0007

0800b344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e049      	b.n	800b3ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7f6 fc92 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f000 fcc6 	bl	800bd14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
	...

0800b3f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	d001      	beq.n	800b40c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e056      	b.n	800b4ba <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2202      	movs	r2, #2
 800b410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a2b      	ldr	r2, [pc, #172]	@ (800b4c8 <HAL_TIM_Base_Start+0xd4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d02c      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b426:	d027      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a27      	ldr	r2, [pc, #156]	@ (800b4cc <HAL_TIM_Base_Start+0xd8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d022      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a26      	ldr	r2, [pc, #152]	@ (800b4d0 <HAL_TIM_Base_Start+0xdc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d01d      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a24      	ldr	r2, [pc, #144]	@ (800b4d4 <HAL_TIM_Base_Start+0xe0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d018      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a23      	ldr	r2, [pc, #140]	@ (800b4d8 <HAL_TIM_Base_Start+0xe4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d013      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a21      	ldr	r2, [pc, #132]	@ (800b4dc <HAL_TIM_Base_Start+0xe8>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00e      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a20      	ldr	r2, [pc, #128]	@ (800b4e0 <HAL_TIM_Base_Start+0xec>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d009      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a1e      	ldr	r2, [pc, #120]	@ (800b4e4 <HAL_TIM_Base_Start+0xf0>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d004      	beq.n	800b478 <HAL_TIM_Base_Start+0x84>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e8 <HAL_TIM_Base_Start+0xf4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d115      	bne.n	800b4a4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	4b1b      	ldr	r3, [pc, #108]	@ (800b4ec <HAL_TIM_Base_Start+0xf8>)
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b06      	cmp	r3, #6
 800b488:	d015      	beq.n	800b4b6 <HAL_TIM_Base_Start+0xc2>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b490:	d011      	beq.n	800b4b6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0201 	orr.w	r2, r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a2:	e008      	b.n	800b4b6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	e000      	b.n	800b4b8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40010000 	.word	0x40010000
 800b4cc:	40000400 	.word	0x40000400
 800b4d0:	40000800 	.word	0x40000800
 800b4d4:	40000c00 	.word	0x40000c00
 800b4d8:	40010400 	.word	0x40010400
 800b4dc:	40001800 	.word	0x40001800
 800b4e0:	40014000 	.word	0x40014000
 800b4e4:	4000e000 	.word	0x4000e000
 800b4e8:	4000e400 	.word	0x4000e400
 800b4ec:	00010007 	.word	0x00010007

0800b4f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b01      	cmp	r3, #1
 800b502:	d001      	beq.n	800b508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e05e      	b.n	800b5c6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2202      	movs	r2, #2
 800b50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f042 0201 	orr.w	r2, r2, #1
 800b51e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a2b      	ldr	r2, [pc, #172]	@ (800b5d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d02c      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b532:	d027      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a27      	ldr	r2, [pc, #156]	@ (800b5d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d022      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a26      	ldr	r2, [pc, #152]	@ (800b5dc <HAL_TIM_Base_Start_IT+0xec>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d01d      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a24      	ldr	r2, [pc, #144]	@ (800b5e0 <HAL_TIM_Base_Start_IT+0xf0>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d018      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a23      	ldr	r2, [pc, #140]	@ (800b5e4 <HAL_TIM_Base_Start_IT+0xf4>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a21      	ldr	r2, [pc, #132]	@ (800b5e8 <HAL_TIM_Base_Start_IT+0xf8>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d00e      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a20      	ldr	r2, [pc, #128]	@ (800b5ec <HAL_TIM_Base_Start_IT+0xfc>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d009      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a1e      	ldr	r2, [pc, #120]	@ (800b5f0 <HAL_TIM_Base_Start_IT+0x100>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d004      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x94>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f4 <HAL_TIM_Base_Start_IT+0x104>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d115      	bne.n	800b5b0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f8 <HAL_TIM_Base_Start_IT+0x108>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b06      	cmp	r3, #6
 800b594:	d015      	beq.n	800b5c2 <HAL_TIM_Base_Start_IT+0xd2>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b59c:	d011      	beq.n	800b5c2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f042 0201 	orr.w	r2, r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ae:	e008      	b.n	800b5c2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0201 	orr.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	e000      	b.n	800b5c4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	40010000 	.word	0x40010000
 800b5d8:	40000400 	.word	0x40000400
 800b5dc:	40000800 	.word	0x40000800
 800b5e0:	40000c00 	.word	0x40000c00
 800b5e4:	40010400 	.word	0x40010400
 800b5e8:	40001800 	.word	0x40001800
 800b5ec:	40014000 	.word	0x40014000
 800b5f0:	4000e000 	.word	0x4000e000
 800b5f4:	4000e400 	.word	0x4000e400
 800b5f8:	00010007 	.word	0x00010007

0800b5fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0201 	bic.w	r2, r2, #1
 800b612:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6a1a      	ldr	r2, [r3, #32]
 800b61a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10f      	bne.n	800b644 <HAL_TIM_Base_Stop_IT+0x48>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6a1a      	ldr	r2, [r3, #32]
 800b62a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d107      	bne.n	800b644 <HAL_TIM_Base_Stop_IT+0x48>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f022 0201 	bic.w	r2, r2, #1
 800b642:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
	...

0800b65c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e08f      	b.n	800b790 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7f6 fb43 	bl	8001d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6899      	ldr	r1, [r3, #8]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	4b3e      	ldr	r3, [pc, #248]	@ (800b798 <HAL_TIM_Encoder_Init+0x13c>)
 800b69e:	400b      	ands	r3, r1
 800b6a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f000 fb31 	bl	800bd14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4b31      	ldr	r3, [pc, #196]	@ (800b79c <HAL_TIM_Encoder_Init+0x140>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	689a      	ldr	r2, [r3, #8]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	4b2b      	ldr	r3, [pc, #172]	@ (800b7a0 <HAL_TIM_Encoder_Init+0x144>)
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	4b2a      	ldr	r3, [pc, #168]	@ (800b7a4 <HAL_TIM_Encoder_Init+0x148>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	4313      	orrs	r3, r2
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	011a      	lsls	r2, r3, #4
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	031b      	lsls	r3, r3, #12
 800b71c:	4313      	orrs	r3, r2
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b72a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b732:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	4313      	orrs	r3, r2
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	fffebff8 	.word	0xfffebff8
 800b79c:	fffffcfc 	.word	0xfffffcfc
 800b7a0:	fffff3f3 	.word	0xfffff3f3
 800b7a4:	ffff0f0f 	.word	0xffff0f0f

0800b7a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b7b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b7c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d110      	bne.n	800b7fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d102      	bne.n	800b7e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b7de:	7b7b      	ldrb	r3, [r7, #13]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d001      	beq.n	800b7e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e069      	b.n	800b8bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7f8:	e031      	b.n	800b85e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d110      	bne.n	800b822 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d102      	bne.n	800b80c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b806:	7b3b      	ldrb	r3, [r7, #12]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d001      	beq.n	800b810 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e055      	b.n	800b8bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2202      	movs	r2, #2
 800b814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b820:	e01d      	b.n	800b85e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d108      	bne.n	800b83a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d105      	bne.n	800b83a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b82e:	7b7b      	ldrb	r3, [r7, #13]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d102      	bne.n	800b83a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b834:	7b3b      	ldrb	r3, [r7, #12]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d001      	beq.n	800b83e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e03e      	b.n	800b8bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2202      	movs	r2, #2
 800b842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2202      	movs	r2, #2
 800b852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2202      	movs	r2, #2
 800b85a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d003      	beq.n	800b86c <HAL_TIM_Encoder_Start+0xc4>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b04      	cmp	r3, #4
 800b868:	d008      	beq.n	800b87c <HAL_TIM_Encoder_Start+0xd4>
 800b86a:	e00f      	b.n	800b88c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2201      	movs	r2, #1
 800b872:	2100      	movs	r1, #0
 800b874:	4618      	mov	r0, r3
 800b876:	f000 fb9d 	bl	800bfb4 <TIM_CCxChannelCmd>
      break;
 800b87a:	e016      	b.n	800b8aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2201      	movs	r2, #1
 800b882:	2104      	movs	r1, #4
 800b884:	4618      	mov	r0, r3
 800b886:	f000 fb95 	bl	800bfb4 <TIM_CCxChannelCmd>
      break;
 800b88a:	e00e      	b.n	800b8aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2201      	movs	r2, #1
 800b892:	2100      	movs	r1, #0
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fb8d 	bl	800bfb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fb86 	bl	800bfb4 <TIM_CCxChannelCmd>
      break;
 800b8a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f042 0201 	orr.w	r2, r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d020      	beq.n	800b928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01b      	beq.n	800b928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0202 	mvn.w	r2, #2
 800b8f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f9e2 	bl	800bcd8 <HAL_TIM_IC_CaptureCallback>
 800b914:	e005      	b.n	800b922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f9d4 	bl	800bcc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f9e5 	bl	800bcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d020      	beq.n	800b974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d01b      	beq.n	800b974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f06f 0204 	mvn.w	r2, #4
 800b944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2202      	movs	r2, #2
 800b94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f9bc 	bl	800bcd8 <HAL_TIM_IC_CaptureCallback>
 800b960:	e005      	b.n	800b96e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f9ae 	bl	800bcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f9bf 	bl	800bcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d020      	beq.n	800b9c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b00      	cmp	r3, #0
 800b986:	d01b      	beq.n	800b9c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0208 	mvn.w	r2, #8
 800b990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2204      	movs	r2, #4
 800b996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f996 	bl	800bcd8 <HAL_TIM_IC_CaptureCallback>
 800b9ac:	e005      	b.n	800b9ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f988 	bl	800bcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f999 	bl	800bcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f003 0310 	and.w	r3, r3, #16
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d020      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f003 0310 	and.w	r3, r3, #16
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01b      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f06f 0210 	mvn.w	r2, #16
 800b9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f970 	bl	800bcd8 <HAL_TIM_IC_CaptureCallback>
 800b9f8:	e005      	b.n	800ba06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f962 	bl	800bcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f973 	bl	800bcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f06f 0201 	mvn.w	r2, #1
 800ba28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7f5 fe04 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00c      	beq.n	800ba5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d007      	beq.n	800ba5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fb77 	bl	800c14c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00c      	beq.n	800ba82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d007      	beq.n	800ba82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb6f 	bl	800c160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00c      	beq.n	800baa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d007      	beq.n	800baa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ba9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f92d 	bl	800bd00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	f003 0320 	and.w	r3, r3, #32
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00c      	beq.n	800baca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d007      	beq.n	800baca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f06f 0220 	mvn.w	r2, #32
 800bac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fb37 	bl	800c138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_TIM_ConfigClockSource+0x1c>
 800baec:	2302      	movs	r3, #2
 800baee:	e0dc      	b.n	800bcaa <HAL_TIM_ConfigClockSource+0x1d6>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	4b6a      	ldr	r3, [pc, #424]	@ (800bcb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a64      	ldr	r2, [pc, #400]	@ (800bcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	f000 80a9 	beq.w	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb2c:	4a62      	ldr	r2, [pc, #392]	@ (800bcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	f200 80ae 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb34:	4a61      	ldr	r2, [pc, #388]	@ (800bcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	f000 80a1 	beq.w	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb3c:	4a5f      	ldr	r2, [pc, #380]	@ (800bcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	f200 80a6 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb44:	4a5e      	ldr	r2, [pc, #376]	@ (800bcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	f000 8099 	beq.w	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb4c:	4a5c      	ldr	r2, [pc, #368]	@ (800bcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	f200 809e 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb58:	f000 8091 	beq.w	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb60:	f200 8096 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb68:	f000 8089 	beq.w	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb70:	f200 808e 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb78:	d03e      	beq.n	800bbf8 <HAL_TIM_ConfigClockSource+0x124>
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb7e:	f200 8087 	bhi.w	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb86:	f000 8086 	beq.w	800bc96 <HAL_TIM_ConfigClockSource+0x1c2>
 800bb8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb8e:	d87f      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb90:	2b70      	cmp	r3, #112	@ 0x70
 800bb92:	d01a      	beq.n	800bbca <HAL_TIM_ConfigClockSource+0xf6>
 800bb94:	2b70      	cmp	r3, #112	@ 0x70
 800bb96:	d87b      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb98:	2b60      	cmp	r3, #96	@ 0x60
 800bb9a:	d050      	beq.n	800bc3e <HAL_TIM_ConfigClockSource+0x16a>
 800bb9c:	2b60      	cmp	r3, #96	@ 0x60
 800bb9e:	d877      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bba0:	2b50      	cmp	r3, #80	@ 0x50
 800bba2:	d03c      	beq.n	800bc1e <HAL_TIM_ConfigClockSource+0x14a>
 800bba4:	2b50      	cmp	r3, #80	@ 0x50
 800bba6:	d873      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bba8:	2b40      	cmp	r3, #64	@ 0x40
 800bbaa:	d058      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x18a>
 800bbac:	2b40      	cmp	r3, #64	@ 0x40
 800bbae:	d86f      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb0:	2b30      	cmp	r3, #48	@ 0x30
 800bbb2:	d064      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bbb4:	2b30      	cmp	r3, #48	@ 0x30
 800bbb6:	d86b      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d060      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bbbc:	2b20      	cmp	r3, #32
 800bbbe:	d867      	bhi.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d05c      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bbc4:	2b10      	cmp	r3, #16
 800bbc6:	d05a      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800bbc8:	e062      	b.n	800bc90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbda:	f000 f9cb 	bl	800bf74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bbec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	609a      	str	r2, [r3, #8]
      break;
 800bbf6:	e04f      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc08:	f000 f9b4 	bl	800bf74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689a      	ldr	r2, [r3, #8]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc1a:	609a      	str	r2, [r3, #8]
      break;
 800bc1c:	e03c      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f000 f924 	bl	800be78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2150      	movs	r1, #80	@ 0x50
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 f97e 	bl	800bf38 <TIM_ITRx_SetConfig>
      break;
 800bc3c:	e02c      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f000 f943 	bl	800bed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2160      	movs	r1, #96	@ 0x60
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 f96e 	bl	800bf38 <TIM_ITRx_SetConfig>
      break;
 800bc5c:	e01c      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f000 f904 	bl	800be78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2140      	movs	r1, #64	@ 0x40
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 f95e 	bl	800bf38 <TIM_ITRx_SetConfig>
      break;
 800bc7c:	e00c      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4619      	mov	r1, r3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	f000 f955 	bl	800bf38 <TIM_ITRx_SetConfig>
      break;
 800bc8e:	e003      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	73fb      	strb	r3, [r7, #15]
      break;
 800bc94:	e000      	b.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bc96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	ffceff88 	.word	0xffceff88
 800bcb8:	00100040 	.word	0x00100040
 800bcbc:	00100030 	.word	0x00100030
 800bcc0:	00100020 	.word	0x00100020

0800bcc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a4a      	ldr	r2, [pc, #296]	@ (800be50 <TIM_Base_SetConfig+0x13c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d013      	beq.n	800bd54 <TIM_Base_SetConfig+0x40>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd32:	d00f      	beq.n	800bd54 <TIM_Base_SetConfig+0x40>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a47      	ldr	r2, [pc, #284]	@ (800be54 <TIM_Base_SetConfig+0x140>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d00b      	beq.n	800bd54 <TIM_Base_SetConfig+0x40>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a46      	ldr	r2, [pc, #280]	@ (800be58 <TIM_Base_SetConfig+0x144>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d007      	beq.n	800bd54 <TIM_Base_SetConfig+0x40>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a45      	ldr	r2, [pc, #276]	@ (800be5c <TIM_Base_SetConfig+0x148>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d003      	beq.n	800bd54 <TIM_Base_SetConfig+0x40>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a44      	ldr	r2, [pc, #272]	@ (800be60 <TIM_Base_SetConfig+0x14c>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d108      	bne.n	800bd66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a39      	ldr	r2, [pc, #228]	@ (800be50 <TIM_Base_SetConfig+0x13c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d027      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd74:	d023      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a36      	ldr	r2, [pc, #216]	@ (800be54 <TIM_Base_SetConfig+0x140>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d01f      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a35      	ldr	r2, [pc, #212]	@ (800be58 <TIM_Base_SetConfig+0x144>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d01b      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a34      	ldr	r2, [pc, #208]	@ (800be5c <TIM_Base_SetConfig+0x148>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d017      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a33      	ldr	r2, [pc, #204]	@ (800be60 <TIM_Base_SetConfig+0x14c>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d013      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a32      	ldr	r2, [pc, #200]	@ (800be64 <TIM_Base_SetConfig+0x150>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d00f      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a31      	ldr	r2, [pc, #196]	@ (800be68 <TIM_Base_SetConfig+0x154>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d00b      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a30      	ldr	r2, [pc, #192]	@ (800be6c <TIM_Base_SetConfig+0x158>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d007      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a2f      	ldr	r2, [pc, #188]	@ (800be70 <TIM_Base_SetConfig+0x15c>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d003      	beq.n	800bdbe <TIM_Base_SetConfig+0xaa>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a2e      	ldr	r2, [pc, #184]	@ (800be74 <TIM_Base_SetConfig+0x160>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d108      	bne.n	800bdd0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	689a      	ldr	r2, [r3, #8]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a16      	ldr	r2, [pc, #88]	@ (800be50 <TIM_Base_SetConfig+0x13c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00f      	beq.n	800be1c <TIM_Base_SetConfig+0x108>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a18      	ldr	r2, [pc, #96]	@ (800be60 <TIM_Base_SetConfig+0x14c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d00b      	beq.n	800be1c <TIM_Base_SetConfig+0x108>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a17      	ldr	r2, [pc, #92]	@ (800be64 <TIM_Base_SetConfig+0x150>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d007      	beq.n	800be1c <TIM_Base_SetConfig+0x108>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a16      	ldr	r2, [pc, #88]	@ (800be68 <TIM_Base_SetConfig+0x154>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d003      	beq.n	800be1c <TIM_Base_SetConfig+0x108>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a15      	ldr	r2, [pc, #84]	@ (800be6c <TIM_Base_SetConfig+0x158>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d103      	bne.n	800be24 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	691a      	ldr	r2, [r3, #16]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b01      	cmp	r3, #1
 800be34:	d105      	bne.n	800be42 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	f023 0201 	bic.w	r2, r3, #1
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	611a      	str	r2, [r3, #16]
  }
}
 800be42:	bf00      	nop
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	40010000 	.word	0x40010000
 800be54:	40000400 	.word	0x40000400
 800be58:	40000800 	.word	0x40000800
 800be5c:	40000c00 	.word	0x40000c00
 800be60:	40010400 	.word	0x40010400
 800be64:	40014000 	.word	0x40014000
 800be68:	40014400 	.word	0x40014400
 800be6c:	40014800 	.word	0x40014800
 800be70:	4000e000 	.word	0x4000e000
 800be74:	4000e400 	.word	0x4000e400

0800be78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be78:	b480      	push	{r7}
 800be7a:	b087      	sub	sp, #28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	f023 0201 	bic.w	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f023 030a 	bic.w	r3, r3, #10
 800beb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	621a      	str	r2, [r3, #32]
}
 800beca:	bf00      	nop
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b087      	sub	sp, #28
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	f023 0210 	bic.w	r2, r3, #16
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	031b      	lsls	r3, r3, #12
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	621a      	str	r2, [r3, #32]
}
 800bf2a:	bf00      	nop
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
	...

0800bf38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4b09      	ldr	r3, [pc, #36]	@ (800bf70 <TIM_ITRx_SetConfig+0x38>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f043 0307 	orr.w	r3, r3, #7
 800bf5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	609a      	str	r2, [r3, #8]
}
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	ffcfff8f 	.word	0xffcfff8f

0800bf74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	021a      	lsls	r2, r3, #8
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	609a      	str	r2, [r3, #8]
}
 800bfa8:	bf00      	nop
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f003 031f 	and.w	r3, r3, #31
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6a1a      	ldr	r2, [r3, #32]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	43db      	mvns	r3, r3
 800bfd6:	401a      	ands	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a1a      	ldr	r2, [r3, #32]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	f003 031f 	and.w	r3, r3, #31
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfec:	431a      	orrs	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	621a      	str	r2, [r3, #32]
}
 800bff2:	bf00      	nop
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
	...

0800c000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c010:	2b01      	cmp	r3, #1
 800c012:	d101      	bne.n	800c018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c014:	2302      	movs	r3, #2
 800c016:	e077      	b.n	800c108 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2202      	movs	r2, #2
 800c024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a35      	ldr	r2, [pc, #212]	@ (800c114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d004      	beq.n	800c04c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a34      	ldr	r2, [pc, #208]	@ (800c118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d108      	bne.n	800c05e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a25      	ldr	r2, [pc, #148]	@ (800c114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d02c      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08a:	d027      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a22      	ldr	r2, [pc, #136]	@ (800c11c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d022      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a21      	ldr	r2, [pc, #132]	@ (800c120 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d01d      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c124 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d018      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a1a      	ldr	r2, [pc, #104]	@ (800c118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d013      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00e      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c12c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d009      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a18      	ldr	r2, [pc, #96]	@ (800c130 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d004      	beq.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a17      	ldr	r2, [pc, #92]	@ (800c134 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d10c      	bne.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	40010000 	.word	0x40010000
 800c118:	40010400 	.word	0x40010400
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00
 800c128:	40001800 	.word	0x40001800
 800c12c:	40014000 	.word	0x40014000
 800c130:	4000e000 	.word	0x4000e000
 800c134:	4000e400 	.word	0x4000e400

0800c138 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e042      	b.n	800c20c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d106      	bne.n	800c19e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7f5 fe4f 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2224      	movs	r2, #36	@ 0x24
 800c1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f022 0201 	bic.w	r2, r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 fafc 	bl	800d7bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fc8d 	bl	800cae4 <UART_SetConfig>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e01b      	b.n	800c20c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689a      	ldr	r2, [r3, #8]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0201 	orr.w	r2, r2, #1
 800c202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 fb7b 	bl	800d900 <UART_CheckIdleState>
 800c20a:	4603      	mov	r3, r0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	@ 0x28
 800c218:	af02      	add	r7, sp, #8
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c22a:	2b20      	cmp	r3, #32
 800c22c:	d17b      	bne.n	800c326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <HAL_UART_Transmit+0x26>
 800c234:	88fb      	ldrh	r3, [r7, #6]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e074      	b.n	800c328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2221      	movs	r2, #33	@ 0x21
 800c24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c24e:	f7f5 ff17 	bl	8002080 <HAL_GetTick>
 800c252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	88fa      	ldrh	r2, [r7, #6]
 800c260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c26c:	d108      	bne.n	800c280 <HAL_UART_Transmit+0x6c>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d104      	bne.n	800c280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e003      	b.n	800c288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c288:	e030      	b.n	800c2ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2200      	movs	r2, #0
 800c292:	2180      	movs	r1, #128	@ 0x80
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f001 fbdd 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e03d      	b.n	800c328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10b      	bne.n	800c2ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	e007      	b.n	800c2da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1c8      	bne.n	800c28a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2200      	movs	r2, #0
 800c300:	2140      	movs	r1, #64	@ 0x40
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f001 fba6 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d005      	beq.n	800c31a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2220      	movs	r2, #32
 800c312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e006      	b.n	800c328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	e000      	b.n	800c328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c326:	2302      	movs	r3, #2
  }
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3720      	adds	r7, #32
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b0ba      	sub	sp, #232	@ 0xe8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c356:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c35a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c35e:	4013      	ands	r3, r2
 800c360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d11b      	bne.n	800c3a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c370:	f003 0320 	and.w	r3, r3, #32
 800c374:	2b00      	cmp	r3, #0
 800c376:	d015      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c37c:	f003 0320 	and.w	r3, r3, #32
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 8377 	beq.w	800ca88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	4798      	blx	r3
      }
      return;
 800c3a2:	e371      	b.n	800ca88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c3a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 8123 	beq.w	800c5f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3b2:	4b8d      	ldr	r3, [pc, #564]	@ (800c5e8 <HAL_UART_IRQHandler+0x2b8>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d106      	bne.n	800c3c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c3be:	4b8b      	ldr	r3, [pc, #556]	@ (800c5ec <HAL_UART_IRQHandler+0x2bc>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 8116 	beq.w	800c5f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d011      	beq.n	800c3f8 <HAL_UART_IRQHandler+0xc8>
 800c3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3ee:	f043 0201 	orr.w	r2, r3, #1
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d011      	beq.n	800c428 <HAL_UART_IRQHandler+0xf8>
 800c404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00b      	beq.n	800c428 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2202      	movs	r2, #2
 800c416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c41e:	f043 0204 	orr.w	r2, r3, #4
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d011      	beq.n	800c458 <HAL_UART_IRQHandler+0x128>
 800c434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2204      	movs	r2, #4
 800c446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c44e:	f043 0202 	orr.w	r2, r3, #2
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c45c:	f003 0308 	and.w	r3, r3, #8
 800c460:	2b00      	cmp	r3, #0
 800c462:	d017      	beq.n	800c494 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c468:	f003 0320 	and.w	r3, r3, #32
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d105      	bne.n	800c47c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c470:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c474:	4b5c      	ldr	r3, [pc, #368]	@ (800c5e8 <HAL_UART_IRQHandler+0x2b8>)
 800c476:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2208      	movs	r2, #8
 800c482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c48a:	f043 0208 	orr.w	r2, r3, #8
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d012      	beq.n	800c4c6 <HAL_UART_IRQHandler+0x196>
 800c4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00c      	beq.n	800c4c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4bc:	f043 0220 	orr.w	r2, r3, #32
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 82dd 	beq.w	800ca8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4d6:	f003 0320 	and.w	r3, r3, #32
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d013      	beq.n	800c506 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4e2:	f003 0320 	and.w	r3, r3, #32
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d105      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d007      	beq.n	800c506 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c50c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c51a:	2b40      	cmp	r3, #64	@ 0x40
 800c51c:	d005      	beq.n	800c52a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c51e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c522:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c526:	2b00      	cmp	r3, #0
 800c528:	d054      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 fb00 	bl	800db30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c53a:	2b40      	cmp	r3, #64	@ 0x40
 800c53c:	d146      	bne.n	800c5cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3308      	adds	r3, #8
 800c544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c55c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3308      	adds	r3, #8
 800c566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c56a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c56e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c57a:	e841 2300 	strex	r3, r2, [r1]
 800c57e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1d9      	bne.n	800c53e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c590:	2b00      	cmp	r3, #0
 800c592:	d017      	beq.n	800c5c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59a:	4a15      	ldr	r2, [pc, #84]	@ (800c5f0 <HAL_UART_IRQHandler+0x2c0>)
 800c59c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7f8 ff93 	bl	80054d0 <HAL_DMA_Abort_IT>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d019      	beq.n	800c5e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c5be:	4610      	mov	r0, r2
 800c5c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5c2:	e00f      	b.n	800c5e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa77 	bl	800cab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ca:	e00b      	b.n	800c5e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fa73 	bl	800cab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d2:	e007      	b.n	800c5e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fa6f 	bl	800cab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c5e2:	e253      	b.n	800ca8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5e4:	bf00      	nop
    return;
 800c5e6:	e251      	b.n	800ca8c <HAL_UART_IRQHandler+0x75c>
 800c5e8:	10000001 	.word	0x10000001
 800c5ec:	04000120 	.word	0x04000120
 800c5f0:	0800dbfd 	.word	0x0800dbfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	f040 81e7 	bne.w	800c9cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c602:	f003 0310 	and.w	r3, r3, #16
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 81e0 	beq.w	800c9cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 81d9 	beq.w	800c9cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2210      	movs	r2, #16
 800c620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	f040 8151 	bne.w	800c8d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a96      	ldr	r2, [pc, #600]	@ (800c894 <HAL_UART_IRQHandler+0x564>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d068      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a93      	ldr	r2, [pc, #588]	@ (800c898 <HAL_UART_IRQHandler+0x568>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d061      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a91      	ldr	r2, [pc, #580]	@ (800c89c <HAL_UART_IRQHandler+0x56c>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d05a      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a8e      	ldr	r2, [pc, #568]	@ (800c8a0 <HAL_UART_IRQHandler+0x570>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d053      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a8c      	ldr	r2, [pc, #560]	@ (800c8a4 <HAL_UART_IRQHandler+0x574>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d04c      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a89      	ldr	r2, [pc, #548]	@ (800c8a8 <HAL_UART_IRQHandler+0x578>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d045      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a87      	ldr	r2, [pc, #540]	@ (800c8ac <HAL_UART_IRQHandler+0x57c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d03e      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a84      	ldr	r2, [pc, #528]	@ (800c8b0 <HAL_UART_IRQHandler+0x580>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d037      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a82      	ldr	r2, [pc, #520]	@ (800c8b4 <HAL_UART_IRQHandler+0x584>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d030      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a7f      	ldr	r2, [pc, #508]	@ (800c8b8 <HAL_UART_IRQHandler+0x588>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d029      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a7d      	ldr	r2, [pc, #500]	@ (800c8bc <HAL_UART_IRQHandler+0x58c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d022      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a7a      	ldr	r2, [pc, #488]	@ (800c8c0 <HAL_UART_IRQHandler+0x590>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d01b      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a78      	ldr	r2, [pc, #480]	@ (800c8c4 <HAL_UART_IRQHandler+0x594>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d014      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a75      	ldr	r2, [pc, #468]	@ (800c8c8 <HAL_UART_IRQHandler+0x598>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d00d      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a73      	ldr	r2, [pc, #460]	@ (800c8cc <HAL_UART_IRQHandler+0x59c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d006      	beq.n	800c712 <HAL_UART_IRQHandler+0x3e2>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a70      	ldr	r2, [pc, #448]	@ (800c8d0 <HAL_UART_IRQHandler+0x5a0>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d106      	bne.n	800c720 <HAL_UART_IRQHandler+0x3f0>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	e005      	b.n	800c72c <HAL_UART_IRQHandler+0x3fc>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 81ab 	beq.w	800ca90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c744:	429a      	cmp	r2, r3
 800c746:	f080 81a3 	bcs.w	800ca90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c760:	f000 8087 	beq.w	800c872 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c77c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c78e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c792:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c79a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c7a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1da      	bne.n	800c764 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7b8:	e853 3f00 	ldrex	r3, [r3]
 800c7bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7c0:	f023 0301 	bic.w	r3, r3, #1
 800c7c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7de:	e841 2300 	strex	r3, r2, [r1]
 800c7e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1e1      	bne.n	800c7ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7f4:	e853 3f00 	ldrex	r3, [r3]
 800c7f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3308      	adds	r3, #8
 800c80a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c80e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c816:	e841 2300 	strex	r3, r2, [r1]
 800c81a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c81c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1e3      	bne.n	800c7ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2220      	movs	r2, #32
 800c826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c83e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c840:	f023 0310 	bic.w	r3, r3, #16
 800c844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c852:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c85a:	e841 2300 	strex	r3, r2, [r1]
 800c85e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1e4      	bne.n	800c830 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7f8 fb11 	bl	8004e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c884:	b29b      	uxth	r3, r3
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	b29b      	uxth	r3, r3
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f91d 	bl	800cacc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c892:	e0fd      	b.n	800ca90 <HAL_UART_IRQHandler+0x760>
 800c894:	40020010 	.word	0x40020010
 800c898:	40020028 	.word	0x40020028
 800c89c:	40020040 	.word	0x40020040
 800c8a0:	40020058 	.word	0x40020058
 800c8a4:	40020070 	.word	0x40020070
 800c8a8:	40020088 	.word	0x40020088
 800c8ac:	400200a0 	.word	0x400200a0
 800c8b0:	400200b8 	.word	0x400200b8
 800c8b4:	40020410 	.word	0x40020410
 800c8b8:	40020428 	.word	0x40020428
 800c8bc:	40020440 	.word	0x40020440
 800c8c0:	40020458 	.word	0x40020458
 800c8c4:	40020470 	.word	0x40020470
 800c8c8:	40020488 	.word	0x40020488
 800c8cc:	400204a0 	.word	0x400204a0
 800c8d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 80cf 	beq.w	800ca94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c8f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 80ca 	beq.w	800ca94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c908:	e853 3f00 	ldrex	r3, [r3]
 800c90c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c922:	647b      	str	r3, [r7, #68]	@ 0x44
 800c924:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c926:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c928:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c92a:	e841 2300 	strex	r3, r2, [r1]
 800c92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1e4      	bne.n	800c900 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3308      	adds	r3, #8
 800c93c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	623b      	str	r3, [r7, #32]
   return(result);
 800c946:	6a3a      	ldr	r2, [r7, #32]
 800c948:	4b55      	ldr	r3, [pc, #340]	@ (800caa0 <HAL_UART_IRQHandler+0x770>)
 800c94a:	4013      	ands	r3, r2
 800c94c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3308      	adds	r3, #8
 800c956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c95a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c962:	e841 2300 	strex	r3, r2, [r1]
 800c966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1e3      	bne.n	800c936 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2220      	movs	r2, #32
 800c972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f023 0310 	bic.w	r3, r3, #16
 800c996:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c9a4:	61fb      	str	r3, [r7, #28]
 800c9a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a8:	69b9      	ldr	r1, [r7, #24]
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1e4      	bne.n	800c982 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f881 	bl	800cacc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9ca:	e063      	b.n	800ca94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00e      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x6c6>
 800c9d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c9ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 f945 	bl	800dc7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9f4:	e051      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d014      	beq.n	800ca2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d105      	bne.n	800ca1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d008      	beq.n	800ca2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d03a      	beq.n	800ca98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	4798      	blx	r3
    }
    return;
 800ca2a:	e035      	b.n	800ca98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d009      	beq.n	800ca4c <HAL_UART_IRQHandler+0x71c>
 800ca38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 f8ef 	bl	800dc28 <UART_EndTransmit_IT>
    return;
 800ca4a:	e026      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d009      	beq.n	800ca6c <HAL_UART_IRQHandler+0x73c>
 800ca58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 f91e 	bl	800dca6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca6a:	e016      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ca6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d010      	beq.n	800ca9a <HAL_UART_IRQHandler+0x76a>
 800ca78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da0c      	bge.n	800ca9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f001 f906 	bl	800dc92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca86:	e008      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
      return;
 800ca88:	bf00      	nop
 800ca8a:	e006      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
    return;
 800ca8c:	bf00      	nop
 800ca8e:	e004      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
      return;
 800ca90:	bf00      	nop
 800ca92:	e002      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
      return;
 800ca94:	bf00      	nop
 800ca96:	e000      	b.n	800ca9a <HAL_UART_IRQHandler+0x76a>
    return;
 800ca98:	bf00      	nop
  }
}
 800ca9a:	37e8      	adds	r7, #232	@ 0xe8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	effffffe 	.word	0xeffffffe

0800caa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cae8:	b092      	sub	sp, #72	@ 0x48
 800caea:	af00      	add	r7, sp, #0
 800caec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	689a      	ldr	r2, [r3, #8]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	431a      	orrs	r2, r3
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	431a      	orrs	r2, r3
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	4bbe      	ldr	r3, [pc, #760]	@ (800ce0c <UART_SetConfig+0x328>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	6812      	ldr	r2, [r2, #0]
 800cb1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	68da      	ldr	r2, [r3, #12]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4ab3      	ldr	r2, [pc, #716]	@ (800ce10 <UART_SetConfig+0x32c>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d004      	beq.n	800cb50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	689a      	ldr	r2, [r3, #8]
 800cb56:	4baf      	ldr	r3, [pc, #700]	@ (800ce14 <UART_SetConfig+0x330>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb60:	430b      	orrs	r3, r1
 800cb62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb6a:	f023 010f 	bic.w	r1, r3, #15
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4aa6      	ldr	r2, [pc, #664]	@ (800ce18 <UART_SetConfig+0x334>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d177      	bne.n	800cc74 <UART_SetConfig+0x190>
 800cb84:	4ba5      	ldr	r3, [pc, #660]	@ (800ce1c <UART_SetConfig+0x338>)
 800cb86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb8c:	2b28      	cmp	r3, #40	@ 0x28
 800cb8e:	d86d      	bhi.n	800cc6c <UART_SetConfig+0x188>
 800cb90:	a201      	add	r2, pc, #4	@ (adr r2, 800cb98 <UART_SetConfig+0xb4>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cc3d 	.word	0x0800cc3d
 800cb9c:	0800cc6d 	.word	0x0800cc6d
 800cba0:	0800cc6d 	.word	0x0800cc6d
 800cba4:	0800cc6d 	.word	0x0800cc6d
 800cba8:	0800cc6d 	.word	0x0800cc6d
 800cbac:	0800cc6d 	.word	0x0800cc6d
 800cbb0:	0800cc6d 	.word	0x0800cc6d
 800cbb4:	0800cc6d 	.word	0x0800cc6d
 800cbb8:	0800cc45 	.word	0x0800cc45
 800cbbc:	0800cc6d 	.word	0x0800cc6d
 800cbc0:	0800cc6d 	.word	0x0800cc6d
 800cbc4:	0800cc6d 	.word	0x0800cc6d
 800cbc8:	0800cc6d 	.word	0x0800cc6d
 800cbcc:	0800cc6d 	.word	0x0800cc6d
 800cbd0:	0800cc6d 	.word	0x0800cc6d
 800cbd4:	0800cc6d 	.word	0x0800cc6d
 800cbd8:	0800cc4d 	.word	0x0800cc4d
 800cbdc:	0800cc6d 	.word	0x0800cc6d
 800cbe0:	0800cc6d 	.word	0x0800cc6d
 800cbe4:	0800cc6d 	.word	0x0800cc6d
 800cbe8:	0800cc6d 	.word	0x0800cc6d
 800cbec:	0800cc6d 	.word	0x0800cc6d
 800cbf0:	0800cc6d 	.word	0x0800cc6d
 800cbf4:	0800cc6d 	.word	0x0800cc6d
 800cbf8:	0800cc55 	.word	0x0800cc55
 800cbfc:	0800cc6d 	.word	0x0800cc6d
 800cc00:	0800cc6d 	.word	0x0800cc6d
 800cc04:	0800cc6d 	.word	0x0800cc6d
 800cc08:	0800cc6d 	.word	0x0800cc6d
 800cc0c:	0800cc6d 	.word	0x0800cc6d
 800cc10:	0800cc6d 	.word	0x0800cc6d
 800cc14:	0800cc6d 	.word	0x0800cc6d
 800cc18:	0800cc5d 	.word	0x0800cc5d
 800cc1c:	0800cc6d 	.word	0x0800cc6d
 800cc20:	0800cc6d 	.word	0x0800cc6d
 800cc24:	0800cc6d 	.word	0x0800cc6d
 800cc28:	0800cc6d 	.word	0x0800cc6d
 800cc2c:	0800cc6d 	.word	0x0800cc6d
 800cc30:	0800cc6d 	.word	0x0800cc6d
 800cc34:	0800cc6d 	.word	0x0800cc6d
 800cc38:	0800cc65 	.word	0x0800cc65
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc42:	e326      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc44:	2304      	movs	r3, #4
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4a:	e322      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc4c:	2308      	movs	r3, #8
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc52:	e31e      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc54:	2310      	movs	r3, #16
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5a:	e31a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc5c:	2320      	movs	r3, #32
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc62:	e316      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc64:	2340      	movs	r3, #64	@ 0x40
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6a:	e312      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc6c:	2380      	movs	r3, #128	@ 0x80
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc72:	e30e      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a69      	ldr	r2, [pc, #420]	@ (800ce20 <UART_SetConfig+0x33c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d130      	bne.n	800cce0 <UART_SetConfig+0x1fc>
 800cc7e:	4b67      	ldr	r3, [pc, #412]	@ (800ce1c <UART_SetConfig+0x338>)
 800cc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc82:	f003 0307 	and.w	r3, r3, #7
 800cc86:	2b05      	cmp	r3, #5
 800cc88:	d826      	bhi.n	800ccd8 <UART_SetConfig+0x1f4>
 800cc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc90 <UART_SetConfig+0x1ac>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800cca9 	.word	0x0800cca9
 800cc94:	0800ccb1 	.word	0x0800ccb1
 800cc98:	0800ccb9 	.word	0x0800ccb9
 800cc9c:	0800ccc1 	.word	0x0800ccc1
 800cca0:	0800ccc9 	.word	0x0800ccc9
 800cca4:	0800ccd1 	.word	0x0800ccd1
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccae:	e2f0      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccb6:	e2ec      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccb8:	2308      	movs	r3, #8
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccbe:	e2e8      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccc0:	2310      	movs	r3, #16
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc6:	e2e4      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccc8:	2320      	movs	r3, #32
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccce:	e2e0      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccd0:	2340      	movs	r3, #64	@ 0x40
 800ccd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd6:	e2dc      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ccd8:	2380      	movs	r3, #128	@ 0x80
 800ccda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccde:	e2d8      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a4f      	ldr	r2, [pc, #316]	@ (800ce24 <UART_SetConfig+0x340>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d130      	bne.n	800cd4c <UART_SetConfig+0x268>
 800ccea:	4b4c      	ldr	r3, [pc, #304]	@ (800ce1c <UART_SetConfig+0x338>)
 800ccec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	2b05      	cmp	r3, #5
 800ccf4:	d826      	bhi.n	800cd44 <UART_SetConfig+0x260>
 800ccf6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccfc <UART_SetConfig+0x218>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd15 	.word	0x0800cd15
 800cd00:	0800cd1d 	.word	0x0800cd1d
 800cd04:	0800cd25 	.word	0x0800cd25
 800cd08:	0800cd2d 	.word	0x0800cd2d
 800cd0c:	0800cd35 	.word	0x0800cd35
 800cd10:	0800cd3d 	.word	0x0800cd3d
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1a:	e2ba      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd22:	e2b6      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd24:	2308      	movs	r3, #8
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	e2b2      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd2c:	2310      	movs	r3, #16
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd32:	e2ae      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd34:	2320      	movs	r3, #32
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3a:	e2aa      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd3c:	2340      	movs	r3, #64	@ 0x40
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd42:	e2a6      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd44:	2380      	movs	r3, #128	@ 0x80
 800cd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4a:	e2a2      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a35      	ldr	r2, [pc, #212]	@ (800ce28 <UART_SetConfig+0x344>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d130      	bne.n	800cdb8 <UART_SetConfig+0x2d4>
 800cd56:	4b31      	ldr	r3, [pc, #196]	@ (800ce1c <UART_SetConfig+0x338>)
 800cd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd5a:	f003 0307 	and.w	r3, r3, #7
 800cd5e:	2b05      	cmp	r3, #5
 800cd60:	d826      	bhi.n	800cdb0 <UART_SetConfig+0x2cc>
 800cd62:	a201      	add	r2, pc, #4	@ (adr r2, 800cd68 <UART_SetConfig+0x284>)
 800cd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd68:	0800cd81 	.word	0x0800cd81
 800cd6c:	0800cd89 	.word	0x0800cd89
 800cd70:	0800cd91 	.word	0x0800cd91
 800cd74:	0800cd99 	.word	0x0800cd99
 800cd78:	0800cda1 	.word	0x0800cda1
 800cd7c:	0800cda9 	.word	0x0800cda9
 800cd80:	2300      	movs	r3, #0
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e284      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd88:	2304      	movs	r3, #4
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8e:	e280      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd90:	2308      	movs	r3, #8
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd96:	e27c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cd98:	2310      	movs	r3, #16
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9e:	e278      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cda0:	2320      	movs	r3, #32
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda6:	e274      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cda8:	2340      	movs	r3, #64	@ 0x40
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdae:	e270      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cdb0:	2380      	movs	r3, #128	@ 0x80
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb6:	e26c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a1b      	ldr	r2, [pc, #108]	@ (800ce2c <UART_SetConfig+0x348>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d142      	bne.n	800ce48 <UART_SetConfig+0x364>
 800cdc2:	4b16      	ldr	r3, [pc, #88]	@ (800ce1c <UART_SetConfig+0x338>)
 800cdc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	2b05      	cmp	r3, #5
 800cdcc:	d838      	bhi.n	800ce40 <UART_SetConfig+0x35c>
 800cdce:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd4 <UART_SetConfig+0x2f0>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800cded 	.word	0x0800cded
 800cdd8:	0800cdf5 	.word	0x0800cdf5
 800cddc:	0800cdfd 	.word	0x0800cdfd
 800cde0:	0800ce05 	.word	0x0800ce05
 800cde4:	0800ce31 	.word	0x0800ce31
 800cde8:	0800ce39 	.word	0x0800ce39
 800cdec:	2300      	movs	r3, #0
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e24e      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cdf4:	2304      	movs	r3, #4
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfa:	e24a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cdfc:	2308      	movs	r3, #8
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce02:	e246      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ce04:	2310      	movs	r3, #16
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0a:	e242      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ce0c:	cfff69f3 	.word	0xcfff69f3
 800ce10:	58000c00 	.word	0x58000c00
 800ce14:	11fff4ff 	.word	0x11fff4ff
 800ce18:	40011000 	.word	0x40011000
 800ce1c:	58024400 	.word	0x58024400
 800ce20:	40004400 	.word	0x40004400
 800ce24:	40004800 	.word	0x40004800
 800ce28:	40004c00 	.word	0x40004c00
 800ce2c:	40005000 	.word	0x40005000
 800ce30:	2320      	movs	r3, #32
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e22c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ce38:	2340      	movs	r3, #64	@ 0x40
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce3e:	e228      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ce40:	2380      	movs	r3, #128	@ 0x80
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce46:	e224      	b.n	800d292 <UART_SetConfig+0x7ae>
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4ab1      	ldr	r2, [pc, #708]	@ (800d114 <UART_SetConfig+0x630>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d176      	bne.n	800cf40 <UART_SetConfig+0x45c>
 800ce52:	4bb1      	ldr	r3, [pc, #708]	@ (800d118 <UART_SetConfig+0x634>)
 800ce54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce5a:	2b28      	cmp	r3, #40	@ 0x28
 800ce5c:	d86c      	bhi.n	800cf38 <UART_SetConfig+0x454>
 800ce5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <UART_SetConfig+0x380>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800cf09 	.word	0x0800cf09
 800ce68:	0800cf39 	.word	0x0800cf39
 800ce6c:	0800cf39 	.word	0x0800cf39
 800ce70:	0800cf39 	.word	0x0800cf39
 800ce74:	0800cf39 	.word	0x0800cf39
 800ce78:	0800cf39 	.word	0x0800cf39
 800ce7c:	0800cf39 	.word	0x0800cf39
 800ce80:	0800cf39 	.word	0x0800cf39
 800ce84:	0800cf11 	.word	0x0800cf11
 800ce88:	0800cf39 	.word	0x0800cf39
 800ce8c:	0800cf39 	.word	0x0800cf39
 800ce90:	0800cf39 	.word	0x0800cf39
 800ce94:	0800cf39 	.word	0x0800cf39
 800ce98:	0800cf39 	.word	0x0800cf39
 800ce9c:	0800cf39 	.word	0x0800cf39
 800cea0:	0800cf39 	.word	0x0800cf39
 800cea4:	0800cf19 	.word	0x0800cf19
 800cea8:	0800cf39 	.word	0x0800cf39
 800ceac:	0800cf39 	.word	0x0800cf39
 800ceb0:	0800cf39 	.word	0x0800cf39
 800ceb4:	0800cf39 	.word	0x0800cf39
 800ceb8:	0800cf39 	.word	0x0800cf39
 800cebc:	0800cf39 	.word	0x0800cf39
 800cec0:	0800cf39 	.word	0x0800cf39
 800cec4:	0800cf21 	.word	0x0800cf21
 800cec8:	0800cf39 	.word	0x0800cf39
 800cecc:	0800cf39 	.word	0x0800cf39
 800ced0:	0800cf39 	.word	0x0800cf39
 800ced4:	0800cf39 	.word	0x0800cf39
 800ced8:	0800cf39 	.word	0x0800cf39
 800cedc:	0800cf39 	.word	0x0800cf39
 800cee0:	0800cf39 	.word	0x0800cf39
 800cee4:	0800cf29 	.word	0x0800cf29
 800cee8:	0800cf39 	.word	0x0800cf39
 800ceec:	0800cf39 	.word	0x0800cf39
 800cef0:	0800cf39 	.word	0x0800cf39
 800cef4:	0800cf39 	.word	0x0800cf39
 800cef8:	0800cf39 	.word	0x0800cf39
 800cefc:	0800cf39 	.word	0x0800cf39
 800cf00:	0800cf39 	.word	0x0800cf39
 800cf04:	0800cf31 	.word	0x0800cf31
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e1c0      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf10:	2304      	movs	r3, #4
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e1bc      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf18:	2308      	movs	r3, #8
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e1b8      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf20:	2310      	movs	r3, #16
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e1b4      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf28:	2320      	movs	r3, #32
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e1b0      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf30:	2340      	movs	r3, #64	@ 0x40
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e1ac      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf38:	2380      	movs	r3, #128	@ 0x80
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e1a8      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a75      	ldr	r2, [pc, #468]	@ (800d11c <UART_SetConfig+0x638>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d130      	bne.n	800cfac <UART_SetConfig+0x4c8>
 800cf4a:	4b73      	ldr	r3, [pc, #460]	@ (800d118 <UART_SetConfig+0x634>)
 800cf4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	2b05      	cmp	r3, #5
 800cf54:	d826      	bhi.n	800cfa4 <UART_SetConfig+0x4c0>
 800cf56:	a201      	add	r2, pc, #4	@ (adr r2, 800cf5c <UART_SetConfig+0x478>)
 800cf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5c:	0800cf75 	.word	0x0800cf75
 800cf60:	0800cf7d 	.word	0x0800cf7d
 800cf64:	0800cf85 	.word	0x0800cf85
 800cf68:	0800cf8d 	.word	0x0800cf8d
 800cf6c:	0800cf95 	.word	0x0800cf95
 800cf70:	0800cf9d 	.word	0x0800cf9d
 800cf74:	2300      	movs	r3, #0
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	e18a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf7c:	2304      	movs	r3, #4
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e186      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf84:	2308      	movs	r3, #8
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e182      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf8c:	2310      	movs	r3, #16
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e17e      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf94:	2320      	movs	r3, #32
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9a:	e17a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cf9c:	2340      	movs	r3, #64	@ 0x40
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa2:	e176      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cfa4:	2380      	movs	r3, #128	@ 0x80
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfaa:	e172      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a5b      	ldr	r2, [pc, #364]	@ (800d120 <UART_SetConfig+0x63c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d130      	bne.n	800d018 <UART_SetConfig+0x534>
 800cfb6:	4b58      	ldr	r3, [pc, #352]	@ (800d118 <UART_SetConfig+0x634>)
 800cfb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfba:	f003 0307 	and.w	r3, r3, #7
 800cfbe:	2b05      	cmp	r3, #5
 800cfc0:	d826      	bhi.n	800d010 <UART_SetConfig+0x52c>
 800cfc2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc8 <UART_SetConfig+0x4e4>)
 800cfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc8:	0800cfe1 	.word	0x0800cfe1
 800cfcc:	0800cfe9 	.word	0x0800cfe9
 800cfd0:	0800cff1 	.word	0x0800cff1
 800cfd4:	0800cff9 	.word	0x0800cff9
 800cfd8:	0800d001 	.word	0x0800d001
 800cfdc:	0800d009 	.word	0x0800d009
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe6:	e154      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cfe8:	2304      	movs	r3, #4
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfee:	e150      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cff0:	2308      	movs	r3, #8
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e14c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800cff8:	2310      	movs	r3, #16
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffe:	e148      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d000:	2320      	movs	r3, #32
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d006:	e144      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d008:	2340      	movs	r3, #64	@ 0x40
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00e:	e140      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d010:	2380      	movs	r3, #128	@ 0x80
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d016:	e13c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a41      	ldr	r2, [pc, #260]	@ (800d124 <UART_SetConfig+0x640>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	f040 8082 	bne.w	800d128 <UART_SetConfig+0x644>
 800d024:	4b3c      	ldr	r3, [pc, #240]	@ (800d118 <UART_SetConfig+0x634>)
 800d026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d02c:	2b28      	cmp	r3, #40	@ 0x28
 800d02e:	d86d      	bhi.n	800d10c <UART_SetConfig+0x628>
 800d030:	a201      	add	r2, pc, #4	@ (adr r2, 800d038 <UART_SetConfig+0x554>)
 800d032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d036:	bf00      	nop
 800d038:	0800d0dd 	.word	0x0800d0dd
 800d03c:	0800d10d 	.word	0x0800d10d
 800d040:	0800d10d 	.word	0x0800d10d
 800d044:	0800d10d 	.word	0x0800d10d
 800d048:	0800d10d 	.word	0x0800d10d
 800d04c:	0800d10d 	.word	0x0800d10d
 800d050:	0800d10d 	.word	0x0800d10d
 800d054:	0800d10d 	.word	0x0800d10d
 800d058:	0800d0e5 	.word	0x0800d0e5
 800d05c:	0800d10d 	.word	0x0800d10d
 800d060:	0800d10d 	.word	0x0800d10d
 800d064:	0800d10d 	.word	0x0800d10d
 800d068:	0800d10d 	.word	0x0800d10d
 800d06c:	0800d10d 	.word	0x0800d10d
 800d070:	0800d10d 	.word	0x0800d10d
 800d074:	0800d10d 	.word	0x0800d10d
 800d078:	0800d0ed 	.word	0x0800d0ed
 800d07c:	0800d10d 	.word	0x0800d10d
 800d080:	0800d10d 	.word	0x0800d10d
 800d084:	0800d10d 	.word	0x0800d10d
 800d088:	0800d10d 	.word	0x0800d10d
 800d08c:	0800d10d 	.word	0x0800d10d
 800d090:	0800d10d 	.word	0x0800d10d
 800d094:	0800d10d 	.word	0x0800d10d
 800d098:	0800d0f5 	.word	0x0800d0f5
 800d09c:	0800d10d 	.word	0x0800d10d
 800d0a0:	0800d10d 	.word	0x0800d10d
 800d0a4:	0800d10d 	.word	0x0800d10d
 800d0a8:	0800d10d 	.word	0x0800d10d
 800d0ac:	0800d10d 	.word	0x0800d10d
 800d0b0:	0800d10d 	.word	0x0800d10d
 800d0b4:	0800d10d 	.word	0x0800d10d
 800d0b8:	0800d0fd 	.word	0x0800d0fd
 800d0bc:	0800d10d 	.word	0x0800d10d
 800d0c0:	0800d10d 	.word	0x0800d10d
 800d0c4:	0800d10d 	.word	0x0800d10d
 800d0c8:	0800d10d 	.word	0x0800d10d
 800d0cc:	0800d10d 	.word	0x0800d10d
 800d0d0:	0800d10d 	.word	0x0800d10d
 800d0d4:	0800d10d 	.word	0x0800d10d
 800d0d8:	0800d105 	.word	0x0800d105
 800d0dc:	2301      	movs	r3, #1
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e0d6      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e0d2      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e0ce      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e0ca      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e0c6      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d104:	2340      	movs	r3, #64	@ 0x40
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e0c2      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d10c:	2380      	movs	r3, #128	@ 0x80
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d112:	e0be      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d114:	40011400 	.word	0x40011400
 800d118:	58024400 	.word	0x58024400
 800d11c:	40007800 	.word	0x40007800
 800d120:	40007c00 	.word	0x40007c00
 800d124:	40011800 	.word	0x40011800
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4aad      	ldr	r2, [pc, #692]	@ (800d3e4 <UART_SetConfig+0x900>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d176      	bne.n	800d220 <UART_SetConfig+0x73c>
 800d132:	4bad      	ldr	r3, [pc, #692]	@ (800d3e8 <UART_SetConfig+0x904>)
 800d134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d13a:	2b28      	cmp	r3, #40	@ 0x28
 800d13c:	d86c      	bhi.n	800d218 <UART_SetConfig+0x734>
 800d13e:	a201      	add	r2, pc, #4	@ (adr r2, 800d144 <UART_SetConfig+0x660>)
 800d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d144:	0800d1e9 	.word	0x0800d1e9
 800d148:	0800d219 	.word	0x0800d219
 800d14c:	0800d219 	.word	0x0800d219
 800d150:	0800d219 	.word	0x0800d219
 800d154:	0800d219 	.word	0x0800d219
 800d158:	0800d219 	.word	0x0800d219
 800d15c:	0800d219 	.word	0x0800d219
 800d160:	0800d219 	.word	0x0800d219
 800d164:	0800d1f1 	.word	0x0800d1f1
 800d168:	0800d219 	.word	0x0800d219
 800d16c:	0800d219 	.word	0x0800d219
 800d170:	0800d219 	.word	0x0800d219
 800d174:	0800d219 	.word	0x0800d219
 800d178:	0800d219 	.word	0x0800d219
 800d17c:	0800d219 	.word	0x0800d219
 800d180:	0800d219 	.word	0x0800d219
 800d184:	0800d1f9 	.word	0x0800d1f9
 800d188:	0800d219 	.word	0x0800d219
 800d18c:	0800d219 	.word	0x0800d219
 800d190:	0800d219 	.word	0x0800d219
 800d194:	0800d219 	.word	0x0800d219
 800d198:	0800d219 	.word	0x0800d219
 800d19c:	0800d219 	.word	0x0800d219
 800d1a0:	0800d219 	.word	0x0800d219
 800d1a4:	0800d201 	.word	0x0800d201
 800d1a8:	0800d219 	.word	0x0800d219
 800d1ac:	0800d219 	.word	0x0800d219
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d219 	.word	0x0800d219
 800d1b8:	0800d219 	.word	0x0800d219
 800d1bc:	0800d219 	.word	0x0800d219
 800d1c0:	0800d219 	.word	0x0800d219
 800d1c4:	0800d209 	.word	0x0800d209
 800d1c8:	0800d219 	.word	0x0800d219
 800d1cc:	0800d219 	.word	0x0800d219
 800d1d0:	0800d219 	.word	0x0800d219
 800d1d4:	0800d219 	.word	0x0800d219
 800d1d8:	0800d219 	.word	0x0800d219
 800d1dc:	0800d219 	.word	0x0800d219
 800d1e0:	0800d219 	.word	0x0800d219
 800d1e4:	0800d211 	.word	0x0800d211
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ee:	e050      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d1f0:	2304      	movs	r3, #4
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e04c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d1f8:	2308      	movs	r3, #8
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e048      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d200:	2310      	movs	r3, #16
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e044      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d208:	2320      	movs	r3, #32
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e040      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d210:	2340      	movs	r3, #64	@ 0x40
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e03c      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d218:	2380      	movs	r3, #128	@ 0x80
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e038      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a71      	ldr	r2, [pc, #452]	@ (800d3ec <UART_SetConfig+0x908>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d130      	bne.n	800d28c <UART_SetConfig+0x7a8>
 800d22a:	4b6f      	ldr	r3, [pc, #444]	@ (800d3e8 <UART_SetConfig+0x904>)
 800d22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	2b05      	cmp	r3, #5
 800d234:	d826      	bhi.n	800d284 <UART_SetConfig+0x7a0>
 800d236:	a201      	add	r2, pc, #4	@ (adr r2, 800d23c <UART_SetConfig+0x758>)
 800d238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23c:	0800d255 	.word	0x0800d255
 800d240:	0800d25d 	.word	0x0800d25d
 800d244:	0800d265 	.word	0x0800d265
 800d248:	0800d26d 	.word	0x0800d26d
 800d24c:	0800d275 	.word	0x0800d275
 800d250:	0800d27d 	.word	0x0800d27d
 800d254:	2302      	movs	r3, #2
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25a:	e01a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d25c:	2304      	movs	r3, #4
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e016      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d264:	2308      	movs	r3, #8
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e012      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d26c:	2310      	movs	r3, #16
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e00e      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d274:	2320      	movs	r3, #32
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e00a      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d27c:	2340      	movs	r3, #64	@ 0x40
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e006      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d284:	2380      	movs	r3, #128	@ 0x80
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28a:	e002      	b.n	800d292 <UART_SetConfig+0x7ae>
 800d28c:	2380      	movs	r3, #128	@ 0x80
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a55      	ldr	r2, [pc, #340]	@ (800d3ec <UART_SetConfig+0x908>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	f040 80f8 	bne.w	800d48e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d29e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	dc46      	bgt.n	800d334 <UART_SetConfig+0x850>
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	db75      	blt.n	800d396 <UART_SetConfig+0x8b2>
 800d2aa:	3b02      	subs	r3, #2
 800d2ac:	2b1e      	cmp	r3, #30
 800d2ae:	d872      	bhi.n	800d396 <UART_SetConfig+0x8b2>
 800d2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b8 <UART_SetConfig+0x7d4>)
 800d2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b6:	bf00      	nop
 800d2b8:	0800d33b 	.word	0x0800d33b
 800d2bc:	0800d397 	.word	0x0800d397
 800d2c0:	0800d343 	.word	0x0800d343
 800d2c4:	0800d397 	.word	0x0800d397
 800d2c8:	0800d397 	.word	0x0800d397
 800d2cc:	0800d397 	.word	0x0800d397
 800d2d0:	0800d353 	.word	0x0800d353
 800d2d4:	0800d397 	.word	0x0800d397
 800d2d8:	0800d397 	.word	0x0800d397
 800d2dc:	0800d397 	.word	0x0800d397
 800d2e0:	0800d397 	.word	0x0800d397
 800d2e4:	0800d397 	.word	0x0800d397
 800d2e8:	0800d397 	.word	0x0800d397
 800d2ec:	0800d397 	.word	0x0800d397
 800d2f0:	0800d363 	.word	0x0800d363
 800d2f4:	0800d397 	.word	0x0800d397
 800d2f8:	0800d397 	.word	0x0800d397
 800d2fc:	0800d397 	.word	0x0800d397
 800d300:	0800d397 	.word	0x0800d397
 800d304:	0800d397 	.word	0x0800d397
 800d308:	0800d397 	.word	0x0800d397
 800d30c:	0800d397 	.word	0x0800d397
 800d310:	0800d397 	.word	0x0800d397
 800d314:	0800d397 	.word	0x0800d397
 800d318:	0800d397 	.word	0x0800d397
 800d31c:	0800d397 	.word	0x0800d397
 800d320:	0800d397 	.word	0x0800d397
 800d324:	0800d397 	.word	0x0800d397
 800d328:	0800d397 	.word	0x0800d397
 800d32c:	0800d397 	.word	0x0800d397
 800d330:	0800d389 	.word	0x0800d389
 800d334:	2b40      	cmp	r3, #64	@ 0x40
 800d336:	d02a      	beq.n	800d38e <UART_SetConfig+0x8aa>
 800d338:	e02d      	b.n	800d396 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d33a:	f7fd fa8f 	bl	800a85c <HAL_RCCEx_GetD3PCLK1Freq>
 800d33e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d340:	e02f      	b.n	800d3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d346:	4618      	mov	r0, r3
 800d348:	f7fd fa9e 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d350:	e027      	b.n	800d3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d352:	f107 0318 	add.w	r3, r7, #24
 800d356:	4618      	mov	r0, r3
 800d358:	f7fd fbea 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d360:	e01f      	b.n	800d3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d362:	4b21      	ldr	r3, [pc, #132]	@ (800d3e8 <UART_SetConfig+0x904>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d009      	beq.n	800d382 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d36e:	4b1e      	ldr	r3, [pc, #120]	@ (800d3e8 <UART_SetConfig+0x904>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	08db      	lsrs	r3, r3, #3
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f0 <UART_SetConfig+0x90c>)
 800d37a:	fa22 f303 	lsr.w	r3, r2, r3
 800d37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d380:	e00f      	b.n	800d3a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d382:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f0 <UART_SetConfig+0x90c>)
 800d384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d386:	e00c      	b.n	800d3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d388:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f4 <UART_SetConfig+0x910>)
 800d38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d38c:	e009      	b.n	800d3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d38e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d394:	e005      	b.n	800d3a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d396:	2300      	movs	r3, #0
 800d398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d3a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 81ee 	beq.w	800d786 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ae:	4a12      	ldr	r2, [pc, #72]	@ (800d3f8 <UART_SetConfig+0x914>)
 800d3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4413      	add	r3, r2
 800d3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d305      	bcc.n	800d3da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d910      	bls.n	800d3fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d3e0:	e1d1      	b.n	800d786 <UART_SetConfig+0xca2>
 800d3e2:	bf00      	nop
 800d3e4:	40011c00 	.word	0x40011c00
 800d3e8:	58024400 	.word	0x58024400
 800d3ec:	58000c00 	.word	0x58000c00
 800d3f0:	03d09000 	.word	0x03d09000
 800d3f4:	003d0900 	.word	0x003d0900
 800d3f8:	080107c8 	.word	0x080107c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fe:	2200      	movs	r2, #0
 800d400:	60bb      	str	r3, [r7, #8]
 800d402:	60fa      	str	r2, [r7, #12]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d408:	4ac0      	ldr	r2, [pc, #768]	@ (800d70c <UART_SetConfig+0xc28>)
 800d40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	2200      	movs	r2, #0
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	607a      	str	r2, [r7, #4]
 800d416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d41e:	f7f2 ffcf 	bl	80003c0 <__aeabi_uldivmod>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	4610      	mov	r0, r2
 800d428:	4619      	mov	r1, r3
 800d42a:	f04f 0200 	mov.w	r2, #0
 800d42e:	f04f 0300 	mov.w	r3, #0
 800d432:	020b      	lsls	r3, r1, #8
 800d434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d438:	0202      	lsls	r2, r0, #8
 800d43a:	6979      	ldr	r1, [r7, #20]
 800d43c:	6849      	ldr	r1, [r1, #4]
 800d43e:	0849      	lsrs	r1, r1, #1
 800d440:	2000      	movs	r0, #0
 800d442:	460c      	mov	r4, r1
 800d444:	4605      	mov	r5, r0
 800d446:	eb12 0804 	adds.w	r8, r2, r4
 800d44a:	eb43 0905 	adc.w	r9, r3, r5
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	469a      	mov	sl, r3
 800d456:	4693      	mov	fp, r2
 800d458:	4652      	mov	r2, sl
 800d45a:	465b      	mov	r3, fp
 800d45c:	4640      	mov	r0, r8
 800d45e:	4649      	mov	r1, r9
 800d460:	f7f2 ffae 	bl	80003c0 <__aeabi_uldivmod>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4613      	mov	r3, r2
 800d46a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d472:	d308      	bcc.n	800d486 <UART_SetConfig+0x9a2>
 800d474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d47a:	d204      	bcs.n	800d486 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d482:	60da      	str	r2, [r3, #12]
 800d484:	e17f      	b.n	800d786 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d48c:	e17b      	b.n	800d786 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d496:	f040 80bd 	bne.w	800d614 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d49a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d49e:	2b20      	cmp	r3, #32
 800d4a0:	dc48      	bgt.n	800d534 <UART_SetConfig+0xa50>
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db7b      	blt.n	800d59e <UART_SetConfig+0xaba>
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	d879      	bhi.n	800d59e <UART_SetConfig+0xaba>
 800d4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b0 <UART_SetConfig+0x9cc>)
 800d4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b0:	0800d53b 	.word	0x0800d53b
 800d4b4:	0800d543 	.word	0x0800d543
 800d4b8:	0800d59f 	.word	0x0800d59f
 800d4bc:	0800d59f 	.word	0x0800d59f
 800d4c0:	0800d54b 	.word	0x0800d54b
 800d4c4:	0800d59f 	.word	0x0800d59f
 800d4c8:	0800d59f 	.word	0x0800d59f
 800d4cc:	0800d59f 	.word	0x0800d59f
 800d4d0:	0800d55b 	.word	0x0800d55b
 800d4d4:	0800d59f 	.word	0x0800d59f
 800d4d8:	0800d59f 	.word	0x0800d59f
 800d4dc:	0800d59f 	.word	0x0800d59f
 800d4e0:	0800d59f 	.word	0x0800d59f
 800d4e4:	0800d59f 	.word	0x0800d59f
 800d4e8:	0800d59f 	.word	0x0800d59f
 800d4ec:	0800d59f 	.word	0x0800d59f
 800d4f0:	0800d56b 	.word	0x0800d56b
 800d4f4:	0800d59f 	.word	0x0800d59f
 800d4f8:	0800d59f 	.word	0x0800d59f
 800d4fc:	0800d59f 	.word	0x0800d59f
 800d500:	0800d59f 	.word	0x0800d59f
 800d504:	0800d59f 	.word	0x0800d59f
 800d508:	0800d59f 	.word	0x0800d59f
 800d50c:	0800d59f 	.word	0x0800d59f
 800d510:	0800d59f 	.word	0x0800d59f
 800d514:	0800d59f 	.word	0x0800d59f
 800d518:	0800d59f 	.word	0x0800d59f
 800d51c:	0800d59f 	.word	0x0800d59f
 800d520:	0800d59f 	.word	0x0800d59f
 800d524:	0800d59f 	.word	0x0800d59f
 800d528:	0800d59f 	.word	0x0800d59f
 800d52c:	0800d59f 	.word	0x0800d59f
 800d530:	0800d591 	.word	0x0800d591
 800d534:	2b40      	cmp	r3, #64	@ 0x40
 800d536:	d02e      	beq.n	800d596 <UART_SetConfig+0xab2>
 800d538:	e031      	b.n	800d59e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d53a:	f7fb faf1 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800d53e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d540:	e033      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d542:	f7fb fb03 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800d546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d548:	e02f      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d54a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fd f99a 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d558:	e027      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d55a:	f107 0318 	add.w	r3, r7, #24
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fd fae6 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d568:	e01f      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d56a:	4b69      	ldr	r3, [pc, #420]	@ (800d710 <UART_SetConfig+0xc2c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 0320 	and.w	r3, r3, #32
 800d572:	2b00      	cmp	r3, #0
 800d574:	d009      	beq.n	800d58a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d576:	4b66      	ldr	r3, [pc, #408]	@ (800d710 <UART_SetConfig+0xc2c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	08db      	lsrs	r3, r3, #3
 800d57c:	f003 0303 	and.w	r3, r3, #3
 800d580:	4a64      	ldr	r2, [pc, #400]	@ (800d714 <UART_SetConfig+0xc30>)
 800d582:	fa22 f303 	lsr.w	r3, r2, r3
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d588:	e00f      	b.n	800d5aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d58a:	4b62      	ldr	r3, [pc, #392]	@ (800d714 <UART_SetConfig+0xc30>)
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d58e:	e00c      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d590:	4b61      	ldr	r3, [pc, #388]	@ (800d718 <UART_SetConfig+0xc34>)
 800d592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d594:	e009      	b.n	800d5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d59c:	e005      	b.n	800d5aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d5a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 80ea 	beq.w	800d786 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b6:	4a55      	ldr	r2, [pc, #340]	@ (800d70c <UART_SetConfig+0xc28>)
 800d5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5bc:	461a      	mov	r2, r3
 800d5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5c4:	005a      	lsls	r2, r3, #1
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	085b      	lsrs	r3, r3, #1
 800d5cc:	441a      	add	r2, r3
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5da:	2b0f      	cmp	r3, #15
 800d5dc:	d916      	bls.n	800d60c <UART_SetConfig+0xb28>
 800d5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5e4:	d212      	bcs.n	800d60c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	f023 030f 	bic.w	r3, r3, #15
 800d5ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	085b      	lsrs	r3, r3, #1
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d5fe:	4313      	orrs	r3, r2
 800d600:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d608:	60da      	str	r2, [r3, #12]
 800d60a:	e0bc      	b.n	800d786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d612:	e0b8      	b.n	800d786 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d614:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d618:	2b20      	cmp	r3, #32
 800d61a:	dc4b      	bgt.n	800d6b4 <UART_SetConfig+0xbd0>
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f2c0 8087 	blt.w	800d730 <UART_SetConfig+0xc4c>
 800d622:	2b20      	cmp	r3, #32
 800d624:	f200 8084 	bhi.w	800d730 <UART_SetConfig+0xc4c>
 800d628:	a201      	add	r2, pc, #4	@ (adr r2, 800d630 <UART_SetConfig+0xb4c>)
 800d62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62e:	bf00      	nop
 800d630:	0800d6bb 	.word	0x0800d6bb
 800d634:	0800d6c3 	.word	0x0800d6c3
 800d638:	0800d731 	.word	0x0800d731
 800d63c:	0800d731 	.word	0x0800d731
 800d640:	0800d6cb 	.word	0x0800d6cb
 800d644:	0800d731 	.word	0x0800d731
 800d648:	0800d731 	.word	0x0800d731
 800d64c:	0800d731 	.word	0x0800d731
 800d650:	0800d6db 	.word	0x0800d6db
 800d654:	0800d731 	.word	0x0800d731
 800d658:	0800d731 	.word	0x0800d731
 800d65c:	0800d731 	.word	0x0800d731
 800d660:	0800d731 	.word	0x0800d731
 800d664:	0800d731 	.word	0x0800d731
 800d668:	0800d731 	.word	0x0800d731
 800d66c:	0800d731 	.word	0x0800d731
 800d670:	0800d6eb 	.word	0x0800d6eb
 800d674:	0800d731 	.word	0x0800d731
 800d678:	0800d731 	.word	0x0800d731
 800d67c:	0800d731 	.word	0x0800d731
 800d680:	0800d731 	.word	0x0800d731
 800d684:	0800d731 	.word	0x0800d731
 800d688:	0800d731 	.word	0x0800d731
 800d68c:	0800d731 	.word	0x0800d731
 800d690:	0800d731 	.word	0x0800d731
 800d694:	0800d731 	.word	0x0800d731
 800d698:	0800d731 	.word	0x0800d731
 800d69c:	0800d731 	.word	0x0800d731
 800d6a0:	0800d731 	.word	0x0800d731
 800d6a4:	0800d731 	.word	0x0800d731
 800d6a8:	0800d731 	.word	0x0800d731
 800d6ac:	0800d731 	.word	0x0800d731
 800d6b0:	0800d723 	.word	0x0800d723
 800d6b4:	2b40      	cmp	r3, #64	@ 0x40
 800d6b6:	d037      	beq.n	800d728 <UART_SetConfig+0xc44>
 800d6b8:	e03a      	b.n	800d730 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6ba:	f7fb fa31 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800d6be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6c0:	e03c      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6c2:	f7fb fa43 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800d6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6c8:	e038      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fd f8da 	bl	800a888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6d8:	e030      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6da:	f107 0318 	add.w	r3, r7, #24
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fd fa26 	bl	800ab30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6e8:	e028      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6ea:	4b09      	ldr	r3, [pc, #36]	@ (800d710 <UART_SetConfig+0xc2c>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d012      	beq.n	800d71c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6f6:	4b06      	ldr	r3, [pc, #24]	@ (800d710 <UART_SetConfig+0xc2c>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	08db      	lsrs	r3, r3, #3
 800d6fc:	f003 0303 	and.w	r3, r3, #3
 800d700:	4a04      	ldr	r2, [pc, #16]	@ (800d714 <UART_SetConfig+0xc30>)
 800d702:	fa22 f303 	lsr.w	r3, r2, r3
 800d706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d708:	e018      	b.n	800d73c <UART_SetConfig+0xc58>
 800d70a:	bf00      	nop
 800d70c:	080107c8 	.word	0x080107c8
 800d710:	58024400 	.word	0x58024400
 800d714:	03d09000 	.word	0x03d09000
 800d718:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d71c:	4b24      	ldr	r3, [pc, #144]	@ (800d7b0 <UART_SetConfig+0xccc>)
 800d71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d720:	e00c      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d722:	4b24      	ldr	r3, [pc, #144]	@ (800d7b4 <UART_SetConfig+0xcd0>)
 800d724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d726:	e009      	b.n	800d73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d72e:	e005      	b.n	800d73c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d730:	2300      	movs	r3, #0
 800d732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d73a:	bf00      	nop
    }

    if (pclk != 0U)
 800d73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d021      	beq.n	800d786 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d746:	4a1c      	ldr	r2, [pc, #112]	@ (800d7b8 <UART_SetConfig+0xcd4>)
 800d748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d750:	fbb3 f2f2 	udiv	r2, r3, r2
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	085b      	lsrs	r3, r3, #1
 800d75a:	441a      	add	r2, r3
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	fbb2 f3f3 	udiv	r3, r2, r3
 800d764:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	2b0f      	cmp	r3, #15
 800d76a:	d909      	bls.n	800d780 <UART_SetConfig+0xc9c>
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d772:	d205      	bcs.n	800d780 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d776:	b29a      	uxth	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	e002      	b.n	800d786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2201      	movs	r2, #1
 800d78a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2201      	movs	r2, #1
 800d792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2200      	movs	r2, #0
 800d79a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d7a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3748      	adds	r7, #72	@ 0x48
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7b0:	03d09000 	.word	0x03d09000
 800d7b4:	003d0900 	.word	0x003d0900
 800d7b8:	080107c8 	.word	0x080107c8

0800d7bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c8:	f003 0308 	and.w	r3, r3, #8
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00a      	beq.n	800d7e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	430a      	orrs	r2, r1
 800d806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00a      	beq.n	800d82a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	430a      	orrs	r2, r1
 800d828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d82e:	f003 0304 	and.w	r3, r3, #4
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00a      	beq.n	800d84c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	430a      	orrs	r2, r1
 800d84a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d850:	f003 0310 	and.w	r3, r3, #16
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00a      	beq.n	800d86e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d872:	f003 0320 	and.w	r3, r3, #32
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00a      	beq.n	800d890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	430a      	orrs	r2, r1
 800d88e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d01a      	beq.n	800d8d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8ba:	d10a      	bne.n	800d8d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	430a      	orrs	r2, r1
 800d8d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00a      	beq.n	800d8f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	605a      	str	r2, [r3, #4]
  }
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b098      	sub	sp, #96	@ 0x60
 800d904:	af02      	add	r7, sp, #8
 800d906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d910:	f7f4 fbb6 	bl	8002080 <HAL_GetTick>
 800d914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0308 	and.w	r3, r3, #8
 800d920:	2b08      	cmp	r3, #8
 800d922:	d12f      	bne.n	800d984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d92c:	2200      	movs	r2, #0
 800d92e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f88e 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d022      	beq.n	800d984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	e853 3f00 	ldrex	r3, [r3]
 800d94a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d952:	653b      	str	r3, [r7, #80]	@ 0x50
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	461a      	mov	r2, r3
 800d95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d95c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d95e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d964:	e841 2300 	strex	r3, r2, [r1]
 800d968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e6      	bne.n	800d93e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2220      	movs	r2, #32
 800d974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d980:	2303      	movs	r3, #3
 800d982:	e063      	b.n	800da4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0304 	and.w	r3, r3, #4
 800d98e:	2b04      	cmp	r3, #4
 800d990:	d149      	bne.n	800da26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d99a:	2200      	movs	r2, #0
 800d99c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f857 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d03c      	beq.n	800da26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b4:	e853 3f00 	ldrex	r3, [r3]
 800d9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9d2:	e841 2300 	strex	r3, r2, [r1]
 800d9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1e6      	bne.n	800d9ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	3308      	adds	r3, #8
 800d9e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	e853 3f00 	ldrex	r3, [r3]
 800d9ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f023 0301 	bic.w	r3, r3, #1
 800d9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9fe:	61fa      	str	r2, [r7, #28]
 800da00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da02:	69b9      	ldr	r1, [r7, #24]
 800da04:	69fa      	ldr	r2, [r7, #28]
 800da06:	e841 2300 	strex	r3, r2, [r1]
 800da0a:	617b      	str	r3, [r7, #20]
   return(result);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1e5      	bne.n	800d9de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2220      	movs	r2, #32
 800da16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e012      	b.n	800da4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2220      	movs	r2, #32
 800da2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2220      	movs	r2, #32
 800da32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3758      	adds	r7, #88	@ 0x58
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	4613      	mov	r3, r2
 800da62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da64:	e04f      	b.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6c:	d04b      	beq.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da6e:	f7f4 fb07 	bl	8002080 <HAL_GetTick>
 800da72:	4602      	mov	r2, r0
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	69ba      	ldr	r2, [r7, #24]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d302      	bcc.n	800da84 <UART_WaitOnFlagUntilTimeout+0x30>
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da84:	2303      	movs	r3, #3
 800da86:	e04e      	b.n	800db26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 0304 	and.w	r3, r3, #4
 800da92:	2b00      	cmp	r3, #0
 800da94:	d037      	beq.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b80      	cmp	r3, #128	@ 0x80
 800da9a:	d034      	beq.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b40      	cmp	r3, #64	@ 0x40
 800daa0:	d031      	beq.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	f003 0308 	and.w	r3, r3, #8
 800daac:	2b08      	cmp	r3, #8
 800daae:	d110      	bne.n	800dad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2208      	movs	r2, #8
 800dab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 f839 	bl	800db30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2208      	movs	r2, #8
 800dac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	e029      	b.n	800db26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dadc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dae0:	d111      	bne.n	800db06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800daea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 f81f 	bl	800db30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2220      	movs	r2, #32
 800daf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800db02:	2303      	movs	r3, #3
 800db04:	e00f      	b.n	800db26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	69da      	ldr	r2, [r3, #28]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	4013      	ands	r3, r2
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	429a      	cmp	r2, r3
 800db14:	bf0c      	ite	eq
 800db16:	2301      	moveq	r3, #1
 800db18:	2300      	movne	r3, #0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	79fb      	ldrb	r3, [r7, #7]
 800db20:	429a      	cmp	r2, r3
 800db22:	d0a0      	beq.n	800da66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db30:	b480      	push	{r7}
 800db32:	b095      	sub	sp, #84	@ 0x54
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db40:	e853 3f00 	ldrex	r3, [r3]
 800db44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	461a      	mov	r2, r3
 800db54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db56:	643b      	str	r3, [r7, #64]	@ 0x40
 800db58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db5e:	e841 2300 	strex	r3, r2, [r1]
 800db62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1e6      	bne.n	800db38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3308      	adds	r3, #8
 800db70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	e853 3f00 	ldrex	r3, [r3]
 800db78:	61fb      	str	r3, [r7, #28]
   return(result);
 800db7a:	69fa      	ldr	r2, [r7, #28]
 800db7c:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf8 <UART_EndRxTransfer+0xc8>)
 800db7e:	4013      	ands	r3, r2
 800db80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3308      	adds	r3, #8
 800db88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db92:	e841 2300 	strex	r3, r2, [r1]
 800db96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1e5      	bne.n	800db6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d118      	bne.n	800dbd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	e853 3f00 	ldrex	r3, [r3]
 800dbb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f023 0310 	bic.w	r3, r3, #16
 800dbba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbc4:	61bb      	str	r3, [r7, #24]
 800dbc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc8:	6979      	ldr	r1, [r7, #20]
 800dbca:	69ba      	ldr	r2, [r7, #24]
 800dbcc:	e841 2300 	strex	r3, r2, [r1]
 800dbd0:	613b      	str	r3, [r7, #16]
   return(result);
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1e6      	bne.n	800dba6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2220      	movs	r2, #32
 800dbdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dbec:	bf00      	nop
 800dbee:	3754      	adds	r7, #84	@ 0x54
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	effffffe 	.word	0xeffffffe

0800dbfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7fe ff4c 	bl	800cab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc20:	bf00      	nop
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e853 3f00 	ldrex	r3, [r3]
 800dc3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc44:	61fb      	str	r3, [r7, #28]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	61bb      	str	r3, [r7, #24]
 800dc50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc52:	6979      	ldr	r1, [r7, #20]
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	e841 2300 	strex	r3, r2, [r1]
 800dc5a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1e6      	bne.n	800dc30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2220      	movs	r2, #32
 800dc66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7fe ff17 	bl	800caa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc76:	bf00      	nop
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc86:	bf00      	nop
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc9a:	bf00      	nop
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dca6:	b480      	push	{r7}
 800dca8:	b083      	sub	sp, #12
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcae:	bf00      	nop
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b085      	sub	sp, #20
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d101      	bne.n	800dcd0 <HAL_UARTEx_DisableFifoMode+0x16>
 800dccc:	2302      	movs	r3, #2
 800dcce:	e027      	b.n	800dd20 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2224      	movs	r2, #36	@ 0x24
 800dcdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f022 0201 	bic.w	r2, r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dcfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2220      	movs	r2, #32
 800dd12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd1e:	2300      	movs	r3, #0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d101      	bne.n	800dd44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd40:	2302      	movs	r3, #2
 800dd42:	e02d      	b.n	800dda0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2224      	movs	r2, #36	@ 0x24
 800dd50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f022 0201 	bic.w	r2, r2, #1
 800dd6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	430a      	orrs	r2, r1
 800dd7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 f84f 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2220      	movs	r2, #32
 800dd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d101      	bne.n	800ddc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddbc:	2302      	movs	r3, #2
 800ddbe:	e02d      	b.n	800de1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2224      	movs	r2, #36	@ 0x24
 800ddcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f022 0201 	bic.w	r2, r2, #1
 800dde6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f811 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2220      	movs	r2, #32
 800de0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de30:	2b00      	cmp	r3, #0
 800de32:	d108      	bne.n	800de46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de44:	e031      	b.n	800deaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de46:	2310      	movs	r3, #16
 800de48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de4a:	2310      	movs	r3, #16
 800de4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	0e5b      	lsrs	r3, r3, #25
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 0307 	and.w	r3, r3, #7
 800de5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	0f5b      	lsrs	r3, r3, #29
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0307 	and.w	r3, r3, #7
 800de6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	7b3a      	ldrb	r2, [r7, #12]
 800de72:	4911      	ldr	r1, [pc, #68]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de74:	5c8a      	ldrb	r2, [r1, r2]
 800de76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de7a:	7b3a      	ldrb	r2, [r7, #12]
 800de7c:	490f      	ldr	r1, [pc, #60]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de80:	fb93 f3f2 	sdiv	r3, r3, r2
 800de84:	b29a      	uxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	7b7a      	ldrb	r2, [r7, #13]
 800de90:	4909      	ldr	r1, [pc, #36]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de92:	5c8a      	ldrb	r2, [r1, r2]
 800de94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de98:	7b7a      	ldrb	r2, [r7, #13]
 800de9a:	4908      	ldr	r1, [pc, #32]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	080107e0 	.word	0x080107e0
 800debc:	080107e8 	.word	0x080107e8

0800dec0 <__itoa>:
 800dec0:	1e93      	subs	r3, r2, #2
 800dec2:	2b22      	cmp	r3, #34	@ 0x22
 800dec4:	b510      	push	{r4, lr}
 800dec6:	460c      	mov	r4, r1
 800dec8:	d904      	bls.n	800ded4 <__itoa+0x14>
 800deca:	2300      	movs	r3, #0
 800decc:	700b      	strb	r3, [r1, #0]
 800dece:	461c      	mov	r4, r3
 800ded0:	4620      	mov	r0, r4
 800ded2:	bd10      	pop	{r4, pc}
 800ded4:	2a0a      	cmp	r2, #10
 800ded6:	d109      	bne.n	800deec <__itoa+0x2c>
 800ded8:	2800      	cmp	r0, #0
 800deda:	da07      	bge.n	800deec <__itoa+0x2c>
 800dedc:	232d      	movs	r3, #45	@ 0x2d
 800dede:	700b      	strb	r3, [r1, #0]
 800dee0:	4240      	negs	r0, r0
 800dee2:	2101      	movs	r1, #1
 800dee4:	4421      	add	r1, r4
 800dee6:	f000 f805 	bl	800def4 <__utoa>
 800deea:	e7f1      	b.n	800ded0 <__itoa+0x10>
 800deec:	2100      	movs	r1, #0
 800deee:	e7f9      	b.n	800dee4 <__itoa+0x24>

0800def0 <itoa>:
 800def0:	f7ff bfe6 	b.w	800dec0 <__itoa>

0800def4 <__utoa>:
 800def4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800def6:	4c1f      	ldr	r4, [pc, #124]	@ (800df74 <__utoa+0x80>)
 800def8:	b08b      	sub	sp, #44	@ 0x2c
 800defa:	4605      	mov	r5, r0
 800defc:	460b      	mov	r3, r1
 800defe:	466e      	mov	r6, sp
 800df00:	f104 0c20 	add.w	ip, r4, #32
 800df04:	6820      	ldr	r0, [r4, #0]
 800df06:	6861      	ldr	r1, [r4, #4]
 800df08:	4637      	mov	r7, r6
 800df0a:	c703      	stmia	r7!, {r0, r1}
 800df0c:	3408      	adds	r4, #8
 800df0e:	4564      	cmp	r4, ip
 800df10:	463e      	mov	r6, r7
 800df12:	d1f7      	bne.n	800df04 <__utoa+0x10>
 800df14:	7921      	ldrb	r1, [r4, #4]
 800df16:	7139      	strb	r1, [r7, #4]
 800df18:	1e91      	subs	r1, r2, #2
 800df1a:	6820      	ldr	r0, [r4, #0]
 800df1c:	6038      	str	r0, [r7, #0]
 800df1e:	2922      	cmp	r1, #34	@ 0x22
 800df20:	f04f 0100 	mov.w	r1, #0
 800df24:	d904      	bls.n	800df30 <__utoa+0x3c>
 800df26:	7019      	strb	r1, [r3, #0]
 800df28:	460b      	mov	r3, r1
 800df2a:	4618      	mov	r0, r3
 800df2c:	b00b      	add	sp, #44	@ 0x2c
 800df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df30:	1e58      	subs	r0, r3, #1
 800df32:	4684      	mov	ip, r0
 800df34:	fbb5 f7f2 	udiv	r7, r5, r2
 800df38:	fb02 5617 	mls	r6, r2, r7, r5
 800df3c:	3628      	adds	r6, #40	@ 0x28
 800df3e:	446e      	add	r6, sp
 800df40:	460c      	mov	r4, r1
 800df42:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800df46:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800df4a:	462e      	mov	r6, r5
 800df4c:	42b2      	cmp	r2, r6
 800df4e:	f101 0101 	add.w	r1, r1, #1
 800df52:	463d      	mov	r5, r7
 800df54:	d9ee      	bls.n	800df34 <__utoa+0x40>
 800df56:	2200      	movs	r2, #0
 800df58:	545a      	strb	r2, [r3, r1]
 800df5a:	1919      	adds	r1, r3, r4
 800df5c:	1aa5      	subs	r5, r4, r2
 800df5e:	42aa      	cmp	r2, r5
 800df60:	dae3      	bge.n	800df2a <__utoa+0x36>
 800df62:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800df66:	780e      	ldrb	r6, [r1, #0]
 800df68:	7006      	strb	r6, [r0, #0]
 800df6a:	3201      	adds	r2, #1
 800df6c:	f801 5901 	strb.w	r5, [r1], #-1
 800df70:	e7f4      	b.n	800df5c <__utoa+0x68>
 800df72:	bf00      	nop
 800df74:	080107f0 	.word	0x080107f0

0800df78 <__cvt>:
 800df78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7a:	ed2d 8b02 	vpush	{d8}
 800df7e:	eeb0 8b40 	vmov.f64	d8, d0
 800df82:	b085      	sub	sp, #20
 800df84:	4617      	mov	r7, r2
 800df86:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800df88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df8a:	ee18 2a90 	vmov	r2, s17
 800df8e:	f025 0520 	bic.w	r5, r5, #32
 800df92:	2a00      	cmp	r2, #0
 800df94:	bfb6      	itet	lt
 800df96:	222d      	movlt	r2, #45	@ 0x2d
 800df98:	2200      	movge	r2, #0
 800df9a:	eeb1 8b40 	vneglt.f64	d8, d0
 800df9e:	2d46      	cmp	r5, #70	@ 0x46
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	701a      	strb	r2, [r3, #0]
 800dfa4:	d004      	beq.n	800dfb0 <__cvt+0x38>
 800dfa6:	2d45      	cmp	r5, #69	@ 0x45
 800dfa8:	d100      	bne.n	800dfac <__cvt+0x34>
 800dfaa:	3401      	adds	r4, #1
 800dfac:	2102      	movs	r1, #2
 800dfae:	e000      	b.n	800dfb2 <__cvt+0x3a>
 800dfb0:	2103      	movs	r1, #3
 800dfb2:	ab03      	add	r3, sp, #12
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	ab02      	add	r3, sp, #8
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4622      	mov	r2, r4
 800dfbc:	4633      	mov	r3, r6
 800dfbe:	eeb0 0b48 	vmov.f64	d0, d8
 800dfc2:	f000 fe21 	bl	800ec08 <_dtoa_r>
 800dfc6:	2d47      	cmp	r5, #71	@ 0x47
 800dfc8:	d114      	bne.n	800dff4 <__cvt+0x7c>
 800dfca:	07fb      	lsls	r3, r7, #31
 800dfcc:	d50a      	bpl.n	800dfe4 <__cvt+0x6c>
 800dfce:	1902      	adds	r2, r0, r4
 800dfd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd8:	bf08      	it	eq
 800dfda:	9203      	streq	r2, [sp, #12]
 800dfdc:	2130      	movs	r1, #48	@ 0x30
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d319      	bcc.n	800e018 <__cvt+0xa0>
 800dfe4:	9b03      	ldr	r3, [sp, #12]
 800dfe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfe8:	1a1b      	subs	r3, r3, r0
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	b005      	add	sp, #20
 800dfee:	ecbd 8b02 	vpop	{d8}
 800dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff4:	2d46      	cmp	r5, #70	@ 0x46
 800dff6:	eb00 0204 	add.w	r2, r0, r4
 800dffa:	d1e9      	bne.n	800dfd0 <__cvt+0x58>
 800dffc:	7803      	ldrb	r3, [r0, #0]
 800dffe:	2b30      	cmp	r3, #48	@ 0x30
 800e000:	d107      	bne.n	800e012 <__cvt+0x9a>
 800e002:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00a:	bf1c      	itt	ne
 800e00c:	f1c4 0401 	rsbne	r4, r4, #1
 800e010:	6034      	strne	r4, [r6, #0]
 800e012:	6833      	ldr	r3, [r6, #0]
 800e014:	441a      	add	r2, r3
 800e016:	e7db      	b.n	800dfd0 <__cvt+0x58>
 800e018:	1c5c      	adds	r4, r3, #1
 800e01a:	9403      	str	r4, [sp, #12]
 800e01c:	7019      	strb	r1, [r3, #0]
 800e01e:	e7de      	b.n	800dfde <__cvt+0x66>

0800e020 <__exponent>:
 800e020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e022:	2900      	cmp	r1, #0
 800e024:	bfba      	itte	lt
 800e026:	4249      	neglt	r1, r1
 800e028:	232d      	movlt	r3, #45	@ 0x2d
 800e02a:	232b      	movge	r3, #43	@ 0x2b
 800e02c:	2909      	cmp	r1, #9
 800e02e:	7002      	strb	r2, [r0, #0]
 800e030:	7043      	strb	r3, [r0, #1]
 800e032:	dd29      	ble.n	800e088 <__exponent+0x68>
 800e034:	f10d 0307 	add.w	r3, sp, #7
 800e038:	461d      	mov	r5, r3
 800e03a:	270a      	movs	r7, #10
 800e03c:	461a      	mov	r2, r3
 800e03e:	fbb1 f6f7 	udiv	r6, r1, r7
 800e042:	fb07 1416 	mls	r4, r7, r6, r1
 800e046:	3430      	adds	r4, #48	@ 0x30
 800e048:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e04c:	460c      	mov	r4, r1
 800e04e:	2c63      	cmp	r4, #99	@ 0x63
 800e050:	f103 33ff 	add.w	r3, r3, #4294967295
 800e054:	4631      	mov	r1, r6
 800e056:	dcf1      	bgt.n	800e03c <__exponent+0x1c>
 800e058:	3130      	adds	r1, #48	@ 0x30
 800e05a:	1e94      	subs	r4, r2, #2
 800e05c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e060:	1c41      	adds	r1, r0, #1
 800e062:	4623      	mov	r3, r4
 800e064:	42ab      	cmp	r3, r5
 800e066:	d30a      	bcc.n	800e07e <__exponent+0x5e>
 800e068:	f10d 0309 	add.w	r3, sp, #9
 800e06c:	1a9b      	subs	r3, r3, r2
 800e06e:	42ac      	cmp	r4, r5
 800e070:	bf88      	it	hi
 800e072:	2300      	movhi	r3, #0
 800e074:	3302      	adds	r3, #2
 800e076:	4403      	add	r3, r0
 800e078:	1a18      	subs	r0, r3, r0
 800e07a:	b003      	add	sp, #12
 800e07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e07e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e082:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e086:	e7ed      	b.n	800e064 <__exponent+0x44>
 800e088:	2330      	movs	r3, #48	@ 0x30
 800e08a:	3130      	adds	r1, #48	@ 0x30
 800e08c:	7083      	strb	r3, [r0, #2]
 800e08e:	70c1      	strb	r1, [r0, #3]
 800e090:	1d03      	adds	r3, r0, #4
 800e092:	e7f1      	b.n	800e078 <__exponent+0x58>
 800e094:	0000      	movs	r0, r0
	...

0800e098 <_printf_float>:
 800e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09c:	b08d      	sub	sp, #52	@ 0x34
 800e09e:	460c      	mov	r4, r1
 800e0a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e0a4:	4616      	mov	r6, r2
 800e0a6:	461f      	mov	r7, r3
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	f000 fcab 	bl	800ea04 <_localeconv_r>
 800e0ae:	f8d0 b000 	ldr.w	fp, [r0]
 800e0b2:	4658      	mov	r0, fp
 800e0b4:	f7f2 f97c 	bl	80003b0 <strlen>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e0c4:	6822      	ldr	r2, [r4, #0]
 800e0c6:	9005      	str	r0, [sp, #20]
 800e0c8:	3307      	adds	r3, #7
 800e0ca:	f023 0307 	bic.w	r3, r3, #7
 800e0ce:	f103 0108 	add.w	r1, r3, #8
 800e0d2:	f8c8 1000 	str.w	r1, [r8]
 800e0d6:	ed93 0b00 	vldr	d0, [r3]
 800e0da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e338 <_printf_float+0x2a0>
 800e0de:	eeb0 7bc0 	vabs.f64	d7, d0
 800e0e2:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e0ee:	dd24      	ble.n	800e13a <_printf_float+0xa2>
 800e0f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f8:	d502      	bpl.n	800e100 <_printf_float+0x68>
 800e0fa:	232d      	movs	r3, #45	@ 0x2d
 800e0fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e100:	498f      	ldr	r1, [pc, #572]	@ (800e340 <_printf_float+0x2a8>)
 800e102:	4b90      	ldr	r3, [pc, #576]	@ (800e344 <_printf_float+0x2ac>)
 800e104:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e108:	bf94      	ite	ls
 800e10a:	4688      	movls	r8, r1
 800e10c:	4698      	movhi	r8, r3
 800e10e:	f022 0204 	bic.w	r2, r2, #4
 800e112:	2303      	movs	r3, #3
 800e114:	6123      	str	r3, [r4, #16]
 800e116:	6022      	str	r2, [r4, #0]
 800e118:	f04f 0a00 	mov.w	sl, #0
 800e11c:	9700      	str	r7, [sp, #0]
 800e11e:	4633      	mov	r3, r6
 800e120:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e122:	4621      	mov	r1, r4
 800e124:	4628      	mov	r0, r5
 800e126:	f000 f9d1 	bl	800e4cc <_printf_common>
 800e12a:	3001      	adds	r0, #1
 800e12c:	f040 8089 	bne.w	800e242 <_printf_float+0x1aa>
 800e130:	f04f 30ff 	mov.w	r0, #4294967295
 800e134:	b00d      	add	sp, #52	@ 0x34
 800e136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13a:	eeb4 0b40 	vcmp.f64	d0, d0
 800e13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e142:	d709      	bvc.n	800e158 <_printf_float+0xc0>
 800e144:	ee10 3a90 	vmov	r3, s1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	bfbc      	itt	lt
 800e14c:	232d      	movlt	r3, #45	@ 0x2d
 800e14e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e152:	497d      	ldr	r1, [pc, #500]	@ (800e348 <_printf_float+0x2b0>)
 800e154:	4b7d      	ldr	r3, [pc, #500]	@ (800e34c <_printf_float+0x2b4>)
 800e156:	e7d5      	b.n	800e104 <_printf_float+0x6c>
 800e158:	6863      	ldr	r3, [r4, #4]
 800e15a:	1c59      	adds	r1, r3, #1
 800e15c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e160:	d139      	bne.n	800e1d6 <_printf_float+0x13e>
 800e162:	2306      	movs	r3, #6
 800e164:	6063      	str	r3, [r4, #4]
 800e166:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e16a:	2300      	movs	r3, #0
 800e16c:	6022      	str	r2, [r4, #0]
 800e16e:	9303      	str	r3, [sp, #12]
 800e170:	ab0a      	add	r3, sp, #40	@ 0x28
 800e172:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e176:	ab09      	add	r3, sp, #36	@ 0x24
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	6861      	ldr	r1, [r4, #4]
 800e17c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e180:	4628      	mov	r0, r5
 800e182:	f7ff fef9 	bl	800df78 <__cvt>
 800e186:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e18a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e18c:	4680      	mov	r8, r0
 800e18e:	d129      	bne.n	800e1e4 <_printf_float+0x14c>
 800e190:	1cc8      	adds	r0, r1, #3
 800e192:	db02      	blt.n	800e19a <_printf_float+0x102>
 800e194:	6863      	ldr	r3, [r4, #4]
 800e196:	4299      	cmp	r1, r3
 800e198:	dd41      	ble.n	800e21e <_printf_float+0x186>
 800e19a:	f1a9 0902 	sub.w	r9, r9, #2
 800e19e:	fa5f f989 	uxtb.w	r9, r9
 800e1a2:	3901      	subs	r1, #1
 800e1a4:	464a      	mov	r2, r9
 800e1a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e1aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1ac:	f7ff ff38 	bl	800e020 <__exponent>
 800e1b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1b2:	1813      	adds	r3, r2, r0
 800e1b4:	2a01      	cmp	r2, #1
 800e1b6:	4682      	mov	sl, r0
 800e1b8:	6123      	str	r3, [r4, #16]
 800e1ba:	dc02      	bgt.n	800e1c2 <_printf_float+0x12a>
 800e1bc:	6822      	ldr	r2, [r4, #0]
 800e1be:	07d2      	lsls	r2, r2, #31
 800e1c0:	d501      	bpl.n	800e1c6 <_printf_float+0x12e>
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	6123      	str	r3, [r4, #16]
 800e1c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d0a6      	beq.n	800e11c <_printf_float+0x84>
 800e1ce:	232d      	movs	r3, #45	@ 0x2d
 800e1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1d4:	e7a2      	b.n	800e11c <_printf_float+0x84>
 800e1d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1da:	d1c4      	bne.n	800e166 <_printf_float+0xce>
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1c2      	bne.n	800e166 <_printf_float+0xce>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e7bf      	b.n	800e164 <_printf_float+0xcc>
 800e1e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e1e8:	d9db      	bls.n	800e1a2 <_printf_float+0x10a>
 800e1ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e1ee:	d118      	bne.n	800e222 <_printf_float+0x18a>
 800e1f0:	2900      	cmp	r1, #0
 800e1f2:	6863      	ldr	r3, [r4, #4]
 800e1f4:	dd0b      	ble.n	800e20e <_printf_float+0x176>
 800e1f6:	6121      	str	r1, [r4, #16]
 800e1f8:	b913      	cbnz	r3, 800e200 <_printf_float+0x168>
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	07d0      	lsls	r0, r2, #31
 800e1fe:	d502      	bpl.n	800e206 <_printf_float+0x16e>
 800e200:	3301      	adds	r3, #1
 800e202:	440b      	add	r3, r1
 800e204:	6123      	str	r3, [r4, #16]
 800e206:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e208:	f04f 0a00 	mov.w	sl, #0
 800e20c:	e7db      	b.n	800e1c6 <_printf_float+0x12e>
 800e20e:	b913      	cbnz	r3, 800e216 <_printf_float+0x17e>
 800e210:	6822      	ldr	r2, [r4, #0]
 800e212:	07d2      	lsls	r2, r2, #31
 800e214:	d501      	bpl.n	800e21a <_printf_float+0x182>
 800e216:	3302      	adds	r3, #2
 800e218:	e7f4      	b.n	800e204 <_printf_float+0x16c>
 800e21a:	2301      	movs	r3, #1
 800e21c:	e7f2      	b.n	800e204 <_printf_float+0x16c>
 800e21e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e224:	4299      	cmp	r1, r3
 800e226:	db05      	blt.n	800e234 <_printf_float+0x19c>
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	6121      	str	r1, [r4, #16]
 800e22c:	07d8      	lsls	r0, r3, #31
 800e22e:	d5ea      	bpl.n	800e206 <_printf_float+0x16e>
 800e230:	1c4b      	adds	r3, r1, #1
 800e232:	e7e7      	b.n	800e204 <_printf_float+0x16c>
 800e234:	2900      	cmp	r1, #0
 800e236:	bfd4      	ite	le
 800e238:	f1c1 0202 	rsble	r2, r1, #2
 800e23c:	2201      	movgt	r2, #1
 800e23e:	4413      	add	r3, r2
 800e240:	e7e0      	b.n	800e204 <_printf_float+0x16c>
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	055a      	lsls	r2, r3, #21
 800e246:	d407      	bmi.n	800e258 <_printf_float+0x1c0>
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	4642      	mov	r2, r8
 800e24c:	4631      	mov	r1, r6
 800e24e:	4628      	mov	r0, r5
 800e250:	47b8      	blx	r7
 800e252:	3001      	adds	r0, #1
 800e254:	d12a      	bne.n	800e2ac <_printf_float+0x214>
 800e256:	e76b      	b.n	800e130 <_printf_float+0x98>
 800e258:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e25c:	f240 80e0 	bls.w	800e420 <_printf_float+0x388>
 800e260:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e264:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26c:	d133      	bne.n	800e2d6 <_printf_float+0x23e>
 800e26e:	4a38      	ldr	r2, [pc, #224]	@ (800e350 <_printf_float+0x2b8>)
 800e270:	2301      	movs	r3, #1
 800e272:	4631      	mov	r1, r6
 800e274:	4628      	mov	r0, r5
 800e276:	47b8      	blx	r7
 800e278:	3001      	adds	r0, #1
 800e27a:	f43f af59 	beq.w	800e130 <_printf_float+0x98>
 800e27e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e282:	4543      	cmp	r3, r8
 800e284:	db02      	blt.n	800e28c <_printf_float+0x1f4>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	07d8      	lsls	r0, r3, #31
 800e28a:	d50f      	bpl.n	800e2ac <_printf_float+0x214>
 800e28c:	9b05      	ldr	r3, [sp, #20]
 800e28e:	465a      	mov	r2, fp
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	f43f af4a 	beq.w	800e130 <_printf_float+0x98>
 800e29c:	f04f 0900 	mov.w	r9, #0
 800e2a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2a4:	f104 0a1a 	add.w	sl, r4, #26
 800e2a8:	45c8      	cmp	r8, r9
 800e2aa:	dc09      	bgt.n	800e2c0 <_printf_float+0x228>
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	079b      	lsls	r3, r3, #30
 800e2b0:	f100 8107 	bmi.w	800e4c2 <_printf_float+0x42a>
 800e2b4:	68e0      	ldr	r0, [r4, #12]
 800e2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2b8:	4298      	cmp	r0, r3
 800e2ba:	bfb8      	it	lt
 800e2bc:	4618      	movlt	r0, r3
 800e2be:	e739      	b.n	800e134 <_printf_float+0x9c>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	4652      	mov	r2, sl
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	47b8      	blx	r7
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	f43f af30 	beq.w	800e130 <_printf_float+0x98>
 800e2d0:	f109 0901 	add.w	r9, r9, #1
 800e2d4:	e7e8      	b.n	800e2a8 <_printf_float+0x210>
 800e2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	dc3b      	bgt.n	800e354 <_printf_float+0x2bc>
 800e2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800e350 <_printf_float+0x2b8>)
 800e2de:	2301      	movs	r3, #1
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f43f af22 	beq.w	800e130 <_printf_float+0x98>
 800e2ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e2f0:	ea59 0303 	orrs.w	r3, r9, r3
 800e2f4:	d102      	bne.n	800e2fc <_printf_float+0x264>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	07d9      	lsls	r1, r3, #31
 800e2fa:	d5d7      	bpl.n	800e2ac <_printf_float+0x214>
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	465a      	mov	r2, fp
 800e300:	4631      	mov	r1, r6
 800e302:	4628      	mov	r0, r5
 800e304:	47b8      	blx	r7
 800e306:	3001      	adds	r0, #1
 800e308:	f43f af12 	beq.w	800e130 <_printf_float+0x98>
 800e30c:	f04f 0a00 	mov.w	sl, #0
 800e310:	f104 0b1a 	add.w	fp, r4, #26
 800e314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e316:	425b      	negs	r3, r3
 800e318:	4553      	cmp	r3, sl
 800e31a:	dc01      	bgt.n	800e320 <_printf_float+0x288>
 800e31c:	464b      	mov	r3, r9
 800e31e:	e794      	b.n	800e24a <_printf_float+0x1b2>
 800e320:	2301      	movs	r3, #1
 800e322:	465a      	mov	r2, fp
 800e324:	4631      	mov	r1, r6
 800e326:	4628      	mov	r0, r5
 800e328:	47b8      	blx	r7
 800e32a:	3001      	adds	r0, #1
 800e32c:	f43f af00 	beq.w	800e130 <_printf_float+0x98>
 800e330:	f10a 0a01 	add.w	sl, sl, #1
 800e334:	e7ee      	b.n	800e314 <_printf_float+0x27c>
 800e336:	bf00      	nop
 800e338:	ffffffff 	.word	0xffffffff
 800e33c:	7fefffff 	.word	0x7fefffff
 800e340:	08010815 	.word	0x08010815
 800e344:	08010819 	.word	0x08010819
 800e348:	0801081d 	.word	0x0801081d
 800e34c:	08010821 	.word	0x08010821
 800e350:	08010825 	.word	0x08010825
 800e354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e356:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e35a:	4553      	cmp	r3, sl
 800e35c:	bfa8      	it	ge
 800e35e:	4653      	movge	r3, sl
 800e360:	2b00      	cmp	r3, #0
 800e362:	4699      	mov	r9, r3
 800e364:	dc37      	bgt.n	800e3d6 <_printf_float+0x33e>
 800e366:	2300      	movs	r3, #0
 800e368:	9307      	str	r3, [sp, #28]
 800e36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e36e:	f104 021a 	add.w	r2, r4, #26
 800e372:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e374:	9907      	ldr	r1, [sp, #28]
 800e376:	9306      	str	r3, [sp, #24]
 800e378:	eba3 0309 	sub.w	r3, r3, r9
 800e37c:	428b      	cmp	r3, r1
 800e37e:	dc31      	bgt.n	800e3e4 <_printf_float+0x34c>
 800e380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e382:	459a      	cmp	sl, r3
 800e384:	dc3b      	bgt.n	800e3fe <_printf_float+0x366>
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	07da      	lsls	r2, r3, #31
 800e38a:	d438      	bmi.n	800e3fe <_printf_float+0x366>
 800e38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38e:	ebaa 0903 	sub.w	r9, sl, r3
 800e392:	9b06      	ldr	r3, [sp, #24]
 800e394:	ebaa 0303 	sub.w	r3, sl, r3
 800e398:	4599      	cmp	r9, r3
 800e39a:	bfa8      	it	ge
 800e39c:	4699      	movge	r9, r3
 800e39e:	f1b9 0f00 	cmp.w	r9, #0
 800e3a2:	dc34      	bgt.n	800e40e <_printf_float+0x376>
 800e3a4:	f04f 0800 	mov.w	r8, #0
 800e3a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3ac:	f104 0b1a 	add.w	fp, r4, #26
 800e3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b2:	ebaa 0303 	sub.w	r3, sl, r3
 800e3b6:	eba3 0309 	sub.w	r3, r3, r9
 800e3ba:	4543      	cmp	r3, r8
 800e3bc:	f77f af76 	ble.w	800e2ac <_printf_float+0x214>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	465a      	mov	r2, fp
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	47b8      	blx	r7
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	f43f aeb0 	beq.w	800e130 <_printf_float+0x98>
 800e3d0:	f108 0801 	add.w	r8, r8, #1
 800e3d4:	e7ec      	b.n	800e3b0 <_printf_float+0x318>
 800e3d6:	4642      	mov	r2, r8
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b8      	blx	r7
 800e3de:	3001      	adds	r0, #1
 800e3e0:	d1c1      	bne.n	800e366 <_printf_float+0x2ce>
 800e3e2:	e6a5      	b.n	800e130 <_printf_float+0x98>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	9206      	str	r2, [sp, #24]
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	f43f ae9e 	beq.w	800e130 <_printf_float+0x98>
 800e3f4:	9b07      	ldr	r3, [sp, #28]
 800e3f6:	9a06      	ldr	r2, [sp, #24]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	9307      	str	r3, [sp, #28]
 800e3fc:	e7b9      	b.n	800e372 <_printf_float+0x2da>
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	465a      	mov	r2, fp
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	d1bf      	bne.n	800e38c <_printf_float+0x2f4>
 800e40c:	e690      	b.n	800e130 <_printf_float+0x98>
 800e40e:	9a06      	ldr	r2, [sp, #24]
 800e410:	464b      	mov	r3, r9
 800e412:	4442      	add	r2, r8
 800e414:	4631      	mov	r1, r6
 800e416:	4628      	mov	r0, r5
 800e418:	47b8      	blx	r7
 800e41a:	3001      	adds	r0, #1
 800e41c:	d1c2      	bne.n	800e3a4 <_printf_float+0x30c>
 800e41e:	e687      	b.n	800e130 <_printf_float+0x98>
 800e420:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e424:	f1b9 0f01 	cmp.w	r9, #1
 800e428:	dc01      	bgt.n	800e42e <_printf_float+0x396>
 800e42a:	07db      	lsls	r3, r3, #31
 800e42c:	d536      	bpl.n	800e49c <_printf_float+0x404>
 800e42e:	2301      	movs	r3, #1
 800e430:	4642      	mov	r2, r8
 800e432:	4631      	mov	r1, r6
 800e434:	4628      	mov	r0, r5
 800e436:	47b8      	blx	r7
 800e438:	3001      	adds	r0, #1
 800e43a:	f43f ae79 	beq.w	800e130 <_printf_float+0x98>
 800e43e:	9b05      	ldr	r3, [sp, #20]
 800e440:	465a      	mov	r2, fp
 800e442:	4631      	mov	r1, r6
 800e444:	4628      	mov	r0, r5
 800e446:	47b8      	blx	r7
 800e448:	3001      	adds	r0, #1
 800e44a:	f43f ae71 	beq.w	800e130 <_printf_float+0x98>
 800e44e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e452:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e45e:	d018      	beq.n	800e492 <_printf_float+0x3fa>
 800e460:	464b      	mov	r3, r9
 800e462:	f108 0201 	add.w	r2, r8, #1
 800e466:	4631      	mov	r1, r6
 800e468:	4628      	mov	r0, r5
 800e46a:	47b8      	blx	r7
 800e46c:	3001      	adds	r0, #1
 800e46e:	d10c      	bne.n	800e48a <_printf_float+0x3f2>
 800e470:	e65e      	b.n	800e130 <_printf_float+0x98>
 800e472:	2301      	movs	r3, #1
 800e474:	465a      	mov	r2, fp
 800e476:	4631      	mov	r1, r6
 800e478:	4628      	mov	r0, r5
 800e47a:	47b8      	blx	r7
 800e47c:	3001      	adds	r0, #1
 800e47e:	f43f ae57 	beq.w	800e130 <_printf_float+0x98>
 800e482:	f108 0801 	add.w	r8, r8, #1
 800e486:	45c8      	cmp	r8, r9
 800e488:	dbf3      	blt.n	800e472 <_printf_float+0x3da>
 800e48a:	4653      	mov	r3, sl
 800e48c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e490:	e6dc      	b.n	800e24c <_printf_float+0x1b4>
 800e492:	f04f 0800 	mov.w	r8, #0
 800e496:	f104 0b1a 	add.w	fp, r4, #26
 800e49a:	e7f4      	b.n	800e486 <_printf_float+0x3ee>
 800e49c:	2301      	movs	r3, #1
 800e49e:	4642      	mov	r2, r8
 800e4a0:	e7e1      	b.n	800e466 <_printf_float+0x3ce>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	464a      	mov	r2, r9
 800e4a6:	4631      	mov	r1, r6
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	47b8      	blx	r7
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	f43f ae3f 	beq.w	800e130 <_printf_float+0x98>
 800e4b2:	f108 0801 	add.w	r8, r8, #1
 800e4b6:	68e3      	ldr	r3, [r4, #12]
 800e4b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4ba:	1a5b      	subs	r3, r3, r1
 800e4bc:	4543      	cmp	r3, r8
 800e4be:	dcf0      	bgt.n	800e4a2 <_printf_float+0x40a>
 800e4c0:	e6f8      	b.n	800e2b4 <_printf_float+0x21c>
 800e4c2:	f04f 0800 	mov.w	r8, #0
 800e4c6:	f104 0919 	add.w	r9, r4, #25
 800e4ca:	e7f4      	b.n	800e4b6 <_printf_float+0x41e>

0800e4cc <_printf_common>:
 800e4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	4616      	mov	r6, r2
 800e4d2:	4698      	mov	r8, r3
 800e4d4:	688a      	ldr	r2, [r1, #8]
 800e4d6:	690b      	ldr	r3, [r1, #16]
 800e4d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	bfb8      	it	lt
 800e4e0:	4613      	movlt	r3, r2
 800e4e2:	6033      	str	r3, [r6, #0]
 800e4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	b10a      	cbz	r2, 800e4f2 <_printf_common+0x26>
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	6033      	str	r3, [r6, #0]
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	0699      	lsls	r1, r3, #26
 800e4f6:	bf42      	ittt	mi
 800e4f8:	6833      	ldrmi	r3, [r6, #0]
 800e4fa:	3302      	addmi	r3, #2
 800e4fc:	6033      	strmi	r3, [r6, #0]
 800e4fe:	6825      	ldr	r5, [r4, #0]
 800e500:	f015 0506 	ands.w	r5, r5, #6
 800e504:	d106      	bne.n	800e514 <_printf_common+0x48>
 800e506:	f104 0a19 	add.w	sl, r4, #25
 800e50a:	68e3      	ldr	r3, [r4, #12]
 800e50c:	6832      	ldr	r2, [r6, #0]
 800e50e:	1a9b      	subs	r3, r3, r2
 800e510:	42ab      	cmp	r3, r5
 800e512:	dc26      	bgt.n	800e562 <_printf_common+0x96>
 800e514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	3b00      	subs	r3, #0
 800e51c:	bf18      	it	ne
 800e51e:	2301      	movne	r3, #1
 800e520:	0692      	lsls	r2, r2, #26
 800e522:	d42b      	bmi.n	800e57c <_printf_common+0xb0>
 800e524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e528:	4641      	mov	r1, r8
 800e52a:	4638      	mov	r0, r7
 800e52c:	47c8      	blx	r9
 800e52e:	3001      	adds	r0, #1
 800e530:	d01e      	beq.n	800e570 <_printf_common+0xa4>
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	6922      	ldr	r2, [r4, #16]
 800e536:	f003 0306 	and.w	r3, r3, #6
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	bf02      	ittt	eq
 800e53e:	68e5      	ldreq	r5, [r4, #12]
 800e540:	6833      	ldreq	r3, [r6, #0]
 800e542:	1aed      	subeq	r5, r5, r3
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	bf0c      	ite	eq
 800e548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e54c:	2500      	movne	r5, #0
 800e54e:	4293      	cmp	r3, r2
 800e550:	bfc4      	itt	gt
 800e552:	1a9b      	subgt	r3, r3, r2
 800e554:	18ed      	addgt	r5, r5, r3
 800e556:	2600      	movs	r6, #0
 800e558:	341a      	adds	r4, #26
 800e55a:	42b5      	cmp	r5, r6
 800e55c:	d11a      	bne.n	800e594 <_printf_common+0xc8>
 800e55e:	2000      	movs	r0, #0
 800e560:	e008      	b.n	800e574 <_printf_common+0xa8>
 800e562:	2301      	movs	r3, #1
 800e564:	4652      	mov	r2, sl
 800e566:	4641      	mov	r1, r8
 800e568:	4638      	mov	r0, r7
 800e56a:	47c8      	blx	r9
 800e56c:	3001      	adds	r0, #1
 800e56e:	d103      	bne.n	800e578 <_printf_common+0xac>
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e578:	3501      	adds	r5, #1
 800e57a:	e7c6      	b.n	800e50a <_printf_common+0x3e>
 800e57c:	18e1      	adds	r1, r4, r3
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	2030      	movs	r0, #48	@ 0x30
 800e582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e586:	4422      	add	r2, r4
 800e588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e58c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e590:	3302      	adds	r3, #2
 800e592:	e7c7      	b.n	800e524 <_printf_common+0x58>
 800e594:	2301      	movs	r3, #1
 800e596:	4622      	mov	r2, r4
 800e598:	4641      	mov	r1, r8
 800e59a:	4638      	mov	r0, r7
 800e59c:	47c8      	blx	r9
 800e59e:	3001      	adds	r0, #1
 800e5a0:	d0e6      	beq.n	800e570 <_printf_common+0xa4>
 800e5a2:	3601      	adds	r6, #1
 800e5a4:	e7d9      	b.n	800e55a <_printf_common+0x8e>
	...

0800e5a8 <_printf_i>:
 800e5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ac:	7e0f      	ldrb	r7, [r1, #24]
 800e5ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5b0:	2f78      	cmp	r7, #120	@ 0x78
 800e5b2:	4691      	mov	r9, r2
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	469a      	mov	sl, r3
 800e5ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5be:	d807      	bhi.n	800e5d0 <_printf_i+0x28>
 800e5c0:	2f62      	cmp	r7, #98	@ 0x62
 800e5c2:	d80a      	bhi.n	800e5da <_printf_i+0x32>
 800e5c4:	2f00      	cmp	r7, #0
 800e5c6:	f000 80d2 	beq.w	800e76e <_printf_i+0x1c6>
 800e5ca:	2f58      	cmp	r7, #88	@ 0x58
 800e5cc:	f000 80b9 	beq.w	800e742 <_printf_i+0x19a>
 800e5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5d8:	e03a      	b.n	800e650 <_printf_i+0xa8>
 800e5da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5de:	2b15      	cmp	r3, #21
 800e5e0:	d8f6      	bhi.n	800e5d0 <_printf_i+0x28>
 800e5e2:	a101      	add	r1, pc, #4	@ (adr r1, 800e5e8 <_printf_i+0x40>)
 800e5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e8:	0800e641 	.word	0x0800e641
 800e5ec:	0800e655 	.word	0x0800e655
 800e5f0:	0800e5d1 	.word	0x0800e5d1
 800e5f4:	0800e5d1 	.word	0x0800e5d1
 800e5f8:	0800e5d1 	.word	0x0800e5d1
 800e5fc:	0800e5d1 	.word	0x0800e5d1
 800e600:	0800e655 	.word	0x0800e655
 800e604:	0800e5d1 	.word	0x0800e5d1
 800e608:	0800e5d1 	.word	0x0800e5d1
 800e60c:	0800e5d1 	.word	0x0800e5d1
 800e610:	0800e5d1 	.word	0x0800e5d1
 800e614:	0800e755 	.word	0x0800e755
 800e618:	0800e67f 	.word	0x0800e67f
 800e61c:	0800e70f 	.word	0x0800e70f
 800e620:	0800e5d1 	.word	0x0800e5d1
 800e624:	0800e5d1 	.word	0x0800e5d1
 800e628:	0800e777 	.word	0x0800e777
 800e62c:	0800e5d1 	.word	0x0800e5d1
 800e630:	0800e67f 	.word	0x0800e67f
 800e634:	0800e5d1 	.word	0x0800e5d1
 800e638:	0800e5d1 	.word	0x0800e5d1
 800e63c:	0800e717 	.word	0x0800e717
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	1d1a      	adds	r2, r3, #4
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	6032      	str	r2, [r6, #0]
 800e648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e64c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e650:	2301      	movs	r3, #1
 800e652:	e09d      	b.n	800e790 <_printf_i+0x1e8>
 800e654:	6833      	ldr	r3, [r6, #0]
 800e656:	6820      	ldr	r0, [r4, #0]
 800e658:	1d19      	adds	r1, r3, #4
 800e65a:	6031      	str	r1, [r6, #0]
 800e65c:	0606      	lsls	r6, r0, #24
 800e65e:	d501      	bpl.n	800e664 <_printf_i+0xbc>
 800e660:	681d      	ldr	r5, [r3, #0]
 800e662:	e003      	b.n	800e66c <_printf_i+0xc4>
 800e664:	0645      	lsls	r5, r0, #25
 800e666:	d5fb      	bpl.n	800e660 <_printf_i+0xb8>
 800e668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e66c:	2d00      	cmp	r5, #0
 800e66e:	da03      	bge.n	800e678 <_printf_i+0xd0>
 800e670:	232d      	movs	r3, #45	@ 0x2d
 800e672:	426d      	negs	r5, r5
 800e674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e678:	4859      	ldr	r0, [pc, #356]	@ (800e7e0 <_printf_i+0x238>)
 800e67a:	230a      	movs	r3, #10
 800e67c:	e011      	b.n	800e6a2 <_printf_i+0xfa>
 800e67e:	6821      	ldr	r1, [r4, #0]
 800e680:	6833      	ldr	r3, [r6, #0]
 800e682:	0608      	lsls	r0, r1, #24
 800e684:	f853 5b04 	ldr.w	r5, [r3], #4
 800e688:	d402      	bmi.n	800e690 <_printf_i+0xe8>
 800e68a:	0649      	lsls	r1, r1, #25
 800e68c:	bf48      	it	mi
 800e68e:	b2ad      	uxthmi	r5, r5
 800e690:	2f6f      	cmp	r7, #111	@ 0x6f
 800e692:	4853      	ldr	r0, [pc, #332]	@ (800e7e0 <_printf_i+0x238>)
 800e694:	6033      	str	r3, [r6, #0]
 800e696:	bf14      	ite	ne
 800e698:	230a      	movne	r3, #10
 800e69a:	2308      	moveq	r3, #8
 800e69c:	2100      	movs	r1, #0
 800e69e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e6a2:	6866      	ldr	r6, [r4, #4]
 800e6a4:	60a6      	str	r6, [r4, #8]
 800e6a6:	2e00      	cmp	r6, #0
 800e6a8:	bfa2      	ittt	ge
 800e6aa:	6821      	ldrge	r1, [r4, #0]
 800e6ac:	f021 0104 	bicge.w	r1, r1, #4
 800e6b0:	6021      	strge	r1, [r4, #0]
 800e6b2:	b90d      	cbnz	r5, 800e6b8 <_printf_i+0x110>
 800e6b4:	2e00      	cmp	r6, #0
 800e6b6:	d04b      	beq.n	800e750 <_printf_i+0x1a8>
 800e6b8:	4616      	mov	r6, r2
 800e6ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6be:	fb03 5711 	mls	r7, r3, r1, r5
 800e6c2:	5dc7      	ldrb	r7, [r0, r7]
 800e6c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6c8:	462f      	mov	r7, r5
 800e6ca:	42bb      	cmp	r3, r7
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	d9f4      	bls.n	800e6ba <_printf_i+0x112>
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d10b      	bne.n	800e6ec <_printf_i+0x144>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	07df      	lsls	r7, r3, #31
 800e6d8:	d508      	bpl.n	800e6ec <_printf_i+0x144>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	6861      	ldr	r1, [r4, #4]
 800e6de:	4299      	cmp	r1, r3
 800e6e0:	bfde      	ittt	le
 800e6e2:	2330      	movle	r3, #48	@ 0x30
 800e6e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6ec:	1b92      	subs	r2, r2, r6
 800e6ee:	6122      	str	r2, [r4, #16]
 800e6f0:	f8cd a000 	str.w	sl, [sp]
 800e6f4:	464b      	mov	r3, r9
 800e6f6:	aa03      	add	r2, sp, #12
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	f7ff fee6 	bl	800e4cc <_printf_common>
 800e700:	3001      	adds	r0, #1
 800e702:	d14a      	bne.n	800e79a <_printf_i+0x1f2>
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	b004      	add	sp, #16
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	f043 0320 	orr.w	r3, r3, #32
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	4833      	ldr	r0, [pc, #204]	@ (800e7e4 <_printf_i+0x23c>)
 800e718:	2778      	movs	r7, #120	@ 0x78
 800e71a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	6831      	ldr	r1, [r6, #0]
 800e722:	061f      	lsls	r7, r3, #24
 800e724:	f851 5b04 	ldr.w	r5, [r1], #4
 800e728:	d402      	bmi.n	800e730 <_printf_i+0x188>
 800e72a:	065f      	lsls	r7, r3, #25
 800e72c:	bf48      	it	mi
 800e72e:	b2ad      	uxthmi	r5, r5
 800e730:	6031      	str	r1, [r6, #0]
 800e732:	07d9      	lsls	r1, r3, #31
 800e734:	bf44      	itt	mi
 800e736:	f043 0320 	orrmi.w	r3, r3, #32
 800e73a:	6023      	strmi	r3, [r4, #0]
 800e73c:	b11d      	cbz	r5, 800e746 <_printf_i+0x19e>
 800e73e:	2310      	movs	r3, #16
 800e740:	e7ac      	b.n	800e69c <_printf_i+0xf4>
 800e742:	4827      	ldr	r0, [pc, #156]	@ (800e7e0 <_printf_i+0x238>)
 800e744:	e7e9      	b.n	800e71a <_printf_i+0x172>
 800e746:	6823      	ldr	r3, [r4, #0]
 800e748:	f023 0320 	bic.w	r3, r3, #32
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	e7f6      	b.n	800e73e <_printf_i+0x196>
 800e750:	4616      	mov	r6, r2
 800e752:	e7bd      	b.n	800e6d0 <_printf_i+0x128>
 800e754:	6833      	ldr	r3, [r6, #0]
 800e756:	6825      	ldr	r5, [r4, #0]
 800e758:	6961      	ldr	r1, [r4, #20]
 800e75a:	1d18      	adds	r0, r3, #4
 800e75c:	6030      	str	r0, [r6, #0]
 800e75e:	062e      	lsls	r6, r5, #24
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	d501      	bpl.n	800e768 <_printf_i+0x1c0>
 800e764:	6019      	str	r1, [r3, #0]
 800e766:	e002      	b.n	800e76e <_printf_i+0x1c6>
 800e768:	0668      	lsls	r0, r5, #25
 800e76a:	d5fb      	bpl.n	800e764 <_printf_i+0x1bc>
 800e76c:	8019      	strh	r1, [r3, #0]
 800e76e:	2300      	movs	r3, #0
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	4616      	mov	r6, r2
 800e774:	e7bc      	b.n	800e6f0 <_printf_i+0x148>
 800e776:	6833      	ldr	r3, [r6, #0]
 800e778:	1d1a      	adds	r2, r3, #4
 800e77a:	6032      	str	r2, [r6, #0]
 800e77c:	681e      	ldr	r6, [r3, #0]
 800e77e:	6862      	ldr	r2, [r4, #4]
 800e780:	2100      	movs	r1, #0
 800e782:	4630      	mov	r0, r6
 800e784:	f7f1 fdc4 	bl	8000310 <memchr>
 800e788:	b108      	cbz	r0, 800e78e <_printf_i+0x1e6>
 800e78a:	1b80      	subs	r0, r0, r6
 800e78c:	6060      	str	r0, [r4, #4]
 800e78e:	6863      	ldr	r3, [r4, #4]
 800e790:	6123      	str	r3, [r4, #16]
 800e792:	2300      	movs	r3, #0
 800e794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e798:	e7aa      	b.n	800e6f0 <_printf_i+0x148>
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	4632      	mov	r2, r6
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	47d0      	blx	sl
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d0ad      	beq.n	800e704 <_printf_i+0x15c>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	079b      	lsls	r3, r3, #30
 800e7ac:	d413      	bmi.n	800e7d6 <_printf_i+0x22e>
 800e7ae:	68e0      	ldr	r0, [r4, #12]
 800e7b0:	9b03      	ldr	r3, [sp, #12]
 800e7b2:	4298      	cmp	r0, r3
 800e7b4:	bfb8      	it	lt
 800e7b6:	4618      	movlt	r0, r3
 800e7b8:	e7a6      	b.n	800e708 <_printf_i+0x160>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	4632      	mov	r2, r6
 800e7be:	4649      	mov	r1, r9
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	47d0      	blx	sl
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	d09d      	beq.n	800e704 <_printf_i+0x15c>
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	68e3      	ldr	r3, [r4, #12]
 800e7cc:	9903      	ldr	r1, [sp, #12]
 800e7ce:	1a5b      	subs	r3, r3, r1
 800e7d0:	42ab      	cmp	r3, r5
 800e7d2:	dcf2      	bgt.n	800e7ba <_printf_i+0x212>
 800e7d4:	e7eb      	b.n	800e7ae <_printf_i+0x206>
 800e7d6:	2500      	movs	r5, #0
 800e7d8:	f104 0619 	add.w	r6, r4, #25
 800e7dc:	e7f5      	b.n	800e7ca <_printf_i+0x222>
 800e7de:	bf00      	nop
 800e7e0:	08010827 	.word	0x08010827
 800e7e4:	08010838 	.word	0x08010838

0800e7e8 <std>:
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7f6:	6083      	str	r3, [r0, #8]
 800e7f8:	8181      	strh	r1, [r0, #12]
 800e7fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e7fc:	81c2      	strh	r2, [r0, #14]
 800e7fe:	6183      	str	r3, [r0, #24]
 800e800:	4619      	mov	r1, r3
 800e802:	2208      	movs	r2, #8
 800e804:	305c      	adds	r0, #92	@ 0x5c
 800e806:	f000 f8f4 	bl	800e9f2 <memset>
 800e80a:	4b0d      	ldr	r3, [pc, #52]	@ (800e840 <std+0x58>)
 800e80c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e80e:	4b0d      	ldr	r3, [pc, #52]	@ (800e844 <std+0x5c>)
 800e810:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e812:	4b0d      	ldr	r3, [pc, #52]	@ (800e848 <std+0x60>)
 800e814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e816:	4b0d      	ldr	r3, [pc, #52]	@ (800e84c <std+0x64>)
 800e818:	6323      	str	r3, [r4, #48]	@ 0x30
 800e81a:	4b0d      	ldr	r3, [pc, #52]	@ (800e850 <std+0x68>)
 800e81c:	6224      	str	r4, [r4, #32]
 800e81e:	429c      	cmp	r4, r3
 800e820:	d006      	beq.n	800e830 <std+0x48>
 800e822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e826:	4294      	cmp	r4, r2
 800e828:	d002      	beq.n	800e830 <std+0x48>
 800e82a:	33d0      	adds	r3, #208	@ 0xd0
 800e82c:	429c      	cmp	r4, r3
 800e82e:	d105      	bne.n	800e83c <std+0x54>
 800e830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e838:	f000 b958 	b.w	800eaec <__retarget_lock_init_recursive>
 800e83c:	bd10      	pop	{r4, pc}
 800e83e:	bf00      	nop
 800e840:	0800e96d 	.word	0x0800e96d
 800e844:	0800e98f 	.word	0x0800e98f
 800e848:	0800e9c7 	.word	0x0800e9c7
 800e84c:	0800e9eb 	.word	0x0800e9eb
 800e850:	240005e4 	.word	0x240005e4

0800e854 <stdio_exit_handler>:
 800e854:	4a02      	ldr	r2, [pc, #8]	@ (800e860 <stdio_exit_handler+0xc>)
 800e856:	4903      	ldr	r1, [pc, #12]	@ (800e864 <stdio_exit_handler+0x10>)
 800e858:	4803      	ldr	r0, [pc, #12]	@ (800e868 <stdio_exit_handler+0x14>)
 800e85a:	f000 b869 	b.w	800e930 <_fwalk_sglue>
 800e85e:	bf00      	nop
 800e860:	24000020 	.word	0x24000020
 800e864:	080100c1 	.word	0x080100c1
 800e868:	24000030 	.word	0x24000030

0800e86c <cleanup_stdio>:
 800e86c:	6841      	ldr	r1, [r0, #4]
 800e86e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a0 <cleanup_stdio+0x34>)
 800e870:	4299      	cmp	r1, r3
 800e872:	b510      	push	{r4, lr}
 800e874:	4604      	mov	r4, r0
 800e876:	d001      	beq.n	800e87c <cleanup_stdio+0x10>
 800e878:	f001 fc22 	bl	80100c0 <_fflush_r>
 800e87c:	68a1      	ldr	r1, [r4, #8]
 800e87e:	4b09      	ldr	r3, [pc, #36]	@ (800e8a4 <cleanup_stdio+0x38>)
 800e880:	4299      	cmp	r1, r3
 800e882:	d002      	beq.n	800e88a <cleanup_stdio+0x1e>
 800e884:	4620      	mov	r0, r4
 800e886:	f001 fc1b 	bl	80100c0 <_fflush_r>
 800e88a:	68e1      	ldr	r1, [r4, #12]
 800e88c:	4b06      	ldr	r3, [pc, #24]	@ (800e8a8 <cleanup_stdio+0x3c>)
 800e88e:	4299      	cmp	r1, r3
 800e890:	d004      	beq.n	800e89c <cleanup_stdio+0x30>
 800e892:	4620      	mov	r0, r4
 800e894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e898:	f001 bc12 	b.w	80100c0 <_fflush_r>
 800e89c:	bd10      	pop	{r4, pc}
 800e89e:	bf00      	nop
 800e8a0:	240005e4 	.word	0x240005e4
 800e8a4:	2400064c 	.word	0x2400064c
 800e8a8:	240006b4 	.word	0x240006b4

0800e8ac <global_stdio_init.part.0>:
 800e8ac:	b510      	push	{r4, lr}
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e8dc <global_stdio_init.part.0+0x30>)
 800e8b0:	4c0b      	ldr	r4, [pc, #44]	@ (800e8e0 <global_stdio_init.part.0+0x34>)
 800e8b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e8e4 <global_stdio_init.part.0+0x38>)
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2104      	movs	r1, #4
 800e8bc:	f7ff ff94 	bl	800e7e8 <std>
 800e8c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	2109      	movs	r1, #9
 800e8c8:	f7ff ff8e 	bl	800e7e8 <std>
 800e8cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8d6:	2112      	movs	r1, #18
 800e8d8:	f7ff bf86 	b.w	800e7e8 <std>
 800e8dc:	2400071c 	.word	0x2400071c
 800e8e0:	240005e4 	.word	0x240005e4
 800e8e4:	0800e855 	.word	0x0800e855

0800e8e8 <__sfp_lock_acquire>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	@ (800e8f0 <__sfp_lock_acquire+0x8>)
 800e8ea:	f000 b900 	b.w	800eaee <__retarget_lock_acquire_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	24000725 	.word	0x24000725

0800e8f4 <__sfp_lock_release>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	@ (800e8fc <__sfp_lock_release+0x8>)
 800e8f6:	f000 b8fb 	b.w	800eaf0 <__retarget_lock_release_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	24000725 	.word	0x24000725

0800e900 <__sinit>:
 800e900:	b510      	push	{r4, lr}
 800e902:	4604      	mov	r4, r0
 800e904:	f7ff fff0 	bl	800e8e8 <__sfp_lock_acquire>
 800e908:	6a23      	ldr	r3, [r4, #32]
 800e90a:	b11b      	cbz	r3, 800e914 <__sinit+0x14>
 800e90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e910:	f7ff bff0 	b.w	800e8f4 <__sfp_lock_release>
 800e914:	4b04      	ldr	r3, [pc, #16]	@ (800e928 <__sinit+0x28>)
 800e916:	6223      	str	r3, [r4, #32]
 800e918:	4b04      	ldr	r3, [pc, #16]	@ (800e92c <__sinit+0x2c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1f5      	bne.n	800e90c <__sinit+0xc>
 800e920:	f7ff ffc4 	bl	800e8ac <global_stdio_init.part.0>
 800e924:	e7f2      	b.n	800e90c <__sinit+0xc>
 800e926:	bf00      	nop
 800e928:	0800e86d 	.word	0x0800e86d
 800e92c:	2400071c 	.word	0x2400071c

0800e930 <_fwalk_sglue>:
 800e930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e934:	4607      	mov	r7, r0
 800e936:	4688      	mov	r8, r1
 800e938:	4614      	mov	r4, r2
 800e93a:	2600      	movs	r6, #0
 800e93c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e940:	f1b9 0901 	subs.w	r9, r9, #1
 800e944:	d505      	bpl.n	800e952 <_fwalk_sglue+0x22>
 800e946:	6824      	ldr	r4, [r4, #0]
 800e948:	2c00      	cmp	r4, #0
 800e94a:	d1f7      	bne.n	800e93c <_fwalk_sglue+0xc>
 800e94c:	4630      	mov	r0, r6
 800e94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e952:	89ab      	ldrh	r3, [r5, #12]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d907      	bls.n	800e968 <_fwalk_sglue+0x38>
 800e958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e95c:	3301      	adds	r3, #1
 800e95e:	d003      	beq.n	800e968 <_fwalk_sglue+0x38>
 800e960:	4629      	mov	r1, r5
 800e962:	4638      	mov	r0, r7
 800e964:	47c0      	blx	r8
 800e966:	4306      	orrs	r6, r0
 800e968:	3568      	adds	r5, #104	@ 0x68
 800e96a:	e7e9      	b.n	800e940 <_fwalk_sglue+0x10>

0800e96c <__sread>:
 800e96c:	b510      	push	{r4, lr}
 800e96e:	460c      	mov	r4, r1
 800e970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e974:	f000 f86c 	bl	800ea50 <_read_r>
 800e978:	2800      	cmp	r0, #0
 800e97a:	bfab      	itete	ge
 800e97c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e97e:	89a3      	ldrhlt	r3, [r4, #12]
 800e980:	181b      	addge	r3, r3, r0
 800e982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e986:	bfac      	ite	ge
 800e988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e98a:	81a3      	strhlt	r3, [r4, #12]
 800e98c:	bd10      	pop	{r4, pc}

0800e98e <__swrite>:
 800e98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e992:	461f      	mov	r7, r3
 800e994:	898b      	ldrh	r3, [r1, #12]
 800e996:	05db      	lsls	r3, r3, #23
 800e998:	4605      	mov	r5, r0
 800e99a:	460c      	mov	r4, r1
 800e99c:	4616      	mov	r6, r2
 800e99e:	d505      	bpl.n	800e9ac <__swrite+0x1e>
 800e9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f000 f840 	bl	800ea2c <_lseek_r>
 800e9ac:	89a3      	ldrh	r3, [r4, #12]
 800e9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e9b6:	81a3      	strh	r3, [r4, #12]
 800e9b8:	4632      	mov	r2, r6
 800e9ba:	463b      	mov	r3, r7
 800e9bc:	4628      	mov	r0, r5
 800e9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c2:	f000 b857 	b.w	800ea74 <_write_r>

0800e9c6 <__sseek>:
 800e9c6:	b510      	push	{r4, lr}
 800e9c8:	460c      	mov	r4, r1
 800e9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ce:	f000 f82d 	bl	800ea2c <_lseek_r>
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	bf15      	itete	ne
 800e9d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e9da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9e2:	81a3      	strheq	r3, [r4, #12]
 800e9e4:	bf18      	it	ne
 800e9e6:	81a3      	strhne	r3, [r4, #12]
 800e9e8:	bd10      	pop	{r4, pc}

0800e9ea <__sclose>:
 800e9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ee:	f000 b80d 	b.w	800ea0c <_close_r>

0800e9f2 <memset>:
 800e9f2:	4402      	add	r2, r0
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d100      	bne.n	800e9fc <memset+0xa>
 800e9fa:	4770      	bx	lr
 800e9fc:	f803 1b01 	strb.w	r1, [r3], #1
 800ea00:	e7f9      	b.n	800e9f6 <memset+0x4>
	...

0800ea04 <_localeconv_r>:
 800ea04:	4800      	ldr	r0, [pc, #0]	@ (800ea08 <_localeconv_r+0x4>)
 800ea06:	4770      	bx	lr
 800ea08:	2400016c 	.word	0x2400016c

0800ea0c <_close_r>:
 800ea0c:	b538      	push	{r3, r4, r5, lr}
 800ea0e:	4d06      	ldr	r5, [pc, #24]	@ (800ea28 <_close_r+0x1c>)
 800ea10:	2300      	movs	r3, #0
 800ea12:	4604      	mov	r4, r0
 800ea14:	4608      	mov	r0, r1
 800ea16:	602b      	str	r3, [r5, #0]
 800ea18:	f7f2 ff80 	bl	800191c <_close>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_close_r+0x1a>
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_close_r+0x1a>
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	24000720 	.word	0x24000720

0800ea2c <_lseek_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d07      	ldr	r5, [pc, #28]	@ (800ea4c <_lseek_r+0x20>)
 800ea30:	4604      	mov	r4, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	4611      	mov	r1, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f7f2 ff95 	bl	800196a <_lseek>
 800ea40:	1c43      	adds	r3, r0, #1
 800ea42:	d102      	bne.n	800ea4a <_lseek_r+0x1e>
 800ea44:	682b      	ldr	r3, [r5, #0]
 800ea46:	b103      	cbz	r3, 800ea4a <_lseek_r+0x1e>
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	bd38      	pop	{r3, r4, r5, pc}
 800ea4c:	24000720 	.word	0x24000720

0800ea50 <_read_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4d07      	ldr	r5, [pc, #28]	@ (800ea70 <_read_r+0x20>)
 800ea54:	4604      	mov	r4, r0
 800ea56:	4608      	mov	r0, r1
 800ea58:	4611      	mov	r1, r2
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	602a      	str	r2, [r5, #0]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	f7f2 ff23 	bl	80018aa <_read>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_read_r+0x1e>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_read_r+0x1e>
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	24000720 	.word	0x24000720

0800ea74 <_write_r>:
 800ea74:	b538      	push	{r3, r4, r5, lr}
 800ea76:	4d07      	ldr	r5, [pc, #28]	@ (800ea94 <_write_r+0x20>)
 800ea78:	4604      	mov	r4, r0
 800ea7a:	4608      	mov	r0, r1
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	2200      	movs	r2, #0
 800ea80:	602a      	str	r2, [r5, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	f7f2 ff2e 	bl	80018e4 <_write>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d102      	bne.n	800ea92 <_write_r+0x1e>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	b103      	cbz	r3, 800ea92 <_write_r+0x1e>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	24000720 	.word	0x24000720

0800ea98 <__errno>:
 800ea98:	4b01      	ldr	r3, [pc, #4]	@ (800eaa0 <__errno+0x8>)
 800ea9a:	6818      	ldr	r0, [r3, #0]
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	2400002c 	.word	0x2400002c

0800eaa4 <__libc_init_array>:
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	4d0d      	ldr	r5, [pc, #52]	@ (800eadc <__libc_init_array+0x38>)
 800eaa8:	4c0d      	ldr	r4, [pc, #52]	@ (800eae0 <__libc_init_array+0x3c>)
 800eaaa:	1b64      	subs	r4, r4, r5
 800eaac:	10a4      	asrs	r4, r4, #2
 800eaae:	2600      	movs	r6, #0
 800eab0:	42a6      	cmp	r6, r4
 800eab2:	d109      	bne.n	800eac8 <__libc_init_array+0x24>
 800eab4:	4d0b      	ldr	r5, [pc, #44]	@ (800eae4 <__libc_init_array+0x40>)
 800eab6:	4c0c      	ldr	r4, [pc, #48]	@ (800eae8 <__libc_init_array+0x44>)
 800eab8:	f001 fe50 	bl	801075c <_init>
 800eabc:	1b64      	subs	r4, r4, r5
 800eabe:	10a4      	asrs	r4, r4, #2
 800eac0:	2600      	movs	r6, #0
 800eac2:	42a6      	cmp	r6, r4
 800eac4:	d105      	bne.n	800ead2 <__libc_init_array+0x2e>
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eacc:	4798      	blx	r3
 800eace:	3601      	adds	r6, #1
 800ead0:	e7ee      	b.n	800eab0 <__libc_init_array+0xc>
 800ead2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ead6:	4798      	blx	r3
 800ead8:	3601      	adds	r6, #1
 800eada:	e7f2      	b.n	800eac2 <__libc_init_array+0x1e>
 800eadc:	08010b90 	.word	0x08010b90
 800eae0:	08010b90 	.word	0x08010b90
 800eae4:	08010b90 	.word	0x08010b90
 800eae8:	08010b94 	.word	0x08010b94

0800eaec <__retarget_lock_init_recursive>:
 800eaec:	4770      	bx	lr

0800eaee <__retarget_lock_acquire_recursive>:
 800eaee:	4770      	bx	lr

0800eaf0 <__retarget_lock_release_recursive>:
 800eaf0:	4770      	bx	lr

0800eaf2 <quorem>:
 800eaf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf6:	6903      	ldr	r3, [r0, #16]
 800eaf8:	690c      	ldr	r4, [r1, #16]
 800eafa:	42a3      	cmp	r3, r4
 800eafc:	4607      	mov	r7, r0
 800eafe:	db7e      	blt.n	800ebfe <quorem+0x10c>
 800eb00:	3c01      	subs	r4, #1
 800eb02:	f101 0814 	add.w	r8, r1, #20
 800eb06:	00a3      	lsls	r3, r4, #2
 800eb08:	f100 0514 	add.w	r5, r0, #20
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb12:	9301      	str	r3, [sp, #4]
 800eb14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb24:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb28:	d32e      	bcc.n	800eb88 <quorem+0x96>
 800eb2a:	f04f 0a00 	mov.w	sl, #0
 800eb2e:	46c4      	mov	ip, r8
 800eb30:	46ae      	mov	lr, r5
 800eb32:	46d3      	mov	fp, sl
 800eb34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb38:	b298      	uxth	r0, r3
 800eb3a:	fb06 a000 	mla	r0, r6, r0, sl
 800eb3e:	0c02      	lsrs	r2, r0, #16
 800eb40:	0c1b      	lsrs	r3, r3, #16
 800eb42:	fb06 2303 	mla	r3, r6, r3, r2
 800eb46:	f8de 2000 	ldr.w	r2, [lr]
 800eb4a:	b280      	uxth	r0, r0
 800eb4c:	b292      	uxth	r2, r2
 800eb4e:	1a12      	subs	r2, r2, r0
 800eb50:	445a      	add	r2, fp
 800eb52:	f8de 0000 	ldr.w	r0, [lr]
 800eb56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eb60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eb64:	b292      	uxth	r2, r2
 800eb66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eb6a:	45e1      	cmp	r9, ip
 800eb6c:	f84e 2b04 	str.w	r2, [lr], #4
 800eb70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eb74:	d2de      	bcs.n	800eb34 <quorem+0x42>
 800eb76:	9b00      	ldr	r3, [sp, #0]
 800eb78:	58eb      	ldr	r3, [r5, r3]
 800eb7a:	b92b      	cbnz	r3, 800eb88 <quorem+0x96>
 800eb7c:	9b01      	ldr	r3, [sp, #4]
 800eb7e:	3b04      	subs	r3, #4
 800eb80:	429d      	cmp	r5, r3
 800eb82:	461a      	mov	r2, r3
 800eb84:	d32f      	bcc.n	800ebe6 <quorem+0xf4>
 800eb86:	613c      	str	r4, [r7, #16]
 800eb88:	4638      	mov	r0, r7
 800eb8a:	f001 f90d 	bl	800fda8 <__mcmp>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	db25      	blt.n	800ebde <quorem+0xec>
 800eb92:	4629      	mov	r1, r5
 800eb94:	2000      	movs	r0, #0
 800eb96:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb9a:	f8d1 c000 	ldr.w	ip, [r1]
 800eb9e:	fa1f fe82 	uxth.w	lr, r2
 800eba2:	fa1f f38c 	uxth.w	r3, ip
 800eba6:	eba3 030e 	sub.w	r3, r3, lr
 800ebaa:	4403      	add	r3, r0
 800ebac:	0c12      	lsrs	r2, r2, #16
 800ebae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ebb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebbc:	45c1      	cmp	r9, r8
 800ebbe:	f841 3b04 	str.w	r3, [r1], #4
 800ebc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ebc6:	d2e6      	bcs.n	800eb96 <quorem+0xa4>
 800ebc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebd0:	b922      	cbnz	r2, 800ebdc <quorem+0xea>
 800ebd2:	3b04      	subs	r3, #4
 800ebd4:	429d      	cmp	r5, r3
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	d30b      	bcc.n	800ebf2 <quorem+0x100>
 800ebda:	613c      	str	r4, [r7, #16]
 800ebdc:	3601      	adds	r6, #1
 800ebde:	4630      	mov	r0, r6
 800ebe0:	b003      	add	sp, #12
 800ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe6:	6812      	ldr	r2, [r2, #0]
 800ebe8:	3b04      	subs	r3, #4
 800ebea:	2a00      	cmp	r2, #0
 800ebec:	d1cb      	bne.n	800eb86 <quorem+0x94>
 800ebee:	3c01      	subs	r4, #1
 800ebf0:	e7c6      	b.n	800eb80 <quorem+0x8e>
 800ebf2:	6812      	ldr	r2, [r2, #0]
 800ebf4:	3b04      	subs	r3, #4
 800ebf6:	2a00      	cmp	r2, #0
 800ebf8:	d1ef      	bne.n	800ebda <quorem+0xe8>
 800ebfa:	3c01      	subs	r4, #1
 800ebfc:	e7ea      	b.n	800ebd4 <quorem+0xe2>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	e7ee      	b.n	800ebe0 <quorem+0xee>
 800ec02:	0000      	movs	r0, r0
 800ec04:	0000      	movs	r0, r0
	...

0800ec08 <_dtoa_r>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	ed2d 8b02 	vpush	{d8}
 800ec10:	69c7      	ldr	r7, [r0, #28]
 800ec12:	b091      	sub	sp, #68	@ 0x44
 800ec14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec18:	ec55 4b10 	vmov	r4, r5, d0
 800ec1c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ec1e:	9107      	str	r1, [sp, #28]
 800ec20:	4681      	mov	r9, r0
 800ec22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec24:	930d      	str	r3, [sp, #52]	@ 0x34
 800ec26:	b97f      	cbnz	r7, 800ec48 <_dtoa_r+0x40>
 800ec28:	2010      	movs	r0, #16
 800ec2a:	f000 fd8d 	bl	800f748 <malloc>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	f8c9 001c 	str.w	r0, [r9, #28]
 800ec34:	b920      	cbnz	r0, 800ec40 <_dtoa_r+0x38>
 800ec36:	4ba0      	ldr	r3, [pc, #640]	@ (800eeb8 <_dtoa_r+0x2b0>)
 800ec38:	21ef      	movs	r1, #239	@ 0xef
 800ec3a:	48a0      	ldr	r0, [pc, #640]	@ (800eebc <_dtoa_r+0x2b4>)
 800ec3c:	f001 fa86 	bl	801014c <__assert_func>
 800ec40:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ec44:	6007      	str	r7, [r0, #0]
 800ec46:	60c7      	str	r7, [r0, #12]
 800ec48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec4c:	6819      	ldr	r1, [r3, #0]
 800ec4e:	b159      	cbz	r1, 800ec68 <_dtoa_r+0x60>
 800ec50:	685a      	ldr	r2, [r3, #4]
 800ec52:	604a      	str	r2, [r1, #4]
 800ec54:	2301      	movs	r3, #1
 800ec56:	4093      	lsls	r3, r2
 800ec58:	608b      	str	r3, [r1, #8]
 800ec5a:	4648      	mov	r0, r9
 800ec5c:	f000 fe6a 	bl	800f934 <_Bfree>
 800ec60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec64:	2200      	movs	r2, #0
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	1e2b      	subs	r3, r5, #0
 800ec6a:	bfbb      	ittet	lt
 800ec6c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ec70:	9303      	strlt	r3, [sp, #12]
 800ec72:	2300      	movge	r3, #0
 800ec74:	2201      	movlt	r2, #1
 800ec76:	bfac      	ite	ge
 800ec78:	6033      	strge	r3, [r6, #0]
 800ec7a:	6032      	strlt	r2, [r6, #0]
 800ec7c:	4b90      	ldr	r3, [pc, #576]	@ (800eec0 <_dtoa_r+0x2b8>)
 800ec7e:	9e03      	ldr	r6, [sp, #12]
 800ec80:	43b3      	bics	r3, r6
 800ec82:	d110      	bne.n	800eca6 <_dtoa_r+0x9e>
 800ec84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec86:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ec90:	4323      	orrs	r3, r4
 800ec92:	f000 84de 	beq.w	800f652 <_dtoa_r+0xa4a>
 800ec96:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ec98:	4f8a      	ldr	r7, [pc, #552]	@ (800eec4 <_dtoa_r+0x2bc>)
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	f000 84e0 	beq.w	800f660 <_dtoa_r+0xa58>
 800eca0:	1cfb      	adds	r3, r7, #3
 800eca2:	f000 bcdb 	b.w	800f65c <_dtoa_r+0xa54>
 800eca6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ecaa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	d10a      	bne.n	800ecca <_dtoa_r+0xc2>
 800ecb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ecbc:	b113      	cbz	r3, 800ecc4 <_dtoa_r+0xbc>
 800ecbe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ecc0:	4b81      	ldr	r3, [pc, #516]	@ (800eec8 <_dtoa_r+0x2c0>)
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	4f81      	ldr	r7, [pc, #516]	@ (800eecc <_dtoa_r+0x2c4>)
 800ecc6:	f000 bccb 	b.w	800f660 <_dtoa_r+0xa58>
 800ecca:	aa0e      	add	r2, sp, #56	@ 0x38
 800eccc:	a90f      	add	r1, sp, #60	@ 0x3c
 800ecce:	4648      	mov	r0, r9
 800ecd0:	eeb0 0b48 	vmov.f64	d0, d8
 800ecd4:	f001 f918 	bl	800ff08 <__d2b>
 800ecd8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ecdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecde:	9001      	str	r0, [sp, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d045      	beq.n	800ed70 <_dtoa_r+0x168>
 800ece4:	eeb0 7b48 	vmov.f64	d7, d8
 800ece8:	ee18 1a90 	vmov	r1, s17
 800ecec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ecf0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ecf4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ecf8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ecfc:	2500      	movs	r5, #0
 800ecfe:	ee07 1a90 	vmov	s15, r1
 800ed02:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ed06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800eea0 <_dtoa_r+0x298>
 800ed0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed0e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800eea8 <_dtoa_r+0x2a0>
 800ed12:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ed16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800eeb0 <_dtoa_r+0x2a8>
 800ed1a:	ee07 3a90 	vmov	s15, r3
 800ed1e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ed22:	eeb0 7b46 	vmov.f64	d7, d6
 800ed26:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ed2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ed2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	ee16 8a90 	vmov	r8, s13
 800ed3a:	d508      	bpl.n	800ed4e <_dtoa_r+0x146>
 800ed3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ed40:	eeb4 6b47 	vcmp.f64	d6, d7
 800ed44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed48:	bf18      	it	ne
 800ed4a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ed4e:	f1b8 0f16 	cmp.w	r8, #22
 800ed52:	d82b      	bhi.n	800edac <_dtoa_r+0x1a4>
 800ed54:	495e      	ldr	r1, [pc, #376]	@ (800eed0 <_dtoa_r+0x2c8>)
 800ed56:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ed5a:	ed91 7b00 	vldr	d7, [r1]
 800ed5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ed62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed66:	d501      	bpl.n	800ed6c <_dtoa_r+0x164>
 800ed68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	e01e      	b.n	800edae <_dtoa_r+0x1a6>
 800ed70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed72:	4413      	add	r3, r2
 800ed74:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ed78:	2920      	cmp	r1, #32
 800ed7a:	bfc1      	itttt	gt
 800ed7c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ed80:	408e      	lslgt	r6, r1
 800ed82:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ed86:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ed8a:	bfd6      	itet	le
 800ed8c:	f1c1 0120 	rsble	r1, r1, #32
 800ed90:	4331      	orrgt	r1, r6
 800ed92:	fa04 f101 	lslle.w	r1, r4, r1
 800ed96:	ee07 1a90 	vmov	s15, r1
 800ed9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	ee17 1a90 	vmov	r1, s15
 800eda4:	2501      	movs	r5, #1
 800eda6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800edaa:	e7a8      	b.n	800ecfe <_dtoa_r+0xf6>
 800edac:	2101      	movs	r1, #1
 800edae:	1ad2      	subs	r2, r2, r3
 800edb0:	1e53      	subs	r3, r2, #1
 800edb2:	9306      	str	r3, [sp, #24]
 800edb4:	bf45      	ittet	mi
 800edb6:	f1c2 0301 	rsbmi	r3, r2, #1
 800edba:	9305      	strmi	r3, [sp, #20]
 800edbc:	2300      	movpl	r3, #0
 800edbe:	2300      	movmi	r3, #0
 800edc0:	bf4c      	ite	mi
 800edc2:	9306      	strmi	r3, [sp, #24]
 800edc4:	9305      	strpl	r3, [sp, #20]
 800edc6:	f1b8 0f00 	cmp.w	r8, #0
 800edca:	910c      	str	r1, [sp, #48]	@ 0x30
 800edcc:	db18      	blt.n	800ee00 <_dtoa_r+0x1f8>
 800edce:	9b06      	ldr	r3, [sp, #24]
 800edd0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800edd4:	4443      	add	r3, r8
 800edd6:	9306      	str	r3, [sp, #24]
 800edd8:	2300      	movs	r3, #0
 800edda:	9a07      	ldr	r2, [sp, #28]
 800eddc:	2a09      	cmp	r2, #9
 800edde:	d849      	bhi.n	800ee74 <_dtoa_r+0x26c>
 800ede0:	2a05      	cmp	r2, #5
 800ede2:	bfc4      	itt	gt
 800ede4:	3a04      	subgt	r2, #4
 800ede6:	9207      	strgt	r2, [sp, #28]
 800ede8:	9a07      	ldr	r2, [sp, #28]
 800edea:	f1a2 0202 	sub.w	r2, r2, #2
 800edee:	bfcc      	ite	gt
 800edf0:	2400      	movgt	r4, #0
 800edf2:	2401      	movle	r4, #1
 800edf4:	2a03      	cmp	r2, #3
 800edf6:	d848      	bhi.n	800ee8a <_dtoa_r+0x282>
 800edf8:	e8df f002 	tbb	[pc, r2]
 800edfc:	3a2c2e0b 	.word	0x3a2c2e0b
 800ee00:	9b05      	ldr	r3, [sp, #20]
 800ee02:	2200      	movs	r2, #0
 800ee04:	eba3 0308 	sub.w	r3, r3, r8
 800ee08:	9305      	str	r3, [sp, #20]
 800ee0a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ee0c:	f1c8 0300 	rsb	r3, r8, #0
 800ee10:	e7e3      	b.n	800edda <_dtoa_r+0x1d2>
 800ee12:	2200      	movs	r2, #0
 800ee14:	9208      	str	r2, [sp, #32]
 800ee16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee18:	2a00      	cmp	r2, #0
 800ee1a:	dc39      	bgt.n	800ee90 <_dtoa_r+0x288>
 800ee1c:	f04f 0b01 	mov.w	fp, #1
 800ee20:	46da      	mov	sl, fp
 800ee22:	465a      	mov	r2, fp
 800ee24:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ee28:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	2004      	movs	r0, #4
 800ee30:	f100 0614 	add.w	r6, r0, #20
 800ee34:	4296      	cmp	r6, r2
 800ee36:	d930      	bls.n	800ee9a <_dtoa_r+0x292>
 800ee38:	6079      	str	r1, [r7, #4]
 800ee3a:	4648      	mov	r0, r9
 800ee3c:	9304      	str	r3, [sp, #16]
 800ee3e:	f000 fd39 	bl	800f8b4 <_Balloc>
 800ee42:	9b04      	ldr	r3, [sp, #16]
 800ee44:	4607      	mov	r7, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d146      	bne.n	800eed8 <_dtoa_r+0x2d0>
 800ee4a:	4b22      	ldr	r3, [pc, #136]	@ (800eed4 <_dtoa_r+0x2cc>)
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ee52:	e6f2      	b.n	800ec3a <_dtoa_r+0x32>
 800ee54:	2201      	movs	r2, #1
 800ee56:	e7dd      	b.n	800ee14 <_dtoa_r+0x20c>
 800ee58:	2200      	movs	r2, #0
 800ee5a:	9208      	str	r2, [sp, #32]
 800ee5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee5e:	eb08 0b02 	add.w	fp, r8, r2
 800ee62:	f10b 0a01 	add.w	sl, fp, #1
 800ee66:	4652      	mov	r2, sl
 800ee68:	2a01      	cmp	r2, #1
 800ee6a:	bfb8      	it	lt
 800ee6c:	2201      	movlt	r2, #1
 800ee6e:	e7db      	b.n	800ee28 <_dtoa_r+0x220>
 800ee70:	2201      	movs	r2, #1
 800ee72:	e7f2      	b.n	800ee5a <_dtoa_r+0x252>
 800ee74:	2401      	movs	r4, #1
 800ee76:	2200      	movs	r2, #0
 800ee78:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ee7c:	f04f 3bff 	mov.w	fp, #4294967295
 800ee80:	2100      	movs	r1, #0
 800ee82:	46da      	mov	sl, fp
 800ee84:	2212      	movs	r2, #18
 800ee86:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee88:	e7ce      	b.n	800ee28 <_dtoa_r+0x220>
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	9208      	str	r2, [sp, #32]
 800ee8e:	e7f5      	b.n	800ee7c <_dtoa_r+0x274>
 800ee90:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ee94:	46da      	mov	sl, fp
 800ee96:	465a      	mov	r2, fp
 800ee98:	e7c6      	b.n	800ee28 <_dtoa_r+0x220>
 800ee9a:	3101      	adds	r1, #1
 800ee9c:	0040      	lsls	r0, r0, #1
 800ee9e:	e7c7      	b.n	800ee30 <_dtoa_r+0x228>
 800eea0:	636f4361 	.word	0x636f4361
 800eea4:	3fd287a7 	.word	0x3fd287a7
 800eea8:	8b60c8b3 	.word	0x8b60c8b3
 800eeac:	3fc68a28 	.word	0x3fc68a28
 800eeb0:	509f79fb 	.word	0x509f79fb
 800eeb4:	3fd34413 	.word	0x3fd34413
 800eeb8:	08010856 	.word	0x08010856
 800eebc:	0801086d 	.word	0x0801086d
 800eec0:	7ff00000 	.word	0x7ff00000
 800eec4:	08010852 	.word	0x08010852
 800eec8:	08010826 	.word	0x08010826
 800eecc:	08010825 	.word	0x08010825
 800eed0:	08010968 	.word	0x08010968
 800eed4:	080108c5 	.word	0x080108c5
 800eed8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800eedc:	f1ba 0f0e 	cmp.w	sl, #14
 800eee0:	6010      	str	r0, [r2, #0]
 800eee2:	d86f      	bhi.n	800efc4 <_dtoa_r+0x3bc>
 800eee4:	2c00      	cmp	r4, #0
 800eee6:	d06d      	beq.n	800efc4 <_dtoa_r+0x3bc>
 800eee8:	f1b8 0f00 	cmp.w	r8, #0
 800eeec:	f340 80c2 	ble.w	800f074 <_dtoa_r+0x46c>
 800eef0:	4aca      	ldr	r2, [pc, #808]	@ (800f21c <_dtoa_r+0x614>)
 800eef2:	f008 010f 	and.w	r1, r8, #15
 800eef6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800eefa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800eefe:	ed92 7b00 	vldr	d7, [r2]
 800ef02:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ef06:	f000 80a9 	beq.w	800f05c <_dtoa_r+0x454>
 800ef0a:	4ac5      	ldr	r2, [pc, #788]	@ (800f220 <_dtoa_r+0x618>)
 800ef0c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ef10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ef14:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef18:	f001 010f 	and.w	r1, r1, #15
 800ef1c:	2203      	movs	r2, #3
 800ef1e:	48c0      	ldr	r0, [pc, #768]	@ (800f220 <_dtoa_r+0x618>)
 800ef20:	2900      	cmp	r1, #0
 800ef22:	f040 809d 	bne.w	800f060 <_dtoa_r+0x458>
 800ef26:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ef2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef38:	2900      	cmp	r1, #0
 800ef3a:	f000 80c1 	beq.w	800f0c0 <_dtoa_r+0x4b8>
 800ef3e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ef42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4a:	f140 80b9 	bpl.w	800f0c0 <_dtoa_r+0x4b8>
 800ef4e:	f1ba 0f00 	cmp.w	sl, #0
 800ef52:	f000 80b5 	beq.w	800f0c0 <_dtoa_r+0x4b8>
 800ef56:	f1bb 0f00 	cmp.w	fp, #0
 800ef5a:	dd31      	ble.n	800efc0 <_dtoa_r+0x3b8>
 800ef5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ef60:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef68:	f108 31ff 	add.w	r1, r8, #4294967295
 800ef6c:	9104      	str	r1, [sp, #16]
 800ef6e:	3201      	adds	r2, #1
 800ef70:	465c      	mov	r4, fp
 800ef72:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef76:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ef7a:	ee07 2a90 	vmov	s15, r2
 800ef7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef82:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ef86:	ee15 2a90 	vmov	r2, s11
 800ef8a:	ec51 0b15 	vmov	r0, r1, d5
 800ef8e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ef92:	2c00      	cmp	r4, #0
 800ef94:	f040 8098 	bne.w	800f0c8 <_dtoa_r+0x4c0>
 800ef98:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ef9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800efa0:	ec41 0b17 	vmov	d7, r0, r1
 800efa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efac:	f300 8261 	bgt.w	800f472 <_dtoa_r+0x86a>
 800efb0:	eeb1 7b47 	vneg.f64	d7, d7
 800efb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbc:	f100 80f5 	bmi.w	800f1aa <_dtoa_r+0x5a2>
 800efc0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800efc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800efc6:	2a00      	cmp	r2, #0
 800efc8:	f2c0 812c 	blt.w	800f224 <_dtoa_r+0x61c>
 800efcc:	f1b8 0f0e 	cmp.w	r8, #14
 800efd0:	f300 8128 	bgt.w	800f224 <_dtoa_r+0x61c>
 800efd4:	4b91      	ldr	r3, [pc, #580]	@ (800f21c <_dtoa_r+0x614>)
 800efd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800efda:	ed93 6b00 	vldr	d6, [r3]
 800efde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	da03      	bge.n	800efec <_dtoa_r+0x3e4>
 800efe4:	f1ba 0f00 	cmp.w	sl, #0
 800efe8:	f340 80d2 	ble.w	800f190 <_dtoa_r+0x588>
 800efec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800eff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eff4:	463e      	mov	r6, r7
 800eff6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800effa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800effe:	ee15 3a10 	vmov	r3, s10
 800f002:	3330      	adds	r3, #48	@ 0x30
 800f004:	f806 3b01 	strb.w	r3, [r6], #1
 800f008:	1bf3      	subs	r3, r6, r7
 800f00a:	459a      	cmp	sl, r3
 800f00c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f010:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f014:	f040 80f8 	bne.w	800f208 <_dtoa_r+0x600>
 800f018:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f01c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	f300 80dd 	bgt.w	800f1e2 <_dtoa_r+0x5da>
 800f028:	eeb4 7b46 	vcmp.f64	d7, d6
 800f02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f030:	d104      	bne.n	800f03c <_dtoa_r+0x434>
 800f032:	ee15 3a10 	vmov	r3, s10
 800f036:	07db      	lsls	r3, r3, #31
 800f038:	f100 80d3 	bmi.w	800f1e2 <_dtoa_r+0x5da>
 800f03c:	9901      	ldr	r1, [sp, #4]
 800f03e:	4648      	mov	r0, r9
 800f040:	f000 fc78 	bl	800f934 <_Bfree>
 800f044:	2300      	movs	r3, #0
 800f046:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f048:	7033      	strb	r3, [r6, #0]
 800f04a:	f108 0301 	add.w	r3, r8, #1
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 8304 	beq.w	800f660 <_dtoa_r+0xa58>
 800f058:	601e      	str	r6, [r3, #0]
 800f05a:	e301      	b.n	800f660 <_dtoa_r+0xa58>
 800f05c:	2202      	movs	r2, #2
 800f05e:	e75e      	b.n	800ef1e <_dtoa_r+0x316>
 800f060:	07cc      	lsls	r4, r1, #31
 800f062:	d504      	bpl.n	800f06e <_dtoa_r+0x466>
 800f064:	ed90 6b00 	vldr	d6, [r0]
 800f068:	3201      	adds	r2, #1
 800f06a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f06e:	1049      	asrs	r1, r1, #1
 800f070:	3008      	adds	r0, #8
 800f072:	e755      	b.n	800ef20 <_dtoa_r+0x318>
 800f074:	d022      	beq.n	800f0bc <_dtoa_r+0x4b4>
 800f076:	f1c8 0100 	rsb	r1, r8, #0
 800f07a:	4a68      	ldr	r2, [pc, #416]	@ (800f21c <_dtoa_r+0x614>)
 800f07c:	f001 000f 	and.w	r0, r1, #15
 800f080:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f084:	ed92 7b00 	vldr	d7, [r2]
 800f088:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f090:	4863      	ldr	r0, [pc, #396]	@ (800f220 <_dtoa_r+0x618>)
 800f092:	1109      	asrs	r1, r1, #4
 800f094:	2400      	movs	r4, #0
 800f096:	2202      	movs	r2, #2
 800f098:	b929      	cbnz	r1, 800f0a6 <_dtoa_r+0x49e>
 800f09a:	2c00      	cmp	r4, #0
 800f09c:	f43f af49 	beq.w	800ef32 <_dtoa_r+0x32a>
 800f0a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f0a4:	e745      	b.n	800ef32 <_dtoa_r+0x32a>
 800f0a6:	07ce      	lsls	r6, r1, #31
 800f0a8:	d505      	bpl.n	800f0b6 <_dtoa_r+0x4ae>
 800f0aa:	ed90 6b00 	vldr	d6, [r0]
 800f0ae:	3201      	adds	r2, #1
 800f0b0:	2401      	movs	r4, #1
 800f0b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0b6:	1049      	asrs	r1, r1, #1
 800f0b8:	3008      	adds	r0, #8
 800f0ba:	e7ed      	b.n	800f098 <_dtoa_r+0x490>
 800f0bc:	2202      	movs	r2, #2
 800f0be:	e738      	b.n	800ef32 <_dtoa_r+0x32a>
 800f0c0:	f8cd 8010 	str.w	r8, [sp, #16]
 800f0c4:	4654      	mov	r4, sl
 800f0c6:	e754      	b.n	800ef72 <_dtoa_r+0x36a>
 800f0c8:	4a54      	ldr	r2, [pc, #336]	@ (800f21c <_dtoa_r+0x614>)
 800f0ca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f0ce:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f0d2:	9a08      	ldr	r2, [sp, #32]
 800f0d4:	ec41 0b17 	vmov	d7, r0, r1
 800f0d8:	443c      	add	r4, r7
 800f0da:	b34a      	cbz	r2, 800f130 <_dtoa_r+0x528>
 800f0dc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f0e0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f0e4:	463e      	mov	r6, r7
 800f0e6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f0ea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f0ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0f2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f0f6:	ee14 2a90 	vmov	r2, s9
 800f0fa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f0fe:	3230      	adds	r2, #48	@ 0x30
 800f100:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f104:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10c:	f806 2b01 	strb.w	r2, [r6], #1
 800f110:	d438      	bmi.n	800f184 <_dtoa_r+0x57c>
 800f112:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f116:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11e:	d462      	bmi.n	800f1e6 <_dtoa_r+0x5de>
 800f120:	42a6      	cmp	r6, r4
 800f122:	f43f af4d 	beq.w	800efc0 <_dtoa_r+0x3b8>
 800f126:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f12a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f12e:	e7e0      	b.n	800f0f2 <_dtoa_r+0x4ea>
 800f130:	4621      	mov	r1, r4
 800f132:	463e      	mov	r6, r7
 800f134:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f138:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f13c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f140:	ee14 2a90 	vmov	r2, s9
 800f144:	3230      	adds	r2, #48	@ 0x30
 800f146:	f806 2b01 	strb.w	r2, [r6], #1
 800f14a:	42a6      	cmp	r6, r4
 800f14c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f150:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f154:	d119      	bne.n	800f18a <_dtoa_r+0x582>
 800f156:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f15a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f15e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f166:	dc3e      	bgt.n	800f1e6 <_dtoa_r+0x5de>
 800f168:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f16c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	f57f af24 	bpl.w	800efc0 <_dtoa_r+0x3b8>
 800f178:	460e      	mov	r6, r1
 800f17a:	3901      	subs	r1, #1
 800f17c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f180:	2b30      	cmp	r3, #48	@ 0x30
 800f182:	d0f9      	beq.n	800f178 <_dtoa_r+0x570>
 800f184:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f188:	e758      	b.n	800f03c <_dtoa_r+0x434>
 800f18a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f18e:	e7d5      	b.n	800f13c <_dtoa_r+0x534>
 800f190:	d10b      	bne.n	800f1aa <_dtoa_r+0x5a2>
 800f192:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f196:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f19a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f19e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a6:	f2c0 8161 	blt.w	800f46c <_dtoa_r+0x864>
 800f1aa:	2400      	movs	r4, #0
 800f1ac:	4625      	mov	r5, r4
 800f1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b0:	43db      	mvns	r3, r3
 800f1b2:	9304      	str	r3, [sp, #16]
 800f1b4:	463e      	mov	r6, r7
 800f1b6:	f04f 0800 	mov.w	r8, #0
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4648      	mov	r0, r9
 800f1be:	f000 fbb9 	bl	800f934 <_Bfree>
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	d0de      	beq.n	800f184 <_dtoa_r+0x57c>
 800f1c6:	f1b8 0f00 	cmp.w	r8, #0
 800f1ca:	d005      	beq.n	800f1d8 <_dtoa_r+0x5d0>
 800f1cc:	45a8      	cmp	r8, r5
 800f1ce:	d003      	beq.n	800f1d8 <_dtoa_r+0x5d0>
 800f1d0:	4641      	mov	r1, r8
 800f1d2:	4648      	mov	r0, r9
 800f1d4:	f000 fbae 	bl	800f934 <_Bfree>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4648      	mov	r0, r9
 800f1dc:	f000 fbaa 	bl	800f934 <_Bfree>
 800f1e0:	e7d0      	b.n	800f184 <_dtoa_r+0x57c>
 800f1e2:	f8cd 8010 	str.w	r8, [sp, #16]
 800f1e6:	4633      	mov	r3, r6
 800f1e8:	461e      	mov	r6, r3
 800f1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1ee:	2a39      	cmp	r2, #57	@ 0x39
 800f1f0:	d106      	bne.n	800f200 <_dtoa_r+0x5f8>
 800f1f2:	429f      	cmp	r7, r3
 800f1f4:	d1f8      	bne.n	800f1e8 <_dtoa_r+0x5e0>
 800f1f6:	9a04      	ldr	r2, [sp, #16]
 800f1f8:	3201      	adds	r2, #1
 800f1fa:	9204      	str	r2, [sp, #16]
 800f1fc:	2230      	movs	r2, #48	@ 0x30
 800f1fe:	703a      	strb	r2, [r7, #0]
 800f200:	781a      	ldrb	r2, [r3, #0]
 800f202:	3201      	adds	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	e7bd      	b.n	800f184 <_dtoa_r+0x57c>
 800f208:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f20c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f214:	f47f aeef 	bne.w	800eff6 <_dtoa_r+0x3ee>
 800f218:	e710      	b.n	800f03c <_dtoa_r+0x434>
 800f21a:	bf00      	nop
 800f21c:	08010968 	.word	0x08010968
 800f220:	08010940 	.word	0x08010940
 800f224:	9908      	ldr	r1, [sp, #32]
 800f226:	2900      	cmp	r1, #0
 800f228:	f000 80e3 	beq.w	800f3f2 <_dtoa_r+0x7ea>
 800f22c:	9907      	ldr	r1, [sp, #28]
 800f22e:	2901      	cmp	r1, #1
 800f230:	f300 80c8 	bgt.w	800f3c4 <_dtoa_r+0x7bc>
 800f234:	2d00      	cmp	r5, #0
 800f236:	f000 80c1 	beq.w	800f3bc <_dtoa_r+0x7b4>
 800f23a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f23e:	9e05      	ldr	r6, [sp, #20]
 800f240:	461c      	mov	r4, r3
 800f242:	9304      	str	r3, [sp, #16]
 800f244:	9b05      	ldr	r3, [sp, #20]
 800f246:	4413      	add	r3, r2
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	9b06      	ldr	r3, [sp, #24]
 800f24c:	2101      	movs	r1, #1
 800f24e:	4413      	add	r3, r2
 800f250:	4648      	mov	r0, r9
 800f252:	9306      	str	r3, [sp, #24]
 800f254:	f000 fc22 	bl	800fa9c <__i2b>
 800f258:	9b04      	ldr	r3, [sp, #16]
 800f25a:	4605      	mov	r5, r0
 800f25c:	b166      	cbz	r6, 800f278 <_dtoa_r+0x670>
 800f25e:	9a06      	ldr	r2, [sp, #24]
 800f260:	2a00      	cmp	r2, #0
 800f262:	dd09      	ble.n	800f278 <_dtoa_r+0x670>
 800f264:	42b2      	cmp	r2, r6
 800f266:	9905      	ldr	r1, [sp, #20]
 800f268:	bfa8      	it	ge
 800f26a:	4632      	movge	r2, r6
 800f26c:	1a89      	subs	r1, r1, r2
 800f26e:	9105      	str	r1, [sp, #20]
 800f270:	9906      	ldr	r1, [sp, #24]
 800f272:	1ab6      	subs	r6, r6, r2
 800f274:	1a8a      	subs	r2, r1, r2
 800f276:	9206      	str	r2, [sp, #24]
 800f278:	b1fb      	cbz	r3, 800f2ba <_dtoa_r+0x6b2>
 800f27a:	9a08      	ldr	r2, [sp, #32]
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	f000 80bc 	beq.w	800f3fa <_dtoa_r+0x7f2>
 800f282:	b19c      	cbz	r4, 800f2ac <_dtoa_r+0x6a4>
 800f284:	4629      	mov	r1, r5
 800f286:	4622      	mov	r2, r4
 800f288:	4648      	mov	r0, r9
 800f28a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f28c:	f000 fcc6 	bl	800fc1c <__pow5mult>
 800f290:	9a01      	ldr	r2, [sp, #4]
 800f292:	4601      	mov	r1, r0
 800f294:	4605      	mov	r5, r0
 800f296:	4648      	mov	r0, r9
 800f298:	f000 fc16 	bl	800fac8 <__multiply>
 800f29c:	9901      	ldr	r1, [sp, #4]
 800f29e:	9004      	str	r0, [sp, #16]
 800f2a0:	4648      	mov	r0, r9
 800f2a2:	f000 fb47 	bl	800f934 <_Bfree>
 800f2a6:	9a04      	ldr	r2, [sp, #16]
 800f2a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2aa:	9201      	str	r2, [sp, #4]
 800f2ac:	1b1a      	subs	r2, r3, r4
 800f2ae:	d004      	beq.n	800f2ba <_dtoa_r+0x6b2>
 800f2b0:	9901      	ldr	r1, [sp, #4]
 800f2b2:	4648      	mov	r0, r9
 800f2b4:	f000 fcb2 	bl	800fc1c <__pow5mult>
 800f2b8:	9001      	str	r0, [sp, #4]
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	4648      	mov	r0, r9
 800f2be:	f000 fbed 	bl	800fa9c <__i2b>
 800f2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f000 81d0 	beq.w	800f66c <_dtoa_r+0xa64>
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	4648      	mov	r0, r9
 800f2d2:	f000 fca3 	bl	800fc1c <__pow5mult>
 800f2d6:	9b07      	ldr	r3, [sp, #28]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	4604      	mov	r4, r0
 800f2dc:	f300 8095 	bgt.w	800f40a <_dtoa_r+0x802>
 800f2e0:	9b02      	ldr	r3, [sp, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f040 808b 	bne.w	800f3fe <_dtoa_r+0x7f6>
 800f2e8:	9b03      	ldr	r3, [sp, #12]
 800f2ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	f040 8087 	bne.w	800f402 <_dtoa_r+0x7fa>
 800f2f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f2f8:	0d12      	lsrs	r2, r2, #20
 800f2fa:	0512      	lsls	r2, r2, #20
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	f000 8082 	beq.w	800f406 <_dtoa_r+0x7fe>
 800f302:	9b05      	ldr	r3, [sp, #20]
 800f304:	3301      	adds	r3, #1
 800f306:	9305      	str	r3, [sp, #20]
 800f308:	9b06      	ldr	r3, [sp, #24]
 800f30a:	3301      	adds	r3, #1
 800f30c:	9306      	str	r3, [sp, #24]
 800f30e:	2301      	movs	r3, #1
 800f310:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f314:	2b00      	cmp	r3, #0
 800f316:	f000 81af 	beq.w	800f678 <_dtoa_r+0xa70>
 800f31a:	6922      	ldr	r2, [r4, #16]
 800f31c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f320:	6910      	ldr	r0, [r2, #16]
 800f322:	f000 fb6f 	bl	800fa04 <__hi0bits>
 800f326:	f1c0 0020 	rsb	r0, r0, #32
 800f32a:	9b06      	ldr	r3, [sp, #24]
 800f32c:	4418      	add	r0, r3
 800f32e:	f010 001f 	ands.w	r0, r0, #31
 800f332:	d076      	beq.n	800f422 <_dtoa_r+0x81a>
 800f334:	f1c0 0220 	rsb	r2, r0, #32
 800f338:	2a04      	cmp	r2, #4
 800f33a:	dd69      	ble.n	800f410 <_dtoa_r+0x808>
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	f1c0 001c 	rsb	r0, r0, #28
 800f342:	4403      	add	r3, r0
 800f344:	9305      	str	r3, [sp, #20]
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	4406      	add	r6, r0
 800f34a:	4403      	add	r3, r0
 800f34c:	9306      	str	r3, [sp, #24]
 800f34e:	9b05      	ldr	r3, [sp, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	dd05      	ble.n	800f360 <_dtoa_r+0x758>
 800f354:	9901      	ldr	r1, [sp, #4]
 800f356:	461a      	mov	r2, r3
 800f358:	4648      	mov	r0, r9
 800f35a:	f000 fcb9 	bl	800fcd0 <__lshift>
 800f35e:	9001      	str	r0, [sp, #4]
 800f360:	9b06      	ldr	r3, [sp, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	dd05      	ble.n	800f372 <_dtoa_r+0x76a>
 800f366:	4621      	mov	r1, r4
 800f368:	461a      	mov	r2, r3
 800f36a:	4648      	mov	r0, r9
 800f36c:	f000 fcb0 	bl	800fcd0 <__lshift>
 800f370:	4604      	mov	r4, r0
 800f372:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f374:	2b00      	cmp	r3, #0
 800f376:	d056      	beq.n	800f426 <_dtoa_r+0x81e>
 800f378:	9801      	ldr	r0, [sp, #4]
 800f37a:	4621      	mov	r1, r4
 800f37c:	f000 fd14 	bl	800fda8 <__mcmp>
 800f380:	2800      	cmp	r0, #0
 800f382:	da50      	bge.n	800f426 <_dtoa_r+0x81e>
 800f384:	f108 33ff 	add.w	r3, r8, #4294967295
 800f388:	9304      	str	r3, [sp, #16]
 800f38a:	9901      	ldr	r1, [sp, #4]
 800f38c:	2300      	movs	r3, #0
 800f38e:	220a      	movs	r2, #10
 800f390:	4648      	mov	r0, r9
 800f392:	f000 faf1 	bl	800f978 <__multadd>
 800f396:	9b08      	ldr	r3, [sp, #32]
 800f398:	9001      	str	r0, [sp, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 816e 	beq.w	800f67c <_dtoa_r+0xa74>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	220a      	movs	r2, #10
 800f3a6:	4648      	mov	r0, r9
 800f3a8:	f000 fae6 	bl	800f978 <__multadd>
 800f3ac:	f1bb 0f00 	cmp.w	fp, #0
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	dc64      	bgt.n	800f47e <_dtoa_r+0x876>
 800f3b4:	9b07      	ldr	r3, [sp, #28]
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	dc3e      	bgt.n	800f438 <_dtoa_r+0x830>
 800f3ba:	e060      	b.n	800f47e <_dtoa_r+0x876>
 800f3bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f3c2:	e73c      	b.n	800f23e <_dtoa_r+0x636>
 800f3c4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f3c8:	42a3      	cmp	r3, r4
 800f3ca:	bfbf      	itttt	lt
 800f3cc:	1ae2      	sublt	r2, r4, r3
 800f3ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f3d0:	189b      	addlt	r3, r3, r2
 800f3d2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f3d4:	bfae      	itee	ge
 800f3d6:	1b1c      	subge	r4, r3, r4
 800f3d8:	4623      	movlt	r3, r4
 800f3da:	2400      	movlt	r4, #0
 800f3dc:	f1ba 0f00 	cmp.w	sl, #0
 800f3e0:	bfb5      	itete	lt
 800f3e2:	9a05      	ldrlt	r2, [sp, #20]
 800f3e4:	9e05      	ldrge	r6, [sp, #20]
 800f3e6:	eba2 060a 	sublt.w	r6, r2, sl
 800f3ea:	4652      	movge	r2, sl
 800f3ec:	bfb8      	it	lt
 800f3ee:	2200      	movlt	r2, #0
 800f3f0:	e727      	b.n	800f242 <_dtoa_r+0x63a>
 800f3f2:	9e05      	ldr	r6, [sp, #20]
 800f3f4:	9d08      	ldr	r5, [sp, #32]
 800f3f6:	461c      	mov	r4, r3
 800f3f8:	e730      	b.n	800f25c <_dtoa_r+0x654>
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	e758      	b.n	800f2b0 <_dtoa_r+0x6a8>
 800f3fe:	2300      	movs	r3, #0
 800f400:	e786      	b.n	800f310 <_dtoa_r+0x708>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	e784      	b.n	800f310 <_dtoa_r+0x708>
 800f406:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f408:	e783      	b.n	800f312 <_dtoa_r+0x70a>
 800f40a:	2300      	movs	r3, #0
 800f40c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f40e:	e784      	b.n	800f31a <_dtoa_r+0x712>
 800f410:	d09d      	beq.n	800f34e <_dtoa_r+0x746>
 800f412:	9b05      	ldr	r3, [sp, #20]
 800f414:	321c      	adds	r2, #28
 800f416:	4413      	add	r3, r2
 800f418:	9305      	str	r3, [sp, #20]
 800f41a:	9b06      	ldr	r3, [sp, #24]
 800f41c:	4416      	add	r6, r2
 800f41e:	4413      	add	r3, r2
 800f420:	e794      	b.n	800f34c <_dtoa_r+0x744>
 800f422:	4602      	mov	r2, r0
 800f424:	e7f5      	b.n	800f412 <_dtoa_r+0x80a>
 800f426:	f1ba 0f00 	cmp.w	sl, #0
 800f42a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f42e:	46d3      	mov	fp, sl
 800f430:	dc21      	bgt.n	800f476 <_dtoa_r+0x86e>
 800f432:	9b07      	ldr	r3, [sp, #28]
 800f434:	2b02      	cmp	r3, #2
 800f436:	dd1e      	ble.n	800f476 <_dtoa_r+0x86e>
 800f438:	f1bb 0f00 	cmp.w	fp, #0
 800f43c:	f47f aeb7 	bne.w	800f1ae <_dtoa_r+0x5a6>
 800f440:	4621      	mov	r1, r4
 800f442:	465b      	mov	r3, fp
 800f444:	2205      	movs	r2, #5
 800f446:	4648      	mov	r0, r9
 800f448:	f000 fa96 	bl	800f978 <__multadd>
 800f44c:	4601      	mov	r1, r0
 800f44e:	4604      	mov	r4, r0
 800f450:	9801      	ldr	r0, [sp, #4]
 800f452:	f000 fca9 	bl	800fda8 <__mcmp>
 800f456:	2800      	cmp	r0, #0
 800f458:	f77f aea9 	ble.w	800f1ae <_dtoa_r+0x5a6>
 800f45c:	463e      	mov	r6, r7
 800f45e:	2331      	movs	r3, #49	@ 0x31
 800f460:	f806 3b01 	strb.w	r3, [r6], #1
 800f464:	9b04      	ldr	r3, [sp, #16]
 800f466:	3301      	adds	r3, #1
 800f468:	9304      	str	r3, [sp, #16]
 800f46a:	e6a4      	b.n	800f1b6 <_dtoa_r+0x5ae>
 800f46c:	f8cd 8010 	str.w	r8, [sp, #16]
 800f470:	4654      	mov	r4, sl
 800f472:	4625      	mov	r5, r4
 800f474:	e7f2      	b.n	800f45c <_dtoa_r+0x854>
 800f476:	9b08      	ldr	r3, [sp, #32]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 8103 	beq.w	800f684 <_dtoa_r+0xa7c>
 800f47e:	2e00      	cmp	r6, #0
 800f480:	dd05      	ble.n	800f48e <_dtoa_r+0x886>
 800f482:	4629      	mov	r1, r5
 800f484:	4632      	mov	r2, r6
 800f486:	4648      	mov	r0, r9
 800f488:	f000 fc22 	bl	800fcd0 <__lshift>
 800f48c:	4605      	mov	r5, r0
 800f48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f490:	2b00      	cmp	r3, #0
 800f492:	d058      	beq.n	800f546 <_dtoa_r+0x93e>
 800f494:	6869      	ldr	r1, [r5, #4]
 800f496:	4648      	mov	r0, r9
 800f498:	f000 fa0c 	bl	800f8b4 <_Balloc>
 800f49c:	4606      	mov	r6, r0
 800f49e:	b928      	cbnz	r0, 800f4ac <_dtoa_r+0x8a4>
 800f4a0:	4b82      	ldr	r3, [pc, #520]	@ (800f6ac <_dtoa_r+0xaa4>)
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f4a8:	f7ff bbc7 	b.w	800ec3a <_dtoa_r+0x32>
 800f4ac:	692a      	ldr	r2, [r5, #16]
 800f4ae:	3202      	adds	r2, #2
 800f4b0:	0092      	lsls	r2, r2, #2
 800f4b2:	f105 010c 	add.w	r1, r5, #12
 800f4b6:	300c      	adds	r0, #12
 800f4b8:	f000 fe3a 	bl	8010130 <memcpy>
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4648      	mov	r0, r9
 800f4c2:	f000 fc05 	bl	800fcd0 <__lshift>
 800f4c6:	1c7b      	adds	r3, r7, #1
 800f4c8:	9305      	str	r3, [sp, #20]
 800f4ca:	eb07 030b 	add.w	r3, r7, fp
 800f4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	46a8      	mov	r8, r5
 800f4d8:	9308      	str	r3, [sp, #32]
 800f4da:	4605      	mov	r5, r0
 800f4dc:	9b05      	ldr	r3, [sp, #20]
 800f4de:	9801      	ldr	r0, [sp, #4]
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800f4e6:	f7ff fb04 	bl	800eaf2 <quorem>
 800f4ea:	4641      	mov	r1, r8
 800f4ec:	9002      	str	r0, [sp, #8]
 800f4ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f4f2:	9801      	ldr	r0, [sp, #4]
 800f4f4:	f000 fc58 	bl	800fda8 <__mcmp>
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	9006      	str	r0, [sp, #24]
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4648      	mov	r0, r9
 800f500:	f000 fc6e 	bl	800fde0 <__mdiff>
 800f504:	68c2      	ldr	r2, [r0, #12]
 800f506:	4606      	mov	r6, r0
 800f508:	b9fa      	cbnz	r2, 800f54a <_dtoa_r+0x942>
 800f50a:	4601      	mov	r1, r0
 800f50c:	9801      	ldr	r0, [sp, #4]
 800f50e:	f000 fc4b 	bl	800fda8 <__mcmp>
 800f512:	4602      	mov	r2, r0
 800f514:	4631      	mov	r1, r6
 800f516:	4648      	mov	r0, r9
 800f518:	920a      	str	r2, [sp, #40]	@ 0x28
 800f51a:	f000 fa0b 	bl	800f934 <_Bfree>
 800f51e:	9b07      	ldr	r3, [sp, #28]
 800f520:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f522:	9e05      	ldr	r6, [sp, #20]
 800f524:	ea43 0102 	orr.w	r1, r3, r2
 800f528:	9b08      	ldr	r3, [sp, #32]
 800f52a:	4319      	orrs	r1, r3
 800f52c:	d10f      	bne.n	800f54e <_dtoa_r+0x946>
 800f52e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f532:	d028      	beq.n	800f586 <_dtoa_r+0x97e>
 800f534:	9b06      	ldr	r3, [sp, #24]
 800f536:	2b00      	cmp	r3, #0
 800f538:	dd02      	ble.n	800f540 <_dtoa_r+0x938>
 800f53a:	9b02      	ldr	r3, [sp, #8]
 800f53c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f540:	f88b a000 	strb.w	sl, [fp]
 800f544:	e639      	b.n	800f1ba <_dtoa_r+0x5b2>
 800f546:	4628      	mov	r0, r5
 800f548:	e7bd      	b.n	800f4c6 <_dtoa_r+0x8be>
 800f54a:	2201      	movs	r2, #1
 800f54c:	e7e2      	b.n	800f514 <_dtoa_r+0x90c>
 800f54e:	9b06      	ldr	r3, [sp, #24]
 800f550:	2b00      	cmp	r3, #0
 800f552:	db04      	blt.n	800f55e <_dtoa_r+0x956>
 800f554:	9907      	ldr	r1, [sp, #28]
 800f556:	430b      	orrs	r3, r1
 800f558:	9908      	ldr	r1, [sp, #32]
 800f55a:	430b      	orrs	r3, r1
 800f55c:	d120      	bne.n	800f5a0 <_dtoa_r+0x998>
 800f55e:	2a00      	cmp	r2, #0
 800f560:	ddee      	ble.n	800f540 <_dtoa_r+0x938>
 800f562:	9901      	ldr	r1, [sp, #4]
 800f564:	2201      	movs	r2, #1
 800f566:	4648      	mov	r0, r9
 800f568:	f000 fbb2 	bl	800fcd0 <__lshift>
 800f56c:	4621      	mov	r1, r4
 800f56e:	9001      	str	r0, [sp, #4]
 800f570:	f000 fc1a 	bl	800fda8 <__mcmp>
 800f574:	2800      	cmp	r0, #0
 800f576:	dc03      	bgt.n	800f580 <_dtoa_r+0x978>
 800f578:	d1e2      	bne.n	800f540 <_dtoa_r+0x938>
 800f57a:	f01a 0f01 	tst.w	sl, #1
 800f57e:	d0df      	beq.n	800f540 <_dtoa_r+0x938>
 800f580:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f584:	d1d9      	bne.n	800f53a <_dtoa_r+0x932>
 800f586:	2339      	movs	r3, #57	@ 0x39
 800f588:	f88b 3000 	strb.w	r3, [fp]
 800f58c:	4633      	mov	r3, r6
 800f58e:	461e      	mov	r6, r3
 800f590:	3b01      	subs	r3, #1
 800f592:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f596:	2a39      	cmp	r2, #57	@ 0x39
 800f598:	d053      	beq.n	800f642 <_dtoa_r+0xa3a>
 800f59a:	3201      	adds	r2, #1
 800f59c:	701a      	strb	r2, [r3, #0]
 800f59e:	e60c      	b.n	800f1ba <_dtoa_r+0x5b2>
 800f5a0:	2a00      	cmp	r2, #0
 800f5a2:	dd07      	ble.n	800f5b4 <_dtoa_r+0x9ac>
 800f5a4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f5a8:	d0ed      	beq.n	800f586 <_dtoa_r+0x97e>
 800f5aa:	f10a 0301 	add.w	r3, sl, #1
 800f5ae:	f88b 3000 	strb.w	r3, [fp]
 800f5b2:	e602      	b.n	800f1ba <_dtoa_r+0x5b2>
 800f5b4:	9b05      	ldr	r3, [sp, #20]
 800f5b6:	9a05      	ldr	r2, [sp, #20]
 800f5b8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d029      	beq.n	800f616 <_dtoa_r+0xa0e>
 800f5c2:	9901      	ldr	r1, [sp, #4]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	220a      	movs	r2, #10
 800f5c8:	4648      	mov	r0, r9
 800f5ca:	f000 f9d5 	bl	800f978 <__multadd>
 800f5ce:	45a8      	cmp	r8, r5
 800f5d0:	9001      	str	r0, [sp, #4]
 800f5d2:	f04f 0300 	mov.w	r3, #0
 800f5d6:	f04f 020a 	mov.w	r2, #10
 800f5da:	4641      	mov	r1, r8
 800f5dc:	4648      	mov	r0, r9
 800f5de:	d107      	bne.n	800f5f0 <_dtoa_r+0x9e8>
 800f5e0:	f000 f9ca 	bl	800f978 <__multadd>
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	9b05      	ldr	r3, [sp, #20]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	9305      	str	r3, [sp, #20]
 800f5ee:	e775      	b.n	800f4dc <_dtoa_r+0x8d4>
 800f5f0:	f000 f9c2 	bl	800f978 <__multadd>
 800f5f4:	4629      	mov	r1, r5
 800f5f6:	4680      	mov	r8, r0
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	220a      	movs	r2, #10
 800f5fc:	4648      	mov	r0, r9
 800f5fe:	f000 f9bb 	bl	800f978 <__multadd>
 800f602:	4605      	mov	r5, r0
 800f604:	e7f0      	b.n	800f5e8 <_dtoa_r+0x9e0>
 800f606:	f1bb 0f00 	cmp.w	fp, #0
 800f60a:	bfcc      	ite	gt
 800f60c:	465e      	movgt	r6, fp
 800f60e:	2601      	movle	r6, #1
 800f610:	443e      	add	r6, r7
 800f612:	f04f 0800 	mov.w	r8, #0
 800f616:	9901      	ldr	r1, [sp, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	4648      	mov	r0, r9
 800f61c:	f000 fb58 	bl	800fcd0 <__lshift>
 800f620:	4621      	mov	r1, r4
 800f622:	9001      	str	r0, [sp, #4]
 800f624:	f000 fbc0 	bl	800fda8 <__mcmp>
 800f628:	2800      	cmp	r0, #0
 800f62a:	dcaf      	bgt.n	800f58c <_dtoa_r+0x984>
 800f62c:	d102      	bne.n	800f634 <_dtoa_r+0xa2c>
 800f62e:	f01a 0f01 	tst.w	sl, #1
 800f632:	d1ab      	bne.n	800f58c <_dtoa_r+0x984>
 800f634:	4633      	mov	r3, r6
 800f636:	461e      	mov	r6, r3
 800f638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f63c:	2a30      	cmp	r2, #48	@ 0x30
 800f63e:	d0fa      	beq.n	800f636 <_dtoa_r+0xa2e>
 800f640:	e5bb      	b.n	800f1ba <_dtoa_r+0x5b2>
 800f642:	429f      	cmp	r7, r3
 800f644:	d1a3      	bne.n	800f58e <_dtoa_r+0x986>
 800f646:	9b04      	ldr	r3, [sp, #16]
 800f648:	3301      	adds	r3, #1
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	2331      	movs	r3, #49	@ 0x31
 800f64e:	703b      	strb	r3, [r7, #0]
 800f650:	e5b3      	b.n	800f1ba <_dtoa_r+0x5b2>
 800f652:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f654:	4f16      	ldr	r7, [pc, #88]	@ (800f6b0 <_dtoa_r+0xaa8>)
 800f656:	b11b      	cbz	r3, 800f660 <_dtoa_r+0xa58>
 800f658:	f107 0308 	add.w	r3, r7, #8
 800f65c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	4638      	mov	r0, r7
 800f662:	b011      	add	sp, #68	@ 0x44
 800f664:	ecbd 8b02 	vpop	{d8}
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	9b07      	ldr	r3, [sp, #28]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	f77f ae36 	ble.w	800f2e0 <_dtoa_r+0x6d8>
 800f674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f676:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f678:	2001      	movs	r0, #1
 800f67a:	e656      	b.n	800f32a <_dtoa_r+0x722>
 800f67c:	f1bb 0f00 	cmp.w	fp, #0
 800f680:	f77f aed7 	ble.w	800f432 <_dtoa_r+0x82a>
 800f684:	463e      	mov	r6, r7
 800f686:	9801      	ldr	r0, [sp, #4]
 800f688:	4621      	mov	r1, r4
 800f68a:	f7ff fa32 	bl	800eaf2 <quorem>
 800f68e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f692:	f806 ab01 	strb.w	sl, [r6], #1
 800f696:	1bf2      	subs	r2, r6, r7
 800f698:	4593      	cmp	fp, r2
 800f69a:	ddb4      	ble.n	800f606 <_dtoa_r+0x9fe>
 800f69c:	9901      	ldr	r1, [sp, #4]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	220a      	movs	r2, #10
 800f6a2:	4648      	mov	r0, r9
 800f6a4:	f000 f968 	bl	800f978 <__multadd>
 800f6a8:	9001      	str	r0, [sp, #4]
 800f6aa:	e7ec      	b.n	800f686 <_dtoa_r+0xa7e>
 800f6ac:	080108c5 	.word	0x080108c5
 800f6b0:	08010849 	.word	0x08010849

0800f6b4 <_free_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	d041      	beq.n	800f740 <_free_r+0x8c>
 800f6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c0:	1f0c      	subs	r4, r1, #4
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	bfb8      	it	lt
 800f6c6:	18e4      	addlt	r4, r4, r3
 800f6c8:	f000 f8e8 	bl	800f89c <__malloc_lock>
 800f6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800f744 <_free_r+0x90>)
 800f6ce:	6813      	ldr	r3, [r2, #0]
 800f6d0:	b933      	cbnz	r3, 800f6e0 <_free_r+0x2c>
 800f6d2:	6063      	str	r3, [r4, #4]
 800f6d4:	6014      	str	r4, [r2, #0]
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6dc:	f000 b8e4 	b.w	800f8a8 <__malloc_unlock>
 800f6e0:	42a3      	cmp	r3, r4
 800f6e2:	d908      	bls.n	800f6f6 <_free_r+0x42>
 800f6e4:	6820      	ldr	r0, [r4, #0]
 800f6e6:	1821      	adds	r1, r4, r0
 800f6e8:	428b      	cmp	r3, r1
 800f6ea:	bf01      	itttt	eq
 800f6ec:	6819      	ldreq	r1, [r3, #0]
 800f6ee:	685b      	ldreq	r3, [r3, #4]
 800f6f0:	1809      	addeq	r1, r1, r0
 800f6f2:	6021      	streq	r1, [r4, #0]
 800f6f4:	e7ed      	b.n	800f6d2 <_free_r+0x1e>
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	b10b      	cbz	r3, 800f700 <_free_r+0x4c>
 800f6fc:	42a3      	cmp	r3, r4
 800f6fe:	d9fa      	bls.n	800f6f6 <_free_r+0x42>
 800f700:	6811      	ldr	r1, [r2, #0]
 800f702:	1850      	adds	r0, r2, r1
 800f704:	42a0      	cmp	r0, r4
 800f706:	d10b      	bne.n	800f720 <_free_r+0x6c>
 800f708:	6820      	ldr	r0, [r4, #0]
 800f70a:	4401      	add	r1, r0
 800f70c:	1850      	adds	r0, r2, r1
 800f70e:	4283      	cmp	r3, r0
 800f710:	6011      	str	r1, [r2, #0]
 800f712:	d1e0      	bne.n	800f6d6 <_free_r+0x22>
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	6053      	str	r3, [r2, #4]
 800f71a:	4408      	add	r0, r1
 800f71c:	6010      	str	r0, [r2, #0]
 800f71e:	e7da      	b.n	800f6d6 <_free_r+0x22>
 800f720:	d902      	bls.n	800f728 <_free_r+0x74>
 800f722:	230c      	movs	r3, #12
 800f724:	602b      	str	r3, [r5, #0]
 800f726:	e7d6      	b.n	800f6d6 <_free_r+0x22>
 800f728:	6820      	ldr	r0, [r4, #0]
 800f72a:	1821      	adds	r1, r4, r0
 800f72c:	428b      	cmp	r3, r1
 800f72e:	bf04      	itt	eq
 800f730:	6819      	ldreq	r1, [r3, #0]
 800f732:	685b      	ldreq	r3, [r3, #4]
 800f734:	6063      	str	r3, [r4, #4]
 800f736:	bf04      	itt	eq
 800f738:	1809      	addeq	r1, r1, r0
 800f73a:	6021      	streq	r1, [r4, #0]
 800f73c:	6054      	str	r4, [r2, #4]
 800f73e:	e7ca      	b.n	800f6d6 <_free_r+0x22>
 800f740:	bd38      	pop	{r3, r4, r5, pc}
 800f742:	bf00      	nop
 800f744:	2400072c 	.word	0x2400072c

0800f748 <malloc>:
 800f748:	4b02      	ldr	r3, [pc, #8]	@ (800f754 <malloc+0xc>)
 800f74a:	4601      	mov	r1, r0
 800f74c:	6818      	ldr	r0, [r3, #0]
 800f74e:	f000 b825 	b.w	800f79c <_malloc_r>
 800f752:	bf00      	nop
 800f754:	2400002c 	.word	0x2400002c

0800f758 <sbrk_aligned>:
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	4e0f      	ldr	r6, [pc, #60]	@ (800f798 <sbrk_aligned+0x40>)
 800f75c:	460c      	mov	r4, r1
 800f75e:	6831      	ldr	r1, [r6, #0]
 800f760:	4605      	mov	r5, r0
 800f762:	b911      	cbnz	r1, 800f76a <sbrk_aligned+0x12>
 800f764:	f000 fcd4 	bl	8010110 <_sbrk_r>
 800f768:	6030      	str	r0, [r6, #0]
 800f76a:	4621      	mov	r1, r4
 800f76c:	4628      	mov	r0, r5
 800f76e:	f000 fccf 	bl	8010110 <_sbrk_r>
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	d103      	bne.n	800f77e <sbrk_aligned+0x26>
 800f776:	f04f 34ff 	mov.w	r4, #4294967295
 800f77a:	4620      	mov	r0, r4
 800f77c:	bd70      	pop	{r4, r5, r6, pc}
 800f77e:	1cc4      	adds	r4, r0, #3
 800f780:	f024 0403 	bic.w	r4, r4, #3
 800f784:	42a0      	cmp	r0, r4
 800f786:	d0f8      	beq.n	800f77a <sbrk_aligned+0x22>
 800f788:	1a21      	subs	r1, r4, r0
 800f78a:	4628      	mov	r0, r5
 800f78c:	f000 fcc0 	bl	8010110 <_sbrk_r>
 800f790:	3001      	adds	r0, #1
 800f792:	d1f2      	bne.n	800f77a <sbrk_aligned+0x22>
 800f794:	e7ef      	b.n	800f776 <sbrk_aligned+0x1e>
 800f796:	bf00      	nop
 800f798:	24000728 	.word	0x24000728

0800f79c <_malloc_r>:
 800f79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	1ccd      	adds	r5, r1, #3
 800f7a2:	f025 0503 	bic.w	r5, r5, #3
 800f7a6:	3508      	adds	r5, #8
 800f7a8:	2d0c      	cmp	r5, #12
 800f7aa:	bf38      	it	cc
 800f7ac:	250c      	movcc	r5, #12
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	db01      	blt.n	800f7b8 <_malloc_r+0x1c>
 800f7b4:	42a9      	cmp	r1, r5
 800f7b6:	d904      	bls.n	800f7c2 <_malloc_r+0x26>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	6033      	str	r3, [r6, #0]
 800f7bc:	2000      	movs	r0, #0
 800f7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f898 <_malloc_r+0xfc>
 800f7c6:	f000 f869 	bl	800f89c <__malloc_lock>
 800f7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ce:	461c      	mov	r4, r3
 800f7d0:	bb44      	cbnz	r4, 800f824 <_malloc_r+0x88>
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f7ff ffbf 	bl	800f758 <sbrk_aligned>
 800f7da:	1c43      	adds	r3, r0, #1
 800f7dc:	4604      	mov	r4, r0
 800f7de:	d158      	bne.n	800f892 <_malloc_r+0xf6>
 800f7e0:	f8d8 4000 	ldr.w	r4, [r8]
 800f7e4:	4627      	mov	r7, r4
 800f7e6:	2f00      	cmp	r7, #0
 800f7e8:	d143      	bne.n	800f872 <_malloc_r+0xd6>
 800f7ea:	2c00      	cmp	r4, #0
 800f7ec:	d04b      	beq.n	800f886 <_malloc_r+0xea>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	eb04 0903 	add.w	r9, r4, r3
 800f7f8:	f000 fc8a 	bl	8010110 <_sbrk_r>
 800f7fc:	4581      	cmp	r9, r0
 800f7fe:	d142      	bne.n	800f886 <_malloc_r+0xea>
 800f800:	6821      	ldr	r1, [r4, #0]
 800f802:	1a6d      	subs	r5, r5, r1
 800f804:	4629      	mov	r1, r5
 800f806:	4630      	mov	r0, r6
 800f808:	f7ff ffa6 	bl	800f758 <sbrk_aligned>
 800f80c:	3001      	adds	r0, #1
 800f80e:	d03a      	beq.n	800f886 <_malloc_r+0xea>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	442b      	add	r3, r5
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	f8d8 3000 	ldr.w	r3, [r8]
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	bb62      	cbnz	r2, 800f878 <_malloc_r+0xdc>
 800f81e:	f8c8 7000 	str.w	r7, [r8]
 800f822:	e00f      	b.n	800f844 <_malloc_r+0xa8>
 800f824:	6822      	ldr	r2, [r4, #0]
 800f826:	1b52      	subs	r2, r2, r5
 800f828:	d420      	bmi.n	800f86c <_malloc_r+0xd0>
 800f82a:	2a0b      	cmp	r2, #11
 800f82c:	d917      	bls.n	800f85e <_malloc_r+0xc2>
 800f82e:	1961      	adds	r1, r4, r5
 800f830:	42a3      	cmp	r3, r4
 800f832:	6025      	str	r5, [r4, #0]
 800f834:	bf18      	it	ne
 800f836:	6059      	strne	r1, [r3, #4]
 800f838:	6863      	ldr	r3, [r4, #4]
 800f83a:	bf08      	it	eq
 800f83c:	f8c8 1000 	streq.w	r1, [r8]
 800f840:	5162      	str	r2, [r4, r5]
 800f842:	604b      	str	r3, [r1, #4]
 800f844:	4630      	mov	r0, r6
 800f846:	f000 f82f 	bl	800f8a8 <__malloc_unlock>
 800f84a:	f104 000b 	add.w	r0, r4, #11
 800f84e:	1d23      	adds	r3, r4, #4
 800f850:	f020 0007 	bic.w	r0, r0, #7
 800f854:	1ac2      	subs	r2, r0, r3
 800f856:	bf1c      	itt	ne
 800f858:	1a1b      	subne	r3, r3, r0
 800f85a:	50a3      	strne	r3, [r4, r2]
 800f85c:	e7af      	b.n	800f7be <_malloc_r+0x22>
 800f85e:	6862      	ldr	r2, [r4, #4]
 800f860:	42a3      	cmp	r3, r4
 800f862:	bf0c      	ite	eq
 800f864:	f8c8 2000 	streq.w	r2, [r8]
 800f868:	605a      	strne	r2, [r3, #4]
 800f86a:	e7eb      	b.n	800f844 <_malloc_r+0xa8>
 800f86c:	4623      	mov	r3, r4
 800f86e:	6864      	ldr	r4, [r4, #4]
 800f870:	e7ae      	b.n	800f7d0 <_malloc_r+0x34>
 800f872:	463c      	mov	r4, r7
 800f874:	687f      	ldr	r7, [r7, #4]
 800f876:	e7b6      	b.n	800f7e6 <_malloc_r+0x4a>
 800f878:	461a      	mov	r2, r3
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	42a3      	cmp	r3, r4
 800f87e:	d1fb      	bne.n	800f878 <_malloc_r+0xdc>
 800f880:	2300      	movs	r3, #0
 800f882:	6053      	str	r3, [r2, #4]
 800f884:	e7de      	b.n	800f844 <_malloc_r+0xa8>
 800f886:	230c      	movs	r3, #12
 800f888:	6033      	str	r3, [r6, #0]
 800f88a:	4630      	mov	r0, r6
 800f88c:	f000 f80c 	bl	800f8a8 <__malloc_unlock>
 800f890:	e794      	b.n	800f7bc <_malloc_r+0x20>
 800f892:	6005      	str	r5, [r0, #0]
 800f894:	e7d6      	b.n	800f844 <_malloc_r+0xa8>
 800f896:	bf00      	nop
 800f898:	2400072c 	.word	0x2400072c

0800f89c <__malloc_lock>:
 800f89c:	4801      	ldr	r0, [pc, #4]	@ (800f8a4 <__malloc_lock+0x8>)
 800f89e:	f7ff b926 	b.w	800eaee <__retarget_lock_acquire_recursive>
 800f8a2:	bf00      	nop
 800f8a4:	24000724 	.word	0x24000724

0800f8a8 <__malloc_unlock>:
 800f8a8:	4801      	ldr	r0, [pc, #4]	@ (800f8b0 <__malloc_unlock+0x8>)
 800f8aa:	f7ff b921 	b.w	800eaf0 <__retarget_lock_release_recursive>
 800f8ae:	bf00      	nop
 800f8b0:	24000724 	.word	0x24000724

0800f8b4 <_Balloc>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	69c6      	ldr	r6, [r0, #28]
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	460d      	mov	r5, r1
 800f8bc:	b976      	cbnz	r6, 800f8dc <_Balloc+0x28>
 800f8be:	2010      	movs	r0, #16
 800f8c0:	f7ff ff42 	bl	800f748 <malloc>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	61e0      	str	r0, [r4, #28]
 800f8c8:	b920      	cbnz	r0, 800f8d4 <_Balloc+0x20>
 800f8ca:	4b18      	ldr	r3, [pc, #96]	@ (800f92c <_Balloc+0x78>)
 800f8cc:	4818      	ldr	r0, [pc, #96]	@ (800f930 <_Balloc+0x7c>)
 800f8ce:	216b      	movs	r1, #107	@ 0x6b
 800f8d0:	f000 fc3c 	bl	801014c <__assert_func>
 800f8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8d8:	6006      	str	r6, [r0, #0]
 800f8da:	60c6      	str	r6, [r0, #12]
 800f8dc:	69e6      	ldr	r6, [r4, #28]
 800f8de:	68f3      	ldr	r3, [r6, #12]
 800f8e0:	b183      	cbz	r3, 800f904 <_Balloc+0x50>
 800f8e2:	69e3      	ldr	r3, [r4, #28]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8ea:	b9b8      	cbnz	r0, 800f91c <_Balloc+0x68>
 800f8ec:	2101      	movs	r1, #1
 800f8ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f8f2:	1d72      	adds	r2, r6, #5
 800f8f4:	0092      	lsls	r2, r2, #2
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 fc46 	bl	8010188 <_calloc_r>
 800f8fc:	b160      	cbz	r0, 800f918 <_Balloc+0x64>
 800f8fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f902:	e00e      	b.n	800f922 <_Balloc+0x6e>
 800f904:	2221      	movs	r2, #33	@ 0x21
 800f906:	2104      	movs	r1, #4
 800f908:	4620      	mov	r0, r4
 800f90a:	f000 fc3d 	bl	8010188 <_calloc_r>
 800f90e:	69e3      	ldr	r3, [r4, #28]
 800f910:	60f0      	str	r0, [r6, #12]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1e4      	bne.n	800f8e2 <_Balloc+0x2e>
 800f918:	2000      	movs	r0, #0
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	6802      	ldr	r2, [r0, #0]
 800f91e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f922:	2300      	movs	r3, #0
 800f924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f928:	e7f7      	b.n	800f91a <_Balloc+0x66>
 800f92a:	bf00      	nop
 800f92c:	08010856 	.word	0x08010856
 800f930:	080108d6 	.word	0x080108d6

0800f934 <_Bfree>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	69c6      	ldr	r6, [r0, #28]
 800f938:	4605      	mov	r5, r0
 800f93a:	460c      	mov	r4, r1
 800f93c:	b976      	cbnz	r6, 800f95c <_Bfree+0x28>
 800f93e:	2010      	movs	r0, #16
 800f940:	f7ff ff02 	bl	800f748 <malloc>
 800f944:	4602      	mov	r2, r0
 800f946:	61e8      	str	r0, [r5, #28]
 800f948:	b920      	cbnz	r0, 800f954 <_Bfree+0x20>
 800f94a:	4b09      	ldr	r3, [pc, #36]	@ (800f970 <_Bfree+0x3c>)
 800f94c:	4809      	ldr	r0, [pc, #36]	@ (800f974 <_Bfree+0x40>)
 800f94e:	218f      	movs	r1, #143	@ 0x8f
 800f950:	f000 fbfc 	bl	801014c <__assert_func>
 800f954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f958:	6006      	str	r6, [r0, #0]
 800f95a:	60c6      	str	r6, [r0, #12]
 800f95c:	b13c      	cbz	r4, 800f96e <_Bfree+0x3a>
 800f95e:	69eb      	ldr	r3, [r5, #28]
 800f960:	6862      	ldr	r2, [r4, #4]
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f968:	6021      	str	r1, [r4, #0]
 800f96a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
 800f970:	08010856 	.word	0x08010856
 800f974:	080108d6 	.word	0x080108d6

0800f978 <__multadd>:
 800f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97c:	690d      	ldr	r5, [r1, #16]
 800f97e:	4607      	mov	r7, r0
 800f980:	460c      	mov	r4, r1
 800f982:	461e      	mov	r6, r3
 800f984:	f101 0c14 	add.w	ip, r1, #20
 800f988:	2000      	movs	r0, #0
 800f98a:	f8dc 3000 	ldr.w	r3, [ip]
 800f98e:	b299      	uxth	r1, r3
 800f990:	fb02 6101 	mla	r1, r2, r1, r6
 800f994:	0c1e      	lsrs	r6, r3, #16
 800f996:	0c0b      	lsrs	r3, r1, #16
 800f998:	fb02 3306 	mla	r3, r2, r6, r3
 800f99c:	b289      	uxth	r1, r1
 800f99e:	3001      	adds	r0, #1
 800f9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9a4:	4285      	cmp	r5, r0
 800f9a6:	f84c 1b04 	str.w	r1, [ip], #4
 800f9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9ae:	dcec      	bgt.n	800f98a <__multadd+0x12>
 800f9b0:	b30e      	cbz	r6, 800f9f6 <__multadd+0x7e>
 800f9b2:	68a3      	ldr	r3, [r4, #8]
 800f9b4:	42ab      	cmp	r3, r5
 800f9b6:	dc19      	bgt.n	800f9ec <__multadd+0x74>
 800f9b8:	6861      	ldr	r1, [r4, #4]
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	3101      	adds	r1, #1
 800f9be:	f7ff ff79 	bl	800f8b4 <_Balloc>
 800f9c2:	4680      	mov	r8, r0
 800f9c4:	b928      	cbnz	r0, 800f9d2 <__multadd+0x5a>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f9fc <__multadd+0x84>)
 800f9ca:	480d      	ldr	r0, [pc, #52]	@ (800fa00 <__multadd+0x88>)
 800f9cc:	21ba      	movs	r1, #186	@ 0xba
 800f9ce:	f000 fbbd 	bl	801014c <__assert_func>
 800f9d2:	6922      	ldr	r2, [r4, #16]
 800f9d4:	3202      	adds	r2, #2
 800f9d6:	f104 010c 	add.w	r1, r4, #12
 800f9da:	0092      	lsls	r2, r2, #2
 800f9dc:	300c      	adds	r0, #12
 800f9de:	f000 fba7 	bl	8010130 <memcpy>
 800f9e2:	4621      	mov	r1, r4
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f7ff ffa5 	bl	800f934 <_Bfree>
 800f9ea:	4644      	mov	r4, r8
 800f9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9f0:	3501      	adds	r5, #1
 800f9f2:	615e      	str	r6, [r3, #20]
 800f9f4:	6125      	str	r5, [r4, #16]
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9fc:	080108c5 	.word	0x080108c5
 800fa00:	080108d6 	.word	0x080108d6

0800fa04 <__hi0bits>:
 800fa04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa08:	4603      	mov	r3, r0
 800fa0a:	bf36      	itet	cc
 800fa0c:	0403      	lslcc	r3, r0, #16
 800fa0e:	2000      	movcs	r0, #0
 800fa10:	2010      	movcc	r0, #16
 800fa12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa16:	bf3c      	itt	cc
 800fa18:	021b      	lslcc	r3, r3, #8
 800fa1a:	3008      	addcc	r0, #8
 800fa1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa20:	bf3c      	itt	cc
 800fa22:	011b      	lslcc	r3, r3, #4
 800fa24:	3004      	addcc	r0, #4
 800fa26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa2a:	bf3c      	itt	cc
 800fa2c:	009b      	lslcc	r3, r3, #2
 800fa2e:	3002      	addcc	r0, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	db05      	blt.n	800fa40 <__hi0bits+0x3c>
 800fa34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa38:	f100 0001 	add.w	r0, r0, #1
 800fa3c:	bf08      	it	eq
 800fa3e:	2020      	moveq	r0, #32
 800fa40:	4770      	bx	lr

0800fa42 <__lo0bits>:
 800fa42:	6803      	ldr	r3, [r0, #0]
 800fa44:	4602      	mov	r2, r0
 800fa46:	f013 0007 	ands.w	r0, r3, #7
 800fa4a:	d00b      	beq.n	800fa64 <__lo0bits+0x22>
 800fa4c:	07d9      	lsls	r1, r3, #31
 800fa4e:	d421      	bmi.n	800fa94 <__lo0bits+0x52>
 800fa50:	0798      	lsls	r0, r3, #30
 800fa52:	bf49      	itett	mi
 800fa54:	085b      	lsrmi	r3, r3, #1
 800fa56:	089b      	lsrpl	r3, r3, #2
 800fa58:	2001      	movmi	r0, #1
 800fa5a:	6013      	strmi	r3, [r2, #0]
 800fa5c:	bf5c      	itt	pl
 800fa5e:	6013      	strpl	r3, [r2, #0]
 800fa60:	2002      	movpl	r0, #2
 800fa62:	4770      	bx	lr
 800fa64:	b299      	uxth	r1, r3
 800fa66:	b909      	cbnz	r1, 800fa6c <__lo0bits+0x2a>
 800fa68:	0c1b      	lsrs	r3, r3, #16
 800fa6a:	2010      	movs	r0, #16
 800fa6c:	b2d9      	uxtb	r1, r3
 800fa6e:	b909      	cbnz	r1, 800fa74 <__lo0bits+0x32>
 800fa70:	3008      	adds	r0, #8
 800fa72:	0a1b      	lsrs	r3, r3, #8
 800fa74:	0719      	lsls	r1, r3, #28
 800fa76:	bf04      	itt	eq
 800fa78:	091b      	lsreq	r3, r3, #4
 800fa7a:	3004      	addeq	r0, #4
 800fa7c:	0799      	lsls	r1, r3, #30
 800fa7e:	bf04      	itt	eq
 800fa80:	089b      	lsreq	r3, r3, #2
 800fa82:	3002      	addeq	r0, #2
 800fa84:	07d9      	lsls	r1, r3, #31
 800fa86:	d403      	bmi.n	800fa90 <__lo0bits+0x4e>
 800fa88:	085b      	lsrs	r3, r3, #1
 800fa8a:	f100 0001 	add.w	r0, r0, #1
 800fa8e:	d003      	beq.n	800fa98 <__lo0bits+0x56>
 800fa90:	6013      	str	r3, [r2, #0]
 800fa92:	4770      	bx	lr
 800fa94:	2000      	movs	r0, #0
 800fa96:	4770      	bx	lr
 800fa98:	2020      	movs	r0, #32
 800fa9a:	4770      	bx	lr

0800fa9c <__i2b>:
 800fa9c:	b510      	push	{r4, lr}
 800fa9e:	460c      	mov	r4, r1
 800faa0:	2101      	movs	r1, #1
 800faa2:	f7ff ff07 	bl	800f8b4 <_Balloc>
 800faa6:	4602      	mov	r2, r0
 800faa8:	b928      	cbnz	r0, 800fab6 <__i2b+0x1a>
 800faaa:	4b05      	ldr	r3, [pc, #20]	@ (800fac0 <__i2b+0x24>)
 800faac:	4805      	ldr	r0, [pc, #20]	@ (800fac4 <__i2b+0x28>)
 800faae:	f240 1145 	movw	r1, #325	@ 0x145
 800fab2:	f000 fb4b 	bl	801014c <__assert_func>
 800fab6:	2301      	movs	r3, #1
 800fab8:	6144      	str	r4, [r0, #20]
 800faba:	6103      	str	r3, [r0, #16]
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	bf00      	nop
 800fac0:	080108c5 	.word	0x080108c5
 800fac4:	080108d6 	.word	0x080108d6

0800fac8 <__multiply>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	4614      	mov	r4, r2
 800face:	690a      	ldr	r2, [r1, #16]
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	bfa8      	it	ge
 800fad6:	4623      	movge	r3, r4
 800fad8:	460f      	mov	r7, r1
 800fada:	bfa4      	itt	ge
 800fadc:	460c      	movge	r4, r1
 800fade:	461f      	movge	r7, r3
 800fae0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fae4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fae8:	68a3      	ldr	r3, [r4, #8]
 800faea:	6861      	ldr	r1, [r4, #4]
 800faec:	eb0a 0609 	add.w	r6, sl, r9
 800faf0:	42b3      	cmp	r3, r6
 800faf2:	b085      	sub	sp, #20
 800faf4:	bfb8      	it	lt
 800faf6:	3101      	addlt	r1, #1
 800faf8:	f7ff fedc 	bl	800f8b4 <_Balloc>
 800fafc:	b930      	cbnz	r0, 800fb0c <__multiply+0x44>
 800fafe:	4602      	mov	r2, r0
 800fb00:	4b44      	ldr	r3, [pc, #272]	@ (800fc14 <__multiply+0x14c>)
 800fb02:	4845      	ldr	r0, [pc, #276]	@ (800fc18 <__multiply+0x150>)
 800fb04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb08:	f000 fb20 	bl	801014c <__assert_func>
 800fb0c:	f100 0514 	add.w	r5, r0, #20
 800fb10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb14:	462b      	mov	r3, r5
 800fb16:	2200      	movs	r2, #0
 800fb18:	4543      	cmp	r3, r8
 800fb1a:	d321      	bcc.n	800fb60 <__multiply+0x98>
 800fb1c:	f107 0114 	add.w	r1, r7, #20
 800fb20:	f104 0214 	add.w	r2, r4, #20
 800fb24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb2c:	9302      	str	r3, [sp, #8]
 800fb2e:	1b13      	subs	r3, r2, r4
 800fb30:	3b15      	subs	r3, #21
 800fb32:	f023 0303 	bic.w	r3, r3, #3
 800fb36:	3304      	adds	r3, #4
 800fb38:	f104 0715 	add.w	r7, r4, #21
 800fb3c:	42ba      	cmp	r2, r7
 800fb3e:	bf38      	it	cc
 800fb40:	2304      	movcc	r3, #4
 800fb42:	9301      	str	r3, [sp, #4]
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	9103      	str	r1, [sp, #12]
 800fb48:	428b      	cmp	r3, r1
 800fb4a:	d80c      	bhi.n	800fb66 <__multiply+0x9e>
 800fb4c:	2e00      	cmp	r6, #0
 800fb4e:	dd03      	ble.n	800fb58 <__multiply+0x90>
 800fb50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d05b      	beq.n	800fc10 <__multiply+0x148>
 800fb58:	6106      	str	r6, [r0, #16]
 800fb5a:	b005      	add	sp, #20
 800fb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb60:	f843 2b04 	str.w	r2, [r3], #4
 800fb64:	e7d8      	b.n	800fb18 <__multiply+0x50>
 800fb66:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb6a:	f1ba 0f00 	cmp.w	sl, #0
 800fb6e:	d024      	beq.n	800fbba <__multiply+0xf2>
 800fb70:	f104 0e14 	add.w	lr, r4, #20
 800fb74:	46a9      	mov	r9, r5
 800fb76:	f04f 0c00 	mov.w	ip, #0
 800fb7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb7e:	f8d9 3000 	ldr.w	r3, [r9]
 800fb82:	fa1f fb87 	uxth.w	fp, r7
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fb90:	f8d9 7000 	ldr.w	r7, [r9]
 800fb94:	4463      	add	r3, ip
 800fb96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb9a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fb9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fba8:	4572      	cmp	r2, lr
 800fbaa:	f849 3b04 	str.w	r3, [r9], #4
 800fbae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fbb2:	d8e2      	bhi.n	800fb7a <__multiply+0xb2>
 800fbb4:	9b01      	ldr	r3, [sp, #4]
 800fbb6:	f845 c003 	str.w	ip, [r5, r3]
 800fbba:	9b03      	ldr	r3, [sp, #12]
 800fbbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fbc0:	3104      	adds	r1, #4
 800fbc2:	f1b9 0f00 	cmp.w	r9, #0
 800fbc6:	d021      	beq.n	800fc0c <__multiply+0x144>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	f104 0c14 	add.w	ip, r4, #20
 800fbce:	46ae      	mov	lr, r5
 800fbd0:	f04f 0a00 	mov.w	sl, #0
 800fbd4:	f8bc b000 	ldrh.w	fp, [ip]
 800fbd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fbdc:	fb09 770b 	mla	r7, r9, fp, r7
 800fbe0:	4457      	add	r7, sl
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fbe8:	f84e 3b04 	str.w	r3, [lr], #4
 800fbec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbf4:	f8be 3000 	ldrh.w	r3, [lr]
 800fbf8:	fb09 330a 	mla	r3, r9, sl, r3
 800fbfc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fc00:	4562      	cmp	r2, ip
 800fc02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc06:	d8e5      	bhi.n	800fbd4 <__multiply+0x10c>
 800fc08:	9f01      	ldr	r7, [sp, #4]
 800fc0a:	51eb      	str	r3, [r5, r7]
 800fc0c:	3504      	adds	r5, #4
 800fc0e:	e799      	b.n	800fb44 <__multiply+0x7c>
 800fc10:	3e01      	subs	r6, #1
 800fc12:	e79b      	b.n	800fb4c <__multiply+0x84>
 800fc14:	080108c5 	.word	0x080108c5
 800fc18:	080108d6 	.word	0x080108d6

0800fc1c <__pow5mult>:
 800fc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc20:	4615      	mov	r5, r2
 800fc22:	f012 0203 	ands.w	r2, r2, #3
 800fc26:	4607      	mov	r7, r0
 800fc28:	460e      	mov	r6, r1
 800fc2a:	d007      	beq.n	800fc3c <__pow5mult+0x20>
 800fc2c:	4c25      	ldr	r4, [pc, #148]	@ (800fcc4 <__pow5mult+0xa8>)
 800fc2e:	3a01      	subs	r2, #1
 800fc30:	2300      	movs	r3, #0
 800fc32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc36:	f7ff fe9f 	bl	800f978 <__multadd>
 800fc3a:	4606      	mov	r6, r0
 800fc3c:	10ad      	asrs	r5, r5, #2
 800fc3e:	d03d      	beq.n	800fcbc <__pow5mult+0xa0>
 800fc40:	69fc      	ldr	r4, [r7, #28]
 800fc42:	b97c      	cbnz	r4, 800fc64 <__pow5mult+0x48>
 800fc44:	2010      	movs	r0, #16
 800fc46:	f7ff fd7f 	bl	800f748 <malloc>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	61f8      	str	r0, [r7, #28]
 800fc4e:	b928      	cbnz	r0, 800fc5c <__pow5mult+0x40>
 800fc50:	4b1d      	ldr	r3, [pc, #116]	@ (800fcc8 <__pow5mult+0xac>)
 800fc52:	481e      	ldr	r0, [pc, #120]	@ (800fccc <__pow5mult+0xb0>)
 800fc54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc58:	f000 fa78 	bl	801014c <__assert_func>
 800fc5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc60:	6004      	str	r4, [r0, #0]
 800fc62:	60c4      	str	r4, [r0, #12]
 800fc64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc6c:	b94c      	cbnz	r4, 800fc82 <__pow5mult+0x66>
 800fc6e:	f240 2171 	movw	r1, #625	@ 0x271
 800fc72:	4638      	mov	r0, r7
 800fc74:	f7ff ff12 	bl	800fa9c <__i2b>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc7e:	4604      	mov	r4, r0
 800fc80:	6003      	str	r3, [r0, #0]
 800fc82:	f04f 0900 	mov.w	r9, #0
 800fc86:	07eb      	lsls	r3, r5, #31
 800fc88:	d50a      	bpl.n	800fca0 <__pow5mult+0x84>
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4622      	mov	r2, r4
 800fc8e:	4638      	mov	r0, r7
 800fc90:	f7ff ff1a 	bl	800fac8 <__multiply>
 800fc94:	4631      	mov	r1, r6
 800fc96:	4680      	mov	r8, r0
 800fc98:	4638      	mov	r0, r7
 800fc9a:	f7ff fe4b 	bl	800f934 <_Bfree>
 800fc9e:	4646      	mov	r6, r8
 800fca0:	106d      	asrs	r5, r5, #1
 800fca2:	d00b      	beq.n	800fcbc <__pow5mult+0xa0>
 800fca4:	6820      	ldr	r0, [r4, #0]
 800fca6:	b938      	cbnz	r0, 800fcb8 <__pow5mult+0x9c>
 800fca8:	4622      	mov	r2, r4
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7ff ff0b 	bl	800fac8 <__multiply>
 800fcb2:	6020      	str	r0, [r4, #0]
 800fcb4:	f8c0 9000 	str.w	r9, [r0]
 800fcb8:	4604      	mov	r4, r0
 800fcba:	e7e4      	b.n	800fc86 <__pow5mult+0x6a>
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcc2:	bf00      	nop
 800fcc4:	08010930 	.word	0x08010930
 800fcc8:	08010856 	.word	0x08010856
 800fccc:	080108d6 	.word	0x080108d6

0800fcd0 <__lshift>:
 800fcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	6849      	ldr	r1, [r1, #4]
 800fcd8:	6923      	ldr	r3, [r4, #16]
 800fcda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	4607      	mov	r7, r0
 800fce2:	4691      	mov	r9, r2
 800fce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fce8:	f108 0601 	add.w	r6, r8, #1
 800fcec:	42b3      	cmp	r3, r6
 800fcee:	db0b      	blt.n	800fd08 <__lshift+0x38>
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	f7ff fddf 	bl	800f8b4 <_Balloc>
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	b948      	cbnz	r0, 800fd0e <__lshift+0x3e>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	4b28      	ldr	r3, [pc, #160]	@ (800fda0 <__lshift+0xd0>)
 800fcfe:	4829      	ldr	r0, [pc, #164]	@ (800fda4 <__lshift+0xd4>)
 800fd00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd04:	f000 fa22 	bl	801014c <__assert_func>
 800fd08:	3101      	adds	r1, #1
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	e7ee      	b.n	800fcec <__lshift+0x1c>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f100 0114 	add.w	r1, r0, #20
 800fd14:	f100 0210 	add.w	r2, r0, #16
 800fd18:	4618      	mov	r0, r3
 800fd1a:	4553      	cmp	r3, sl
 800fd1c:	db33      	blt.n	800fd86 <__lshift+0xb6>
 800fd1e:	6920      	ldr	r0, [r4, #16]
 800fd20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd24:	f104 0314 	add.w	r3, r4, #20
 800fd28:	f019 091f 	ands.w	r9, r9, #31
 800fd2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd34:	d02b      	beq.n	800fd8e <__lshift+0xbe>
 800fd36:	f1c9 0e20 	rsb	lr, r9, #32
 800fd3a:	468a      	mov	sl, r1
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	6818      	ldr	r0, [r3, #0]
 800fd40:	fa00 f009 	lsl.w	r0, r0, r9
 800fd44:	4310      	orrs	r0, r2
 800fd46:	f84a 0b04 	str.w	r0, [sl], #4
 800fd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd4e:	459c      	cmp	ip, r3
 800fd50:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd54:	d8f3      	bhi.n	800fd3e <__lshift+0x6e>
 800fd56:	ebac 0304 	sub.w	r3, ip, r4
 800fd5a:	3b15      	subs	r3, #21
 800fd5c:	f023 0303 	bic.w	r3, r3, #3
 800fd60:	3304      	adds	r3, #4
 800fd62:	f104 0015 	add.w	r0, r4, #21
 800fd66:	4584      	cmp	ip, r0
 800fd68:	bf38      	it	cc
 800fd6a:	2304      	movcc	r3, #4
 800fd6c:	50ca      	str	r2, [r1, r3]
 800fd6e:	b10a      	cbz	r2, 800fd74 <__lshift+0xa4>
 800fd70:	f108 0602 	add.w	r6, r8, #2
 800fd74:	3e01      	subs	r6, #1
 800fd76:	4638      	mov	r0, r7
 800fd78:	612e      	str	r6, [r5, #16]
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	f7ff fdda 	bl	800f934 <_Bfree>
 800fd80:	4628      	mov	r0, r5
 800fd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd86:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	e7c5      	b.n	800fd1a <__lshift+0x4a>
 800fd8e:	3904      	subs	r1, #4
 800fd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd94:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd98:	459c      	cmp	ip, r3
 800fd9a:	d8f9      	bhi.n	800fd90 <__lshift+0xc0>
 800fd9c:	e7ea      	b.n	800fd74 <__lshift+0xa4>
 800fd9e:	bf00      	nop
 800fda0:	080108c5 	.word	0x080108c5
 800fda4:	080108d6 	.word	0x080108d6

0800fda8 <__mcmp>:
 800fda8:	690a      	ldr	r2, [r1, #16]
 800fdaa:	4603      	mov	r3, r0
 800fdac:	6900      	ldr	r0, [r0, #16]
 800fdae:	1a80      	subs	r0, r0, r2
 800fdb0:	b530      	push	{r4, r5, lr}
 800fdb2:	d10e      	bne.n	800fdd2 <__mcmp+0x2a>
 800fdb4:	3314      	adds	r3, #20
 800fdb6:	3114      	adds	r1, #20
 800fdb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fdbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fdc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fdc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fdc8:	4295      	cmp	r5, r2
 800fdca:	d003      	beq.n	800fdd4 <__mcmp+0x2c>
 800fdcc:	d205      	bcs.n	800fdda <__mcmp+0x32>
 800fdce:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd2:	bd30      	pop	{r4, r5, pc}
 800fdd4:	42a3      	cmp	r3, r4
 800fdd6:	d3f3      	bcc.n	800fdc0 <__mcmp+0x18>
 800fdd8:	e7fb      	b.n	800fdd2 <__mcmp+0x2a>
 800fdda:	2001      	movs	r0, #1
 800fddc:	e7f9      	b.n	800fdd2 <__mcmp+0x2a>
	...

0800fde0 <__mdiff>:
 800fde0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde4:	4689      	mov	r9, r1
 800fde6:	4606      	mov	r6, r0
 800fde8:	4611      	mov	r1, r2
 800fdea:	4648      	mov	r0, r9
 800fdec:	4614      	mov	r4, r2
 800fdee:	f7ff ffdb 	bl	800fda8 <__mcmp>
 800fdf2:	1e05      	subs	r5, r0, #0
 800fdf4:	d112      	bne.n	800fe1c <__mdiff+0x3c>
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff fd5b 	bl	800f8b4 <_Balloc>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	b928      	cbnz	r0, 800fe0e <__mdiff+0x2e>
 800fe02:	4b3f      	ldr	r3, [pc, #252]	@ (800ff00 <__mdiff+0x120>)
 800fe04:	f240 2137 	movw	r1, #567	@ 0x237
 800fe08:	483e      	ldr	r0, [pc, #248]	@ (800ff04 <__mdiff+0x124>)
 800fe0a:	f000 f99f 	bl	801014c <__assert_func>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe14:	4610      	mov	r0, r2
 800fe16:	b003      	add	sp, #12
 800fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1c:	bfbc      	itt	lt
 800fe1e:	464b      	movlt	r3, r9
 800fe20:	46a1      	movlt	r9, r4
 800fe22:	4630      	mov	r0, r6
 800fe24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe28:	bfba      	itte	lt
 800fe2a:	461c      	movlt	r4, r3
 800fe2c:	2501      	movlt	r5, #1
 800fe2e:	2500      	movge	r5, #0
 800fe30:	f7ff fd40 	bl	800f8b4 <_Balloc>
 800fe34:	4602      	mov	r2, r0
 800fe36:	b918      	cbnz	r0, 800fe40 <__mdiff+0x60>
 800fe38:	4b31      	ldr	r3, [pc, #196]	@ (800ff00 <__mdiff+0x120>)
 800fe3a:	f240 2145 	movw	r1, #581	@ 0x245
 800fe3e:	e7e3      	b.n	800fe08 <__mdiff+0x28>
 800fe40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe44:	6926      	ldr	r6, [r4, #16]
 800fe46:	60c5      	str	r5, [r0, #12]
 800fe48:	f109 0310 	add.w	r3, r9, #16
 800fe4c:	f109 0514 	add.w	r5, r9, #20
 800fe50:	f104 0e14 	add.w	lr, r4, #20
 800fe54:	f100 0b14 	add.w	fp, r0, #20
 800fe58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe60:	9301      	str	r3, [sp, #4]
 800fe62:	46d9      	mov	r9, fp
 800fe64:	f04f 0c00 	mov.w	ip, #0
 800fe68:	9b01      	ldr	r3, [sp, #4]
 800fe6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	fa1f f38a 	uxth.w	r3, sl
 800fe78:	4619      	mov	r1, r3
 800fe7a:	b283      	uxth	r3, r0
 800fe7c:	1acb      	subs	r3, r1, r3
 800fe7e:	0c00      	lsrs	r0, r0, #16
 800fe80:	4463      	add	r3, ip
 800fe82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe90:	4576      	cmp	r6, lr
 800fe92:	f849 3b04 	str.w	r3, [r9], #4
 800fe96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe9a:	d8e5      	bhi.n	800fe68 <__mdiff+0x88>
 800fe9c:	1b33      	subs	r3, r6, r4
 800fe9e:	3b15      	subs	r3, #21
 800fea0:	f023 0303 	bic.w	r3, r3, #3
 800fea4:	3415      	adds	r4, #21
 800fea6:	3304      	adds	r3, #4
 800fea8:	42a6      	cmp	r6, r4
 800feaa:	bf38      	it	cc
 800feac:	2304      	movcc	r3, #4
 800feae:	441d      	add	r5, r3
 800feb0:	445b      	add	r3, fp
 800feb2:	461e      	mov	r6, r3
 800feb4:	462c      	mov	r4, r5
 800feb6:	4544      	cmp	r4, r8
 800feb8:	d30e      	bcc.n	800fed8 <__mdiff+0xf8>
 800feba:	f108 0103 	add.w	r1, r8, #3
 800febe:	1b49      	subs	r1, r1, r5
 800fec0:	f021 0103 	bic.w	r1, r1, #3
 800fec4:	3d03      	subs	r5, #3
 800fec6:	45a8      	cmp	r8, r5
 800fec8:	bf38      	it	cc
 800feca:	2100      	movcc	r1, #0
 800fecc:	440b      	add	r3, r1
 800fece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fed2:	b191      	cbz	r1, 800fefa <__mdiff+0x11a>
 800fed4:	6117      	str	r7, [r2, #16]
 800fed6:	e79d      	b.n	800fe14 <__mdiff+0x34>
 800fed8:	f854 1b04 	ldr.w	r1, [r4], #4
 800fedc:	46e6      	mov	lr, ip
 800fede:	0c08      	lsrs	r0, r1, #16
 800fee0:	fa1c fc81 	uxtah	ip, ip, r1
 800fee4:	4471      	add	r1, lr
 800fee6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800feea:	b289      	uxth	r1, r1
 800feec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fef0:	f846 1b04 	str.w	r1, [r6], #4
 800fef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fef8:	e7dd      	b.n	800feb6 <__mdiff+0xd6>
 800fefa:	3f01      	subs	r7, #1
 800fefc:	e7e7      	b.n	800fece <__mdiff+0xee>
 800fefe:	bf00      	nop
 800ff00:	080108c5 	.word	0x080108c5
 800ff04:	080108d6 	.word	0x080108d6

0800ff08 <__d2b>:
 800ff08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff0c:	460f      	mov	r7, r1
 800ff0e:	2101      	movs	r1, #1
 800ff10:	ec59 8b10 	vmov	r8, r9, d0
 800ff14:	4616      	mov	r6, r2
 800ff16:	f7ff fccd 	bl	800f8b4 <_Balloc>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	b930      	cbnz	r0, 800ff2c <__d2b+0x24>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	4b23      	ldr	r3, [pc, #140]	@ (800ffb0 <__d2b+0xa8>)
 800ff22:	4824      	ldr	r0, [pc, #144]	@ (800ffb4 <__d2b+0xac>)
 800ff24:	f240 310f 	movw	r1, #783	@ 0x30f
 800ff28:	f000 f910 	bl	801014c <__assert_func>
 800ff2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff34:	b10d      	cbz	r5, 800ff3a <__d2b+0x32>
 800ff36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff3a:	9301      	str	r3, [sp, #4]
 800ff3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ff40:	d023      	beq.n	800ff8a <__d2b+0x82>
 800ff42:	4668      	mov	r0, sp
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	f7ff fd7c 	bl	800fa42 <__lo0bits>
 800ff4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ff4e:	b1d0      	cbz	r0, 800ff86 <__d2b+0x7e>
 800ff50:	f1c0 0320 	rsb	r3, r0, #32
 800ff54:	fa02 f303 	lsl.w	r3, r2, r3
 800ff58:	430b      	orrs	r3, r1
 800ff5a:	40c2      	lsrs	r2, r0
 800ff5c:	6163      	str	r3, [r4, #20]
 800ff5e:	9201      	str	r2, [sp, #4]
 800ff60:	9b01      	ldr	r3, [sp, #4]
 800ff62:	61a3      	str	r3, [r4, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bf0c      	ite	eq
 800ff68:	2201      	moveq	r2, #1
 800ff6a:	2202      	movne	r2, #2
 800ff6c:	6122      	str	r2, [r4, #16]
 800ff6e:	b1a5      	cbz	r5, 800ff9a <__d2b+0x92>
 800ff70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ff74:	4405      	add	r5, r0
 800ff76:	603d      	str	r5, [r7, #0]
 800ff78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ff7c:	6030      	str	r0, [r6, #0]
 800ff7e:	4620      	mov	r0, r4
 800ff80:	b003      	add	sp, #12
 800ff82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff86:	6161      	str	r1, [r4, #20]
 800ff88:	e7ea      	b.n	800ff60 <__d2b+0x58>
 800ff8a:	a801      	add	r0, sp, #4
 800ff8c:	f7ff fd59 	bl	800fa42 <__lo0bits>
 800ff90:	9b01      	ldr	r3, [sp, #4]
 800ff92:	6163      	str	r3, [r4, #20]
 800ff94:	3020      	adds	r0, #32
 800ff96:	2201      	movs	r2, #1
 800ff98:	e7e8      	b.n	800ff6c <__d2b+0x64>
 800ff9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ffa2:	6038      	str	r0, [r7, #0]
 800ffa4:	6918      	ldr	r0, [r3, #16]
 800ffa6:	f7ff fd2d 	bl	800fa04 <__hi0bits>
 800ffaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffae:	e7e5      	b.n	800ff7c <__d2b+0x74>
 800ffb0:	080108c5 	.word	0x080108c5
 800ffb4:	080108d6 	.word	0x080108d6

0800ffb8 <__sflush_r>:
 800ffb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ffbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc0:	0716      	lsls	r6, r2, #28
 800ffc2:	4605      	mov	r5, r0
 800ffc4:	460c      	mov	r4, r1
 800ffc6:	d454      	bmi.n	8010072 <__sflush_r+0xba>
 800ffc8:	684b      	ldr	r3, [r1, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	dc02      	bgt.n	800ffd4 <__sflush_r+0x1c>
 800ffce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	dd48      	ble.n	8010066 <__sflush_r+0xae>
 800ffd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	d045      	beq.n	8010066 <__sflush_r+0xae>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ffe0:	682f      	ldr	r7, [r5, #0]
 800ffe2:	6a21      	ldr	r1, [r4, #32]
 800ffe4:	602b      	str	r3, [r5, #0]
 800ffe6:	d030      	beq.n	801004a <__sflush_r+0x92>
 800ffe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	0759      	lsls	r1, r3, #29
 800ffee:	d505      	bpl.n	800fffc <__sflush_r+0x44>
 800fff0:	6863      	ldr	r3, [r4, #4]
 800fff2:	1ad2      	subs	r2, r2, r3
 800fff4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fff6:	b10b      	cbz	r3, 800fffc <__sflush_r+0x44>
 800fff8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fffa:	1ad2      	subs	r2, r2, r3
 800fffc:	2300      	movs	r3, #0
 800fffe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010000:	6a21      	ldr	r1, [r4, #32]
 8010002:	4628      	mov	r0, r5
 8010004:	47b0      	blx	r6
 8010006:	1c43      	adds	r3, r0, #1
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	d106      	bne.n	801001a <__sflush_r+0x62>
 801000c:	6829      	ldr	r1, [r5, #0]
 801000e:	291d      	cmp	r1, #29
 8010010:	d82b      	bhi.n	801006a <__sflush_r+0xb2>
 8010012:	4a2a      	ldr	r2, [pc, #168]	@ (80100bc <__sflush_r+0x104>)
 8010014:	410a      	asrs	r2, r1
 8010016:	07d6      	lsls	r6, r2, #31
 8010018:	d427      	bmi.n	801006a <__sflush_r+0xb2>
 801001a:	2200      	movs	r2, #0
 801001c:	6062      	str	r2, [r4, #4]
 801001e:	04d9      	lsls	r1, r3, #19
 8010020:	6922      	ldr	r2, [r4, #16]
 8010022:	6022      	str	r2, [r4, #0]
 8010024:	d504      	bpl.n	8010030 <__sflush_r+0x78>
 8010026:	1c42      	adds	r2, r0, #1
 8010028:	d101      	bne.n	801002e <__sflush_r+0x76>
 801002a:	682b      	ldr	r3, [r5, #0]
 801002c:	b903      	cbnz	r3, 8010030 <__sflush_r+0x78>
 801002e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010032:	602f      	str	r7, [r5, #0]
 8010034:	b1b9      	cbz	r1, 8010066 <__sflush_r+0xae>
 8010036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801003a:	4299      	cmp	r1, r3
 801003c:	d002      	beq.n	8010044 <__sflush_r+0x8c>
 801003e:	4628      	mov	r0, r5
 8010040:	f7ff fb38 	bl	800f6b4 <_free_r>
 8010044:	2300      	movs	r3, #0
 8010046:	6363      	str	r3, [r4, #52]	@ 0x34
 8010048:	e00d      	b.n	8010066 <__sflush_r+0xae>
 801004a:	2301      	movs	r3, #1
 801004c:	4628      	mov	r0, r5
 801004e:	47b0      	blx	r6
 8010050:	4602      	mov	r2, r0
 8010052:	1c50      	adds	r0, r2, #1
 8010054:	d1c9      	bne.n	800ffea <__sflush_r+0x32>
 8010056:	682b      	ldr	r3, [r5, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d0c6      	beq.n	800ffea <__sflush_r+0x32>
 801005c:	2b1d      	cmp	r3, #29
 801005e:	d001      	beq.n	8010064 <__sflush_r+0xac>
 8010060:	2b16      	cmp	r3, #22
 8010062:	d11e      	bne.n	80100a2 <__sflush_r+0xea>
 8010064:	602f      	str	r7, [r5, #0]
 8010066:	2000      	movs	r0, #0
 8010068:	e022      	b.n	80100b0 <__sflush_r+0xf8>
 801006a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801006e:	b21b      	sxth	r3, r3
 8010070:	e01b      	b.n	80100aa <__sflush_r+0xf2>
 8010072:	690f      	ldr	r7, [r1, #16]
 8010074:	2f00      	cmp	r7, #0
 8010076:	d0f6      	beq.n	8010066 <__sflush_r+0xae>
 8010078:	0793      	lsls	r3, r2, #30
 801007a:	680e      	ldr	r6, [r1, #0]
 801007c:	bf08      	it	eq
 801007e:	694b      	ldreq	r3, [r1, #20]
 8010080:	600f      	str	r7, [r1, #0]
 8010082:	bf18      	it	ne
 8010084:	2300      	movne	r3, #0
 8010086:	eba6 0807 	sub.w	r8, r6, r7
 801008a:	608b      	str	r3, [r1, #8]
 801008c:	f1b8 0f00 	cmp.w	r8, #0
 8010090:	dde9      	ble.n	8010066 <__sflush_r+0xae>
 8010092:	6a21      	ldr	r1, [r4, #32]
 8010094:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010096:	4643      	mov	r3, r8
 8010098:	463a      	mov	r2, r7
 801009a:	4628      	mov	r0, r5
 801009c:	47b0      	blx	r6
 801009e:	2800      	cmp	r0, #0
 80100a0:	dc08      	bgt.n	80100b4 <__sflush_r+0xfc>
 80100a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100aa:	81a3      	strh	r3, [r4, #12]
 80100ac:	f04f 30ff 	mov.w	r0, #4294967295
 80100b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b4:	4407      	add	r7, r0
 80100b6:	eba8 0800 	sub.w	r8, r8, r0
 80100ba:	e7e7      	b.n	801008c <__sflush_r+0xd4>
 80100bc:	dfbffffe 	.word	0xdfbffffe

080100c0 <_fflush_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	690b      	ldr	r3, [r1, #16]
 80100c4:	4605      	mov	r5, r0
 80100c6:	460c      	mov	r4, r1
 80100c8:	b913      	cbnz	r3, 80100d0 <_fflush_r+0x10>
 80100ca:	2500      	movs	r5, #0
 80100cc:	4628      	mov	r0, r5
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	b118      	cbz	r0, 80100da <_fflush_r+0x1a>
 80100d2:	6a03      	ldr	r3, [r0, #32]
 80100d4:	b90b      	cbnz	r3, 80100da <_fflush_r+0x1a>
 80100d6:	f7fe fc13 	bl	800e900 <__sinit>
 80100da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d0f3      	beq.n	80100ca <_fflush_r+0xa>
 80100e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80100e4:	07d0      	lsls	r0, r2, #31
 80100e6:	d404      	bmi.n	80100f2 <_fflush_r+0x32>
 80100e8:	0599      	lsls	r1, r3, #22
 80100ea:	d402      	bmi.n	80100f2 <_fflush_r+0x32>
 80100ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100ee:	f7fe fcfe 	bl	800eaee <__retarget_lock_acquire_recursive>
 80100f2:	4628      	mov	r0, r5
 80100f4:	4621      	mov	r1, r4
 80100f6:	f7ff ff5f 	bl	800ffb8 <__sflush_r>
 80100fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100fc:	07da      	lsls	r2, r3, #31
 80100fe:	4605      	mov	r5, r0
 8010100:	d4e4      	bmi.n	80100cc <_fflush_r+0xc>
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	059b      	lsls	r3, r3, #22
 8010106:	d4e1      	bmi.n	80100cc <_fflush_r+0xc>
 8010108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801010a:	f7fe fcf1 	bl	800eaf0 <__retarget_lock_release_recursive>
 801010e:	e7dd      	b.n	80100cc <_fflush_r+0xc>

08010110 <_sbrk_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d06      	ldr	r5, [pc, #24]	@ (801012c <_sbrk_r+0x1c>)
 8010114:	2300      	movs	r3, #0
 8010116:	4604      	mov	r4, r0
 8010118:	4608      	mov	r0, r1
 801011a:	602b      	str	r3, [r5, #0]
 801011c:	f7f1 fc32 	bl	8001984 <_sbrk>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	d102      	bne.n	801012a <_sbrk_r+0x1a>
 8010124:	682b      	ldr	r3, [r5, #0]
 8010126:	b103      	cbz	r3, 801012a <_sbrk_r+0x1a>
 8010128:	6023      	str	r3, [r4, #0]
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	24000720 	.word	0x24000720

08010130 <memcpy>:
 8010130:	440a      	add	r2, r1
 8010132:	4291      	cmp	r1, r2
 8010134:	f100 33ff 	add.w	r3, r0, #4294967295
 8010138:	d100      	bne.n	801013c <memcpy+0xc>
 801013a:	4770      	bx	lr
 801013c:	b510      	push	{r4, lr}
 801013e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010146:	4291      	cmp	r1, r2
 8010148:	d1f9      	bne.n	801013e <memcpy+0xe>
 801014a:	bd10      	pop	{r4, pc}

0801014c <__assert_func>:
 801014c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801014e:	4614      	mov	r4, r2
 8010150:	461a      	mov	r2, r3
 8010152:	4b09      	ldr	r3, [pc, #36]	@ (8010178 <__assert_func+0x2c>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4605      	mov	r5, r0
 8010158:	68d8      	ldr	r0, [r3, #12]
 801015a:	b954      	cbnz	r4, 8010172 <__assert_func+0x26>
 801015c:	4b07      	ldr	r3, [pc, #28]	@ (801017c <__assert_func+0x30>)
 801015e:	461c      	mov	r4, r3
 8010160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010164:	9100      	str	r1, [sp, #0]
 8010166:	462b      	mov	r3, r5
 8010168:	4905      	ldr	r1, [pc, #20]	@ (8010180 <__assert_func+0x34>)
 801016a:	f000 f841 	bl	80101f0 <fiprintf>
 801016e:	f000 f851 	bl	8010214 <abort>
 8010172:	4b04      	ldr	r3, [pc, #16]	@ (8010184 <__assert_func+0x38>)
 8010174:	e7f4      	b.n	8010160 <__assert_func+0x14>
 8010176:	bf00      	nop
 8010178:	2400002c 	.word	0x2400002c
 801017c:	08010a75 	.word	0x08010a75
 8010180:	08010a47 	.word	0x08010a47
 8010184:	08010a3a 	.word	0x08010a3a

08010188 <_calloc_r>:
 8010188:	b570      	push	{r4, r5, r6, lr}
 801018a:	fba1 5402 	umull	r5, r4, r1, r2
 801018e:	b93c      	cbnz	r4, 80101a0 <_calloc_r+0x18>
 8010190:	4629      	mov	r1, r5
 8010192:	f7ff fb03 	bl	800f79c <_malloc_r>
 8010196:	4606      	mov	r6, r0
 8010198:	b928      	cbnz	r0, 80101a6 <_calloc_r+0x1e>
 801019a:	2600      	movs	r6, #0
 801019c:	4630      	mov	r0, r6
 801019e:	bd70      	pop	{r4, r5, r6, pc}
 80101a0:	220c      	movs	r2, #12
 80101a2:	6002      	str	r2, [r0, #0]
 80101a4:	e7f9      	b.n	801019a <_calloc_r+0x12>
 80101a6:	462a      	mov	r2, r5
 80101a8:	4621      	mov	r1, r4
 80101aa:	f7fe fc22 	bl	800e9f2 <memset>
 80101ae:	e7f5      	b.n	801019c <_calloc_r+0x14>

080101b0 <__ascii_mbtowc>:
 80101b0:	b082      	sub	sp, #8
 80101b2:	b901      	cbnz	r1, 80101b6 <__ascii_mbtowc+0x6>
 80101b4:	a901      	add	r1, sp, #4
 80101b6:	b142      	cbz	r2, 80101ca <__ascii_mbtowc+0x1a>
 80101b8:	b14b      	cbz	r3, 80101ce <__ascii_mbtowc+0x1e>
 80101ba:	7813      	ldrb	r3, [r2, #0]
 80101bc:	600b      	str	r3, [r1, #0]
 80101be:	7812      	ldrb	r2, [r2, #0]
 80101c0:	1e10      	subs	r0, r2, #0
 80101c2:	bf18      	it	ne
 80101c4:	2001      	movne	r0, #1
 80101c6:	b002      	add	sp, #8
 80101c8:	4770      	bx	lr
 80101ca:	4610      	mov	r0, r2
 80101cc:	e7fb      	b.n	80101c6 <__ascii_mbtowc+0x16>
 80101ce:	f06f 0001 	mvn.w	r0, #1
 80101d2:	e7f8      	b.n	80101c6 <__ascii_mbtowc+0x16>

080101d4 <__ascii_wctomb>:
 80101d4:	4603      	mov	r3, r0
 80101d6:	4608      	mov	r0, r1
 80101d8:	b141      	cbz	r1, 80101ec <__ascii_wctomb+0x18>
 80101da:	2aff      	cmp	r2, #255	@ 0xff
 80101dc:	d904      	bls.n	80101e8 <__ascii_wctomb+0x14>
 80101de:	228a      	movs	r2, #138	@ 0x8a
 80101e0:	601a      	str	r2, [r3, #0]
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295
 80101e6:	4770      	bx	lr
 80101e8:	700a      	strb	r2, [r1, #0]
 80101ea:	2001      	movs	r0, #1
 80101ec:	4770      	bx	lr
	...

080101f0 <fiprintf>:
 80101f0:	b40e      	push	{r1, r2, r3}
 80101f2:	b503      	push	{r0, r1, lr}
 80101f4:	4601      	mov	r1, r0
 80101f6:	ab03      	add	r3, sp, #12
 80101f8:	4805      	ldr	r0, [pc, #20]	@ (8010210 <fiprintf+0x20>)
 80101fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fe:	6800      	ldr	r0, [r0, #0]
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	f000 f837 	bl	8010274 <_vfiprintf_r>
 8010206:	b002      	add	sp, #8
 8010208:	f85d eb04 	ldr.w	lr, [sp], #4
 801020c:	b003      	add	sp, #12
 801020e:	4770      	bx	lr
 8010210:	2400002c 	.word	0x2400002c

08010214 <abort>:
 8010214:	b508      	push	{r3, lr}
 8010216:	2006      	movs	r0, #6
 8010218:	f000 fa00 	bl	801061c <raise>
 801021c:	2001      	movs	r0, #1
 801021e:	f7f1 fb39 	bl	8001894 <_exit>

08010222 <__sfputc_r>:
 8010222:	6893      	ldr	r3, [r2, #8]
 8010224:	3b01      	subs	r3, #1
 8010226:	2b00      	cmp	r3, #0
 8010228:	b410      	push	{r4}
 801022a:	6093      	str	r3, [r2, #8]
 801022c:	da08      	bge.n	8010240 <__sfputc_r+0x1e>
 801022e:	6994      	ldr	r4, [r2, #24]
 8010230:	42a3      	cmp	r3, r4
 8010232:	db01      	blt.n	8010238 <__sfputc_r+0x16>
 8010234:	290a      	cmp	r1, #10
 8010236:	d103      	bne.n	8010240 <__sfputc_r+0x1e>
 8010238:	f85d 4b04 	ldr.w	r4, [sp], #4
 801023c:	f000 b932 	b.w	80104a4 <__swbuf_r>
 8010240:	6813      	ldr	r3, [r2, #0]
 8010242:	1c58      	adds	r0, r3, #1
 8010244:	6010      	str	r0, [r2, #0]
 8010246:	7019      	strb	r1, [r3, #0]
 8010248:	4608      	mov	r0, r1
 801024a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801024e:	4770      	bx	lr

08010250 <__sfputs_r>:
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	4606      	mov	r6, r0
 8010254:	460f      	mov	r7, r1
 8010256:	4614      	mov	r4, r2
 8010258:	18d5      	adds	r5, r2, r3
 801025a:	42ac      	cmp	r4, r5
 801025c:	d101      	bne.n	8010262 <__sfputs_r+0x12>
 801025e:	2000      	movs	r0, #0
 8010260:	e007      	b.n	8010272 <__sfputs_r+0x22>
 8010262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010266:	463a      	mov	r2, r7
 8010268:	4630      	mov	r0, r6
 801026a:	f7ff ffda 	bl	8010222 <__sfputc_r>
 801026e:	1c43      	adds	r3, r0, #1
 8010270:	d1f3      	bne.n	801025a <__sfputs_r+0xa>
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010274 <_vfiprintf_r>:
 8010274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	460d      	mov	r5, r1
 801027a:	b09d      	sub	sp, #116	@ 0x74
 801027c:	4614      	mov	r4, r2
 801027e:	4698      	mov	r8, r3
 8010280:	4606      	mov	r6, r0
 8010282:	b118      	cbz	r0, 801028c <_vfiprintf_r+0x18>
 8010284:	6a03      	ldr	r3, [r0, #32]
 8010286:	b90b      	cbnz	r3, 801028c <_vfiprintf_r+0x18>
 8010288:	f7fe fb3a 	bl	800e900 <__sinit>
 801028c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801028e:	07d9      	lsls	r1, r3, #31
 8010290:	d405      	bmi.n	801029e <_vfiprintf_r+0x2a>
 8010292:	89ab      	ldrh	r3, [r5, #12]
 8010294:	059a      	lsls	r2, r3, #22
 8010296:	d402      	bmi.n	801029e <_vfiprintf_r+0x2a>
 8010298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801029a:	f7fe fc28 	bl	800eaee <__retarget_lock_acquire_recursive>
 801029e:	89ab      	ldrh	r3, [r5, #12]
 80102a0:	071b      	lsls	r3, r3, #28
 80102a2:	d501      	bpl.n	80102a8 <_vfiprintf_r+0x34>
 80102a4:	692b      	ldr	r3, [r5, #16]
 80102a6:	b99b      	cbnz	r3, 80102d0 <_vfiprintf_r+0x5c>
 80102a8:	4629      	mov	r1, r5
 80102aa:	4630      	mov	r0, r6
 80102ac:	f000 f938 	bl	8010520 <__swsetup_r>
 80102b0:	b170      	cbz	r0, 80102d0 <_vfiprintf_r+0x5c>
 80102b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80102b4:	07dc      	lsls	r4, r3, #31
 80102b6:	d504      	bpl.n	80102c2 <_vfiprintf_r+0x4e>
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	b01d      	add	sp, #116	@ 0x74
 80102be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c2:	89ab      	ldrh	r3, [r5, #12]
 80102c4:	0598      	lsls	r0, r3, #22
 80102c6:	d4f7      	bmi.n	80102b8 <_vfiprintf_r+0x44>
 80102c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102ca:	f7fe fc11 	bl	800eaf0 <__retarget_lock_release_recursive>
 80102ce:	e7f3      	b.n	80102b8 <_vfiprintf_r+0x44>
 80102d0:	2300      	movs	r3, #0
 80102d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80102d4:	2320      	movs	r3, #32
 80102d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102da:	f8cd 800c 	str.w	r8, [sp, #12]
 80102de:	2330      	movs	r3, #48	@ 0x30
 80102e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010490 <_vfiprintf_r+0x21c>
 80102e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102e8:	f04f 0901 	mov.w	r9, #1
 80102ec:	4623      	mov	r3, r4
 80102ee:	469a      	mov	sl, r3
 80102f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102f4:	b10a      	cbz	r2, 80102fa <_vfiprintf_r+0x86>
 80102f6:	2a25      	cmp	r2, #37	@ 0x25
 80102f8:	d1f9      	bne.n	80102ee <_vfiprintf_r+0x7a>
 80102fa:	ebba 0b04 	subs.w	fp, sl, r4
 80102fe:	d00b      	beq.n	8010318 <_vfiprintf_r+0xa4>
 8010300:	465b      	mov	r3, fp
 8010302:	4622      	mov	r2, r4
 8010304:	4629      	mov	r1, r5
 8010306:	4630      	mov	r0, r6
 8010308:	f7ff ffa2 	bl	8010250 <__sfputs_r>
 801030c:	3001      	adds	r0, #1
 801030e:	f000 80a7 	beq.w	8010460 <_vfiprintf_r+0x1ec>
 8010312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010314:	445a      	add	r2, fp
 8010316:	9209      	str	r2, [sp, #36]	@ 0x24
 8010318:	f89a 3000 	ldrb.w	r3, [sl]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 809f 	beq.w	8010460 <_vfiprintf_r+0x1ec>
 8010322:	2300      	movs	r3, #0
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801032c:	f10a 0a01 	add.w	sl, sl, #1
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	9307      	str	r3, [sp, #28]
 8010334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010338:	931a      	str	r3, [sp, #104]	@ 0x68
 801033a:	4654      	mov	r4, sl
 801033c:	2205      	movs	r2, #5
 801033e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010342:	4853      	ldr	r0, [pc, #332]	@ (8010490 <_vfiprintf_r+0x21c>)
 8010344:	f7ef ffe4 	bl	8000310 <memchr>
 8010348:	9a04      	ldr	r2, [sp, #16]
 801034a:	b9d8      	cbnz	r0, 8010384 <_vfiprintf_r+0x110>
 801034c:	06d1      	lsls	r1, r2, #27
 801034e:	bf44      	itt	mi
 8010350:	2320      	movmi	r3, #32
 8010352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010356:	0713      	lsls	r3, r2, #28
 8010358:	bf44      	itt	mi
 801035a:	232b      	movmi	r3, #43	@ 0x2b
 801035c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010360:	f89a 3000 	ldrb.w	r3, [sl]
 8010364:	2b2a      	cmp	r3, #42	@ 0x2a
 8010366:	d015      	beq.n	8010394 <_vfiprintf_r+0x120>
 8010368:	9a07      	ldr	r2, [sp, #28]
 801036a:	4654      	mov	r4, sl
 801036c:	2000      	movs	r0, #0
 801036e:	f04f 0c0a 	mov.w	ip, #10
 8010372:	4621      	mov	r1, r4
 8010374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010378:	3b30      	subs	r3, #48	@ 0x30
 801037a:	2b09      	cmp	r3, #9
 801037c:	d94b      	bls.n	8010416 <_vfiprintf_r+0x1a2>
 801037e:	b1b0      	cbz	r0, 80103ae <_vfiprintf_r+0x13a>
 8010380:	9207      	str	r2, [sp, #28]
 8010382:	e014      	b.n	80103ae <_vfiprintf_r+0x13a>
 8010384:	eba0 0308 	sub.w	r3, r0, r8
 8010388:	fa09 f303 	lsl.w	r3, r9, r3
 801038c:	4313      	orrs	r3, r2
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	46a2      	mov	sl, r4
 8010392:	e7d2      	b.n	801033a <_vfiprintf_r+0xc6>
 8010394:	9b03      	ldr	r3, [sp, #12]
 8010396:	1d19      	adds	r1, r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	9103      	str	r1, [sp, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	bfbb      	ittet	lt
 80103a0:	425b      	neglt	r3, r3
 80103a2:	f042 0202 	orrlt.w	r2, r2, #2
 80103a6:	9307      	strge	r3, [sp, #28]
 80103a8:	9307      	strlt	r3, [sp, #28]
 80103aa:	bfb8      	it	lt
 80103ac:	9204      	strlt	r2, [sp, #16]
 80103ae:	7823      	ldrb	r3, [r4, #0]
 80103b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80103b2:	d10a      	bne.n	80103ca <_vfiprintf_r+0x156>
 80103b4:	7863      	ldrb	r3, [r4, #1]
 80103b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80103b8:	d132      	bne.n	8010420 <_vfiprintf_r+0x1ac>
 80103ba:	9b03      	ldr	r3, [sp, #12]
 80103bc:	1d1a      	adds	r2, r3, #4
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	9203      	str	r2, [sp, #12]
 80103c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103c6:	3402      	adds	r4, #2
 80103c8:	9305      	str	r3, [sp, #20]
 80103ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80104a0 <_vfiprintf_r+0x22c>
 80103ce:	7821      	ldrb	r1, [r4, #0]
 80103d0:	2203      	movs	r2, #3
 80103d2:	4650      	mov	r0, sl
 80103d4:	f7ef ff9c 	bl	8000310 <memchr>
 80103d8:	b138      	cbz	r0, 80103ea <_vfiprintf_r+0x176>
 80103da:	9b04      	ldr	r3, [sp, #16]
 80103dc:	eba0 000a 	sub.w	r0, r0, sl
 80103e0:	2240      	movs	r2, #64	@ 0x40
 80103e2:	4082      	lsls	r2, r0
 80103e4:	4313      	orrs	r3, r2
 80103e6:	3401      	adds	r4, #1
 80103e8:	9304      	str	r3, [sp, #16]
 80103ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ee:	4829      	ldr	r0, [pc, #164]	@ (8010494 <_vfiprintf_r+0x220>)
 80103f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103f4:	2206      	movs	r2, #6
 80103f6:	f7ef ff8b 	bl	8000310 <memchr>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d03f      	beq.n	801047e <_vfiprintf_r+0x20a>
 80103fe:	4b26      	ldr	r3, [pc, #152]	@ (8010498 <_vfiprintf_r+0x224>)
 8010400:	bb1b      	cbnz	r3, 801044a <_vfiprintf_r+0x1d6>
 8010402:	9b03      	ldr	r3, [sp, #12]
 8010404:	3307      	adds	r3, #7
 8010406:	f023 0307 	bic.w	r3, r3, #7
 801040a:	3308      	adds	r3, #8
 801040c:	9303      	str	r3, [sp, #12]
 801040e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010410:	443b      	add	r3, r7
 8010412:	9309      	str	r3, [sp, #36]	@ 0x24
 8010414:	e76a      	b.n	80102ec <_vfiprintf_r+0x78>
 8010416:	fb0c 3202 	mla	r2, ip, r2, r3
 801041a:	460c      	mov	r4, r1
 801041c:	2001      	movs	r0, #1
 801041e:	e7a8      	b.n	8010372 <_vfiprintf_r+0xfe>
 8010420:	2300      	movs	r3, #0
 8010422:	3401      	adds	r4, #1
 8010424:	9305      	str	r3, [sp, #20]
 8010426:	4619      	mov	r1, r3
 8010428:	f04f 0c0a 	mov.w	ip, #10
 801042c:	4620      	mov	r0, r4
 801042e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010432:	3a30      	subs	r2, #48	@ 0x30
 8010434:	2a09      	cmp	r2, #9
 8010436:	d903      	bls.n	8010440 <_vfiprintf_r+0x1cc>
 8010438:	2b00      	cmp	r3, #0
 801043a:	d0c6      	beq.n	80103ca <_vfiprintf_r+0x156>
 801043c:	9105      	str	r1, [sp, #20]
 801043e:	e7c4      	b.n	80103ca <_vfiprintf_r+0x156>
 8010440:	fb0c 2101 	mla	r1, ip, r1, r2
 8010444:	4604      	mov	r4, r0
 8010446:	2301      	movs	r3, #1
 8010448:	e7f0      	b.n	801042c <_vfiprintf_r+0x1b8>
 801044a:	ab03      	add	r3, sp, #12
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	462a      	mov	r2, r5
 8010450:	4b12      	ldr	r3, [pc, #72]	@ (801049c <_vfiprintf_r+0x228>)
 8010452:	a904      	add	r1, sp, #16
 8010454:	4630      	mov	r0, r6
 8010456:	f7fd fe1f 	bl	800e098 <_printf_float>
 801045a:	4607      	mov	r7, r0
 801045c:	1c78      	adds	r0, r7, #1
 801045e:	d1d6      	bne.n	801040e <_vfiprintf_r+0x19a>
 8010460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010462:	07d9      	lsls	r1, r3, #31
 8010464:	d405      	bmi.n	8010472 <_vfiprintf_r+0x1fe>
 8010466:	89ab      	ldrh	r3, [r5, #12]
 8010468:	059a      	lsls	r2, r3, #22
 801046a:	d402      	bmi.n	8010472 <_vfiprintf_r+0x1fe>
 801046c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801046e:	f7fe fb3f 	bl	800eaf0 <__retarget_lock_release_recursive>
 8010472:	89ab      	ldrh	r3, [r5, #12]
 8010474:	065b      	lsls	r3, r3, #25
 8010476:	f53f af1f 	bmi.w	80102b8 <_vfiprintf_r+0x44>
 801047a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801047c:	e71e      	b.n	80102bc <_vfiprintf_r+0x48>
 801047e:	ab03      	add	r3, sp, #12
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	462a      	mov	r2, r5
 8010484:	4b05      	ldr	r3, [pc, #20]	@ (801049c <_vfiprintf_r+0x228>)
 8010486:	a904      	add	r1, sp, #16
 8010488:	4630      	mov	r0, r6
 801048a:	f7fe f88d 	bl	800e5a8 <_printf_i>
 801048e:	e7e4      	b.n	801045a <_vfiprintf_r+0x1e6>
 8010490:	08010b77 	.word	0x08010b77
 8010494:	08010b81 	.word	0x08010b81
 8010498:	0800e099 	.word	0x0800e099
 801049c:	08010251 	.word	0x08010251
 80104a0:	08010b7d 	.word	0x08010b7d

080104a4 <__swbuf_r>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	460e      	mov	r6, r1
 80104a8:	4614      	mov	r4, r2
 80104aa:	4605      	mov	r5, r0
 80104ac:	b118      	cbz	r0, 80104b6 <__swbuf_r+0x12>
 80104ae:	6a03      	ldr	r3, [r0, #32]
 80104b0:	b90b      	cbnz	r3, 80104b6 <__swbuf_r+0x12>
 80104b2:	f7fe fa25 	bl	800e900 <__sinit>
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	60a3      	str	r3, [r4, #8]
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	071a      	lsls	r2, r3, #28
 80104be:	d501      	bpl.n	80104c4 <__swbuf_r+0x20>
 80104c0:	6923      	ldr	r3, [r4, #16]
 80104c2:	b943      	cbnz	r3, 80104d6 <__swbuf_r+0x32>
 80104c4:	4621      	mov	r1, r4
 80104c6:	4628      	mov	r0, r5
 80104c8:	f000 f82a 	bl	8010520 <__swsetup_r>
 80104cc:	b118      	cbz	r0, 80104d6 <__swbuf_r+0x32>
 80104ce:	f04f 37ff 	mov.w	r7, #4294967295
 80104d2:	4638      	mov	r0, r7
 80104d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104d6:	6823      	ldr	r3, [r4, #0]
 80104d8:	6922      	ldr	r2, [r4, #16]
 80104da:	1a98      	subs	r0, r3, r2
 80104dc:	6963      	ldr	r3, [r4, #20]
 80104de:	b2f6      	uxtb	r6, r6
 80104e0:	4283      	cmp	r3, r0
 80104e2:	4637      	mov	r7, r6
 80104e4:	dc05      	bgt.n	80104f2 <__swbuf_r+0x4e>
 80104e6:	4621      	mov	r1, r4
 80104e8:	4628      	mov	r0, r5
 80104ea:	f7ff fde9 	bl	80100c0 <_fflush_r>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	d1ed      	bne.n	80104ce <__swbuf_r+0x2a>
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	3b01      	subs	r3, #1
 80104f6:	60a3      	str	r3, [r4, #8]
 80104f8:	6823      	ldr	r3, [r4, #0]
 80104fa:	1c5a      	adds	r2, r3, #1
 80104fc:	6022      	str	r2, [r4, #0]
 80104fe:	701e      	strb	r6, [r3, #0]
 8010500:	6962      	ldr	r2, [r4, #20]
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	429a      	cmp	r2, r3
 8010506:	d004      	beq.n	8010512 <__swbuf_r+0x6e>
 8010508:	89a3      	ldrh	r3, [r4, #12]
 801050a:	07db      	lsls	r3, r3, #31
 801050c:	d5e1      	bpl.n	80104d2 <__swbuf_r+0x2e>
 801050e:	2e0a      	cmp	r6, #10
 8010510:	d1df      	bne.n	80104d2 <__swbuf_r+0x2e>
 8010512:	4621      	mov	r1, r4
 8010514:	4628      	mov	r0, r5
 8010516:	f7ff fdd3 	bl	80100c0 <_fflush_r>
 801051a:	2800      	cmp	r0, #0
 801051c:	d0d9      	beq.n	80104d2 <__swbuf_r+0x2e>
 801051e:	e7d6      	b.n	80104ce <__swbuf_r+0x2a>

08010520 <__swsetup_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4b29      	ldr	r3, [pc, #164]	@ (80105c8 <__swsetup_r+0xa8>)
 8010524:	4605      	mov	r5, r0
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	460c      	mov	r4, r1
 801052a:	b118      	cbz	r0, 8010534 <__swsetup_r+0x14>
 801052c:	6a03      	ldr	r3, [r0, #32]
 801052e:	b90b      	cbnz	r3, 8010534 <__swsetup_r+0x14>
 8010530:	f7fe f9e6 	bl	800e900 <__sinit>
 8010534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010538:	0719      	lsls	r1, r3, #28
 801053a:	d422      	bmi.n	8010582 <__swsetup_r+0x62>
 801053c:	06da      	lsls	r2, r3, #27
 801053e:	d407      	bmi.n	8010550 <__swsetup_r+0x30>
 8010540:	2209      	movs	r2, #9
 8010542:	602a      	str	r2, [r5, #0]
 8010544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	f04f 30ff 	mov.w	r0, #4294967295
 801054e:	e033      	b.n	80105b8 <__swsetup_r+0x98>
 8010550:	0758      	lsls	r0, r3, #29
 8010552:	d512      	bpl.n	801057a <__swsetup_r+0x5a>
 8010554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010556:	b141      	cbz	r1, 801056a <__swsetup_r+0x4a>
 8010558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801055c:	4299      	cmp	r1, r3
 801055e:	d002      	beq.n	8010566 <__swsetup_r+0x46>
 8010560:	4628      	mov	r0, r5
 8010562:	f7ff f8a7 	bl	800f6b4 <_free_r>
 8010566:	2300      	movs	r3, #0
 8010568:	6363      	str	r3, [r4, #52]	@ 0x34
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010570:	81a3      	strh	r3, [r4, #12]
 8010572:	2300      	movs	r3, #0
 8010574:	6063      	str	r3, [r4, #4]
 8010576:	6923      	ldr	r3, [r4, #16]
 8010578:	6023      	str	r3, [r4, #0]
 801057a:	89a3      	ldrh	r3, [r4, #12]
 801057c:	f043 0308 	orr.w	r3, r3, #8
 8010580:	81a3      	strh	r3, [r4, #12]
 8010582:	6923      	ldr	r3, [r4, #16]
 8010584:	b94b      	cbnz	r3, 801059a <__swsetup_r+0x7a>
 8010586:	89a3      	ldrh	r3, [r4, #12]
 8010588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801058c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010590:	d003      	beq.n	801059a <__swsetup_r+0x7a>
 8010592:	4621      	mov	r1, r4
 8010594:	4628      	mov	r0, r5
 8010596:	f000 f883 	bl	80106a0 <__smakebuf_r>
 801059a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059e:	f013 0201 	ands.w	r2, r3, #1
 80105a2:	d00a      	beq.n	80105ba <__swsetup_r+0x9a>
 80105a4:	2200      	movs	r2, #0
 80105a6:	60a2      	str	r2, [r4, #8]
 80105a8:	6962      	ldr	r2, [r4, #20]
 80105aa:	4252      	negs	r2, r2
 80105ac:	61a2      	str	r2, [r4, #24]
 80105ae:	6922      	ldr	r2, [r4, #16]
 80105b0:	b942      	cbnz	r2, 80105c4 <__swsetup_r+0xa4>
 80105b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80105b6:	d1c5      	bne.n	8010544 <__swsetup_r+0x24>
 80105b8:	bd38      	pop	{r3, r4, r5, pc}
 80105ba:	0799      	lsls	r1, r3, #30
 80105bc:	bf58      	it	pl
 80105be:	6962      	ldrpl	r2, [r4, #20]
 80105c0:	60a2      	str	r2, [r4, #8]
 80105c2:	e7f4      	b.n	80105ae <__swsetup_r+0x8e>
 80105c4:	2000      	movs	r0, #0
 80105c6:	e7f7      	b.n	80105b8 <__swsetup_r+0x98>
 80105c8:	2400002c 	.word	0x2400002c

080105cc <_raise_r>:
 80105cc:	291f      	cmp	r1, #31
 80105ce:	b538      	push	{r3, r4, r5, lr}
 80105d0:	4605      	mov	r5, r0
 80105d2:	460c      	mov	r4, r1
 80105d4:	d904      	bls.n	80105e0 <_raise_r+0x14>
 80105d6:	2316      	movs	r3, #22
 80105d8:	6003      	str	r3, [r0, #0]
 80105da:	f04f 30ff 	mov.w	r0, #4294967295
 80105de:	bd38      	pop	{r3, r4, r5, pc}
 80105e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80105e2:	b112      	cbz	r2, 80105ea <_raise_r+0x1e>
 80105e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105e8:	b94b      	cbnz	r3, 80105fe <_raise_r+0x32>
 80105ea:	4628      	mov	r0, r5
 80105ec:	f000 f830 	bl	8010650 <_getpid_r>
 80105f0:	4622      	mov	r2, r4
 80105f2:	4601      	mov	r1, r0
 80105f4:	4628      	mov	r0, r5
 80105f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105fa:	f000 b817 	b.w	801062c <_kill_r>
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d00a      	beq.n	8010618 <_raise_r+0x4c>
 8010602:	1c59      	adds	r1, r3, #1
 8010604:	d103      	bne.n	801060e <_raise_r+0x42>
 8010606:	2316      	movs	r3, #22
 8010608:	6003      	str	r3, [r0, #0]
 801060a:	2001      	movs	r0, #1
 801060c:	e7e7      	b.n	80105de <_raise_r+0x12>
 801060e:	2100      	movs	r1, #0
 8010610:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010614:	4620      	mov	r0, r4
 8010616:	4798      	blx	r3
 8010618:	2000      	movs	r0, #0
 801061a:	e7e0      	b.n	80105de <_raise_r+0x12>

0801061c <raise>:
 801061c:	4b02      	ldr	r3, [pc, #8]	@ (8010628 <raise+0xc>)
 801061e:	4601      	mov	r1, r0
 8010620:	6818      	ldr	r0, [r3, #0]
 8010622:	f7ff bfd3 	b.w	80105cc <_raise_r>
 8010626:	bf00      	nop
 8010628:	2400002c 	.word	0x2400002c

0801062c <_kill_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	@ (801064c <_kill_r+0x20>)
 8010630:	2300      	movs	r3, #0
 8010632:	4604      	mov	r4, r0
 8010634:	4608      	mov	r0, r1
 8010636:	4611      	mov	r1, r2
 8010638:	602b      	str	r3, [r5, #0]
 801063a:	f7f1 f91b 	bl	8001874 <_kill>
 801063e:	1c43      	adds	r3, r0, #1
 8010640:	d102      	bne.n	8010648 <_kill_r+0x1c>
 8010642:	682b      	ldr	r3, [r5, #0]
 8010644:	b103      	cbz	r3, 8010648 <_kill_r+0x1c>
 8010646:	6023      	str	r3, [r4, #0]
 8010648:	bd38      	pop	{r3, r4, r5, pc}
 801064a:	bf00      	nop
 801064c:	24000720 	.word	0x24000720

08010650 <_getpid_r>:
 8010650:	f7f1 b908 	b.w	8001864 <_getpid>

08010654 <__swhatbuf_r>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	460c      	mov	r4, r1
 8010658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801065c:	2900      	cmp	r1, #0
 801065e:	b096      	sub	sp, #88	@ 0x58
 8010660:	4615      	mov	r5, r2
 8010662:	461e      	mov	r6, r3
 8010664:	da0d      	bge.n	8010682 <__swhatbuf_r+0x2e>
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801066c:	f04f 0100 	mov.w	r1, #0
 8010670:	bf14      	ite	ne
 8010672:	2340      	movne	r3, #64	@ 0x40
 8010674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010678:	2000      	movs	r0, #0
 801067a:	6031      	str	r1, [r6, #0]
 801067c:	602b      	str	r3, [r5, #0]
 801067e:	b016      	add	sp, #88	@ 0x58
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	466a      	mov	r2, sp
 8010684:	f000 f848 	bl	8010718 <_fstat_r>
 8010688:	2800      	cmp	r0, #0
 801068a:	dbec      	blt.n	8010666 <__swhatbuf_r+0x12>
 801068c:	9901      	ldr	r1, [sp, #4]
 801068e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010696:	4259      	negs	r1, r3
 8010698:	4159      	adcs	r1, r3
 801069a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801069e:	e7eb      	b.n	8010678 <__swhatbuf_r+0x24>

080106a0 <__smakebuf_r>:
 80106a0:	898b      	ldrh	r3, [r1, #12]
 80106a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106a4:	079d      	lsls	r5, r3, #30
 80106a6:	4606      	mov	r6, r0
 80106a8:	460c      	mov	r4, r1
 80106aa:	d507      	bpl.n	80106bc <__smakebuf_r+0x1c>
 80106ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	6123      	str	r3, [r4, #16]
 80106b4:	2301      	movs	r3, #1
 80106b6:	6163      	str	r3, [r4, #20]
 80106b8:	b003      	add	sp, #12
 80106ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106bc:	ab01      	add	r3, sp, #4
 80106be:	466a      	mov	r2, sp
 80106c0:	f7ff ffc8 	bl	8010654 <__swhatbuf_r>
 80106c4:	9f00      	ldr	r7, [sp, #0]
 80106c6:	4605      	mov	r5, r0
 80106c8:	4639      	mov	r1, r7
 80106ca:	4630      	mov	r0, r6
 80106cc:	f7ff f866 	bl	800f79c <_malloc_r>
 80106d0:	b948      	cbnz	r0, 80106e6 <__smakebuf_r+0x46>
 80106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d6:	059a      	lsls	r2, r3, #22
 80106d8:	d4ee      	bmi.n	80106b8 <__smakebuf_r+0x18>
 80106da:	f023 0303 	bic.w	r3, r3, #3
 80106de:	f043 0302 	orr.w	r3, r3, #2
 80106e2:	81a3      	strh	r3, [r4, #12]
 80106e4:	e7e2      	b.n	80106ac <__smakebuf_r+0xc>
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	6020      	str	r0, [r4, #0]
 80106ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ee:	81a3      	strh	r3, [r4, #12]
 80106f0:	9b01      	ldr	r3, [sp, #4]
 80106f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80106f6:	b15b      	cbz	r3, 8010710 <__smakebuf_r+0x70>
 80106f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106fc:	4630      	mov	r0, r6
 80106fe:	f000 f81d 	bl	801073c <_isatty_r>
 8010702:	b128      	cbz	r0, 8010710 <__smakebuf_r+0x70>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	f023 0303 	bic.w	r3, r3, #3
 801070a:	f043 0301 	orr.w	r3, r3, #1
 801070e:	81a3      	strh	r3, [r4, #12]
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	431d      	orrs	r5, r3
 8010714:	81a5      	strh	r5, [r4, #12]
 8010716:	e7cf      	b.n	80106b8 <__smakebuf_r+0x18>

08010718 <_fstat_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d07      	ldr	r5, [pc, #28]	@ (8010738 <_fstat_r+0x20>)
 801071c:	2300      	movs	r3, #0
 801071e:	4604      	mov	r4, r0
 8010720:	4608      	mov	r0, r1
 8010722:	4611      	mov	r1, r2
 8010724:	602b      	str	r3, [r5, #0]
 8010726:	f7f1 f905 	bl	8001934 <_fstat>
 801072a:	1c43      	adds	r3, r0, #1
 801072c:	d102      	bne.n	8010734 <_fstat_r+0x1c>
 801072e:	682b      	ldr	r3, [r5, #0]
 8010730:	b103      	cbz	r3, 8010734 <_fstat_r+0x1c>
 8010732:	6023      	str	r3, [r4, #0]
 8010734:	bd38      	pop	{r3, r4, r5, pc}
 8010736:	bf00      	nop
 8010738:	24000720 	.word	0x24000720

0801073c <_isatty_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4d06      	ldr	r5, [pc, #24]	@ (8010758 <_isatty_r+0x1c>)
 8010740:	2300      	movs	r3, #0
 8010742:	4604      	mov	r4, r0
 8010744:	4608      	mov	r0, r1
 8010746:	602b      	str	r3, [r5, #0]
 8010748:	f7f1 f904 	bl	8001954 <_isatty>
 801074c:	1c43      	adds	r3, r0, #1
 801074e:	d102      	bne.n	8010756 <_isatty_r+0x1a>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	b103      	cbz	r3, 8010756 <_isatty_r+0x1a>
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	bd38      	pop	{r3, r4, r5, pc}
 8010758:	24000720 	.word	0x24000720

0801075c <_init>:
 801075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075e:	bf00      	nop
 8010760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010762:	bc08      	pop	{r3}
 8010764:	469e      	mov	lr, r3
 8010766:	4770      	bx	lr

08010768 <_fini>:
 8010768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801076a:	bf00      	nop
 801076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801076e:	bc08      	pop	{r3}
 8010770:	469e      	mov	lr, r3
 8010772:	4770      	bx	lr
